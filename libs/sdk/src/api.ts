/* tslint:disable */
/* eslint-disable */
/**
 * Nima CMS
 * The core api for the Nima CMS backend.
 *
 * The version of the OpenAPI document: 0.0.1-alpha
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios';
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError } from './base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	assertParamExists,
	createRequestFunction,
	DUMMY_BASE_URL,
	serializeDataIfNeeded,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	toPathString,
} from './common';
import { Configuration } from './configuration';

/**
 *
 * @export
 * @interface AddressDto
 */
export interface AddressDto {
	/**
	 *
	 * @type {number}
	 * @memberof AddressDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'firstName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'lastName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'companyName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'phone'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'country': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'state': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'city': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'zip': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'address': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'address2'?: string;
}
/**
 *
 * @export
 * @interface AttributeDrillDownDto
 */
export interface AttributeDrillDownDto {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeDrillDownDto
	 */
	'attributeId': number;
	/**
	 *
	 * @type {string}
	 * @memberof AttributeDrillDownDto
	 */
	'attributeSlug': string;
	/**
	 *
	 * @type {AttributeDrillDownValuesDto}
	 * @memberof AttributeDrillDownDto
	 */
	'fieldValues': AttributeDrillDownValuesDto;
}
/**
 *
 * @export
 * @interface AttributeDrillDownValuesDto
 */
export interface AttributeDrillDownValuesDto {
	/**
	 *
	 * @type {string}
	 * @memberof AttributeDrillDownValuesDto
	 */
	'attributeValueSlug': string;
	/**
	 *
	 * @type {number}
	 * @memberof AttributeDrillDownValuesDto
	 */
	'attributeValueId': number;
	/**
	 *
	 * @type {number}
	 * @memberof AttributeDrillDownValuesDto
	 */
	'count': number;
}
/**
 *
 * @export
 * @interface AttributeDto
 */
export interface AttributeDto {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeDto
	 */
	'id': number;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof AttributeDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof AttributeDto
	 */
	'slug': string;
	/**
	 *
	 * @type {object}
	 * @memberof AttributeDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof AttributeDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeDto
	 */
	'availableInGrid': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeDto
	 */
	'visibleInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeDto
	 */
	'filterableInDashboard': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeDto
	 */
	'filterableInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeDto
	 */
	'valueRequired': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof AttributeDto
	 */
	'storefrontSearchPosition': number;
	/**
	 *
	 * @type {InputType}
	 * @memberof AttributeDto
	 */
	'inputType': InputType;
	/**
	 *
	 * @type {Unit}
	 * @memberof AttributeDto
	 */
	'unit'?: Unit;
}
/**
 *
 * @export
 * @interface AttributeValueDto
 */
export interface AttributeValueDto {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValueDto
	 */
	'id': number;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof AttributeValueDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof AttributeValueDto
	 */
	'slug'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValueDto
	 */
	'sortOrder'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof AttributeValueDto
	 */
	'value'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AttributeValueDto
	 */
	'fileUrl'?: string;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof AttributeValueDto
	 */
	'richText'?: TranslatableDto;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeValueDto
	 */
	'boolean'?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof AttributeValueDto
	 */
	'dateTime'?: string;
}
/**
 *
 * @export
 * @interface CategoryDto
 */
export interface CategoryDto {
	/**
	 *
	 * @type {number}
	 * @memberof CategoryDto
	 */
	'id': number;
	/**
	 *
	 * @type {object}
	 * @memberof CategoryDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CategoryDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CategoryDto
	 */
	'seoTitle': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CategoryDto
	 */
	'seoDescription': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CategoryDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CategoryDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof CategoryDto
	 */
	'slug': string;
	/**
	 *
	 * @type {Array<CategoryDto>}
	 * @memberof CategoryDto
	 */
	'children': Array<CategoryDto>;
}
/**
 *
 * @export
 * @interface CreateAssignedProductAttributeDto
 */
export interface CreateAssignedProductAttributeDto {
	/**
	 *
	 * @type {number}
	 * @memberof CreateAssignedProductAttributeDto
	 */
	'productTypeAttributeId': number;
	/**
	 *
	 * @type {Array<CreateAssignedProductAttributeValueDto>}
	 * @memberof CreateAssignedProductAttributeDto
	 */
	'values': Array<CreateAssignedProductAttributeValueDto>;
}
/**
 *
 * @export
 * @interface CreateAssignedProductAttributeValueDto
 */
export interface CreateAssignedProductAttributeValueDto {
	/**
	 *
	 * @type {number}
	 * @memberof CreateAssignedProductAttributeValueDto
	 */
	'sortOrder': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateAssignedProductAttributeValueDto
	 */
	'valueId': number;
}
/**
 *
 * @export
 * @interface CreateAssignedProductVariantAttributeDto
 */
export interface CreateAssignedProductVariantAttributeDto {
	/**
	 *
	 * @type {number}
	 * @memberof CreateAssignedProductVariantAttributeDto
	 */
	'productTypeVariantAttributeId': number;
	/**
	 *
	 * @type {Array<CreateAssignedProductVariantAttributeValueDto>}
	 * @memberof CreateAssignedProductVariantAttributeDto
	 */
	'values': Array<CreateAssignedProductVariantAttributeValueDto>;
}
/**
 *
 * @export
 * @interface CreateAssignedProductVariantAttributeValueDto
 */
export interface CreateAssignedProductVariantAttributeValueDto {
	/**
	 *
	 * @type {number}
	 * @memberof CreateAssignedProductVariantAttributeValueDto
	 */
	'sortOrder': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateAssignedProductVariantAttributeValueDto
	 */
	'valueId': number;
}
/**
 *
 * @export
 * @interface CreateAttributeDto
 */
export interface CreateAttributeDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateAttributeDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAttributeDto
	 */
	'slug': string;
	/**
	 *
	 * @type {object}
	 * @memberof CreateAttributeDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateAttributeDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeDto
	 */
	'availableInGrid': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeDto
	 */
	'visibleInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeDto
	 */
	'filterableInDashboard': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeDto
	 */
	'filterableInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeDto
	 */
	'valueRequired': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof CreateAttributeDto
	 */
	'storefrontSearchPosition': number;
	/**
	 *
	 * @type {InputType}
	 * @memberof CreateAttributeDto
	 */
	'inputType': InputType;
	/**
	 *
	 * @type {Unit}
	 * @memberof CreateAttributeDto
	 */
	'unit'?: Unit;
}
/**
 *
 * @export
 * @interface CreateAttributeValueDto
 */
export interface CreateAttributeValueDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateAttributeValueDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAttributeValueDto
	 */
	'slug'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateAttributeValueDto
	 */
	'sortOrder'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAttributeValueDto
	 */
	'value'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAttributeValueDto
	 */
	'fileUrl'?: string;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateAttributeValueDto
	 */
	'richText'?: TranslatableDto;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeValueDto
	 */
	'boolean'?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAttributeValueDto
	 */
	'dateTime'?: string;
}
/**
 *
 * @export
 * @interface CreateCategoryDto
 */
export interface CreateCategoryDto {
	/**
	 *
	 * @type {object}
	 * @memberof CreateCategoryDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateCategoryDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCategoryDto
	 */
	'seoTitle': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCategoryDto
	 */
	'seoDescription': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCategoryDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCategoryDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCategoryDto
	 */
	'slug': string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateCategoryDto
	 */
	'parentId': number;
}
/**
 *
 * @export
 * @interface CreateCheckoutDto
 */
export interface CreateCheckoutDto {
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'email'?: string;
	/**
	 *
	 * @type {UserDto}
	 * @memberof CreateCheckoutDto
	 */
	'user': UserDto;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof CreateCheckoutDto
	 */
	'billingAddress': AddressDto;
	/**
	 *
	 * @type {number}
	 * @memberof CreateCheckoutDto
	 */
	'discountAmount': number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'discountName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'note': string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof CreateCheckoutDto
	 */
	'shippingAddress': AddressDto;
	/**
	 *
	 * @type {number}
	 * @memberof CreateCheckoutDto
	 */
	'shipping_method_id': number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'voucherCode'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'translatedDiscountName'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof CreateCheckoutDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateCheckoutDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'currency': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'country': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'redirectUrl'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'trackingCode'?: string;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof CreateCheckoutDto
	 */
	'languageCode': LanguageCode;
}
/**
 *
 * @export
 * @interface CreateDiscountSaleDto
 */
export interface CreateDiscountSaleDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateDiscountSaleDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {DiscountType}
	 * @memberof CreateDiscountSaleDto
	 */
	'discountType': DiscountType;
	/**
	 *
	 * @type {string}
	 * @memberof CreateDiscountSaleDto
	 */
	'endDate'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateDiscountSaleDto
	 */
	'startDate'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof CreateDiscountSaleDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateDiscountSaleDto
	 */
	'privateMetadata': object;
}
/**
 *
 * @export
 * @interface CreateOrderDto
 */
export interface CreateOrderDto {
	/**
	 * shipping tracking id
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'trackingClientId': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'userEmail': string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof CreateOrderDto
	 */
	'billingAddress'?: AddressDto;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof CreateOrderDto
	 */
	'shippingAddress'?: AddressDto;
	/**
	 *
	 * @type {UserDto}
	 * @memberof CreateOrderDto
	 */
	'user'?: UserDto;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'totalNetAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'voucher_id': number;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof CreateOrderDto
	 */
	'languageCode': LanguageCode;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'shippingPriceGrossAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'totalGrossAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'shippingPriceNetAmount': number;
	/**
	 *
	 * @type {OrderStatus}
	 * @memberof CreateOrderDto
	 */
	'status': OrderStatus;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'shippingMethodName'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'shippingMethodId'?: number;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateOrderDto
	 */
	'displayGrossPrices': boolean;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'customerNote': string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'weight': number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'checkoutToken': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'currency': string;
	/**
	 *
	 * @type {object}
	 * @memberof CreateOrderDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateOrderDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'redirectUrl'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'shippingTaxRate': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'undiscountedTotalGrossAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'undiscountedTotalNetAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'totalPaidAmount': number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'origin': string;
	/**
	 *
	 * @type {object}
	 * @memberof CreateOrderDto
	 */
	'original'?: object;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'searchDocument': string;
}
/**
 *
 * @export
 * @interface CreateProductDto
 */
export interface CreateProductDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateProductDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateProductDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'seoDescription': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'seoTitle': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductDto
	 */
	'chargeTaxes': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductDto
	 */
	'weight': number;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'slug': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'descriptionPlaintext': string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductDto
	 */
	'rating': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductDto
	 */
	'isPublished': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductDto
	 */
	'isVisibleInListings': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductDto
	 */
	'isAvailableForPurchase': boolean;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'currency': string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductDto
	 */
	'minPrice': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductDto
	 */
	'productTypeId': number;
	/**
	 *
	 * @type {Array<CreateAssignedProductAttributeDto>}
	 * @memberof CreateProductDto
	 */
	'attributes': Array<CreateAssignedProductAttributeDto>;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductDto
	 */
	'categoryId': number;
}
/**
 *
 * @export
 * @interface CreateProductTypeDto
 */
export interface CreateProductTypeDto {
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductTypeDto
	 */
	'name': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductTypeDto
	 */
	'hasVariants': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductTypeDto
	 */
	'isShippingRequired': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductTypeDto
	 */
	'weight': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductTypeDto
	 */
	'isDigital': boolean;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductTypeDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductTypeDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductTypeDto
	 */
	'slug': string;
	/**
	 *
	 * @type {Array<ProductTypeAttributeDto>}
	 * @memberof CreateProductTypeDto
	 */
	'attributes': Array<ProductTypeAttributeDto>;
	/**
	 *
	 * @type {Array<ProductTypeVariantAttributeDto>}
	 * @memberof CreateProductTypeDto
	 */
	'variantAttributes': Array<ProductTypeVariantAttributeDto>;
}
/**
 *
 * @export
 * @interface CreateProductVariantDto
 */
export interface CreateProductVariantDto {
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductVariantDto
	 */
	'sku': string;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateProductVariantDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductVariantDto
	 */
	'weight'?: number;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductVariantDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductVariantDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductVariantDto
	 */
	'sortOrder'?: number;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductVariantDto
	 */
	'isPreorder'?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductVariantDto
	 */
	'preorderEndDate'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductVariantDto
	 */
	'preorderGlobalThreshold'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductVariantDto
	 */
	'quantityLimitPerCustomer'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductVariantDto
	 */
	'currency': string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductVariantDto
	 */
	'priceAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductVariantDto
	 */
	'costPriceAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductVariantDto
	 */
	'stock': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductVariantDto
	 */
	'trackInventory': boolean;
	/**
	 *
	 * @type {Array<CreateAssignedProductVariantAttributeDto>}
	 * @memberof CreateProductVariantDto
	 */
	'attributes': Array<CreateAssignedProductVariantAttributeDto>;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum DiscountType {
	PERCENTAGE = 'PERCENTAGE',
	FLAT = 'FLAT'
}


/**
 *
 * @export
 * @enum {string}
 */

export enum InputType {
	DROPDOWN = 'DROPDOWN',
	MULTISELECT = 'MULTISELECT',
	FILE = 'FILE',
	REFERENCE = 'REFERENCE',
	NUMERIC = 'NUMERIC',
	RICH_TEXT = 'RICH_TEXT',
	SWATCH = 'SWATCH',
	BOOLEAN = 'BOOLEAN',
	DATE = 'DATE',
	DATE_TIME = 'DATE_TIME'
}


/**
 *
 * @export
 * @enum {string}
 */

export enum LanguageCode {
	en = 'en',
	el = 'el',
	fr = 'fr',
	es = 'es',
	it = 'it',
	de = 'de',
	ru = 'ru'
}


/**
 *
 * @export
 * @interface LoginUserDto
 */
export interface LoginUserDto {
	/**
	 *
	 * @type {string}
	 * @memberof LoginUserDto
	 */
	'email': string;
	/**
	 *
	 * @type {string}
	 * @memberof LoginUserDto
	 */
	'password': string;
}
/**
 *
 * @export
 * @interface MediaDto
 */
export interface MediaDto {
	/**
	 *
	 * @type {number}
	 * @memberof MediaDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof MediaDto
	 */
	'mimeType': string;
	/**
	 *
	 * @type {string}
	 * @memberof MediaDto
	 */
	'name': string;
	/**
	 *
	 * @type {string}
	 * @memberof MediaDto
	 */
	'slug': string;
	/**
	 *
	 * @type {string}
	 * @memberof MediaDto
	 */
	'url': string;
	/**
	 *
	 * @type {string}
	 * @memberof MediaDto
	 */
	'thumbnailUrl': string | null;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof MediaDto
	 */
	'alt': TranslatableDto;
	/**
	 *
	 * @type {number}
	 * @memberof MediaDto
	 */
	'byteSize': number;
}

/**
 *
 * @export
 * @interface MediaListPaginated
 */
export interface MediaListPaginated {
	/**
	 *
	 * @type {Array<MediaDto>}
	 * @memberof MediaListPaginated
	 */
	'items': Array<MediaDto>;
	/**
	 *
	 * @type {number}
	 * @memberof MediaListPaginated
	 */
	'pageNumber': number;
	/**
	 *
	 * @type {number}
	 * @memberof MediaListPaginated
	 */
	'pageSize': number;
	/**
	 *
	 * @type {number}
	 * @memberof MediaListPaginated
	 */
	'totalCount': number;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum OrderStatus {
	DRAFT = 'DRAFT',
	UNCONFIRMED = 'UNCONFIRMED',
	UNFULFILLED = 'UNFULFILLED',
	PARTIALLY_FULFILLED = 'PARTIALLY_FULFILLED',
	PARTIALLY_RETURNED = 'PARTIALLY_RETURNED',
	RETURNED = 'RETURNED',
	FULFILLED = 'FULFILLED',
	CANCELED = 'CANCELED'
}


/**
 *
 * @export
 * @interface ProductAttributeDto
 */
export interface ProductAttributeDto {
	/**
	 *
	 * @type {number}
	 * @memberof ProductAttributeDto
	 */
	'id': number;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof ProductAttributeDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof ProductAttributeDto
	 */
	'slug': string;
	/**
	 *
	 * @type {object}
	 * @memberof ProductAttributeDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof ProductAttributeDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductAttributeDto
	 */
	'availableInGrid': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductAttributeDto
	 */
	'visibleInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductAttributeDto
	 */
	'filterableInDashboard': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductAttributeDto
	 */
	'filterableInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductAttributeDto
	 */
	'valueRequired': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof ProductAttributeDto
	 */
	'storefrontSearchPosition': number;
	/**
	 *
	 * @type {InputType}
	 * @memberof ProductAttributeDto
	 */
	'inputType': InputType;
	/**
	 *
	 * @type {Unit}
	 * @memberof ProductAttributeDto
	 */
	'unit'?: Unit;
	/**
	 *
	 * @type {Array<AttributeValueDto>}
	 * @memberof ProductAttributeDto
	 */
	'values': Array<AttributeValueDto>;
}
/**
 *
 * @export
 * @interface ProductDto
 */
export interface ProductDto {
	/**
	 *
	 * @type {number}
	 * @memberof ProductDto
	 */
	'id': number;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof ProductDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof ProductDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof ProductDto
	 */
	'updatedAt': string;
	/**
	 *
	 * @type {string}
	 * @memberof ProductDto
	 */
	'seoDescription': string;
	/**
	 *
	 * @type {string}
	 * @memberof ProductDto
	 */
	'seoTitle': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductDto
	 */
	'chargeTaxes': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof ProductDto
	 */
	'weight': number;
	/**
	 *
	 * @type {object}
	 * @memberof ProductDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof ProductDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof ProductDto
	 */
	'slug': string;
	/**
	 *
	 * @type {string}
	 * @memberof ProductDto
	 */
	'descriptionPlaintext': string;
	/**
	 *
	 * @type {number}
	 * @memberof ProductDto
	 */
	'rating': number;
	/**
	 *
	 * @type {string}
	 * @memberof ProductDto
	 */
	'created': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductDto
	 */
	'isPublished': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductDto
	 */
	'isVisibleInListings': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductDto
	 */
	'isAvailableForPurchase': boolean;
	/**
	 *
	 * @type {string}
	 * @memberof ProductDto
	 */
	'currency': string;
	/**
	 *
	 * @type {number}
	 * @memberof ProductDto
	 */
	'minPrice': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductDto
	 */
	'productTypeId': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductDto
	 */
	'categoryId': number;
	/**
	 *
	 * @type {Array<ProductAttributeDto>}
	 * @memberof ProductDto
	 */
	'attributes': Array<ProductAttributeDto>;
	/**
	 *
	 * @type {number}
	 * @memberof ProductDto
	 */
	'defaultVariantId': number;
}
/**
 *
 * @export
 * @interface ProductFilterResultDto
 */
export interface ProductFilterResultDto {
	/**
	 *
	 * @type {Array<AttributeDrillDownDto>}
	 * @memberof ProductFilterResultDto
	 */
	'attributeDrillDown': Array<AttributeDrillDownDto>;
	/**
	 *
	 * @type {number}
	 * @memberof ProductFilterResultDto
	 */
	'minPrice': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductFilterResultDto
	 */
	'maxPrice': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductFilterResultDto
	 */
	'selectedMinPrice': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductFilterResultDto
	 */
	'selectedMaxPrice': number;
	/**
	 *
	 * @type {Array<ProductDto>}
	 * @memberof ProductFilterResultDto
	 */
	'items': Array<ProductDto>;
	/**
	 *
	 * @type {number}
	 * @memberof ProductFilterResultDto
	 */
	'pageNumber': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductFilterResultDto
	 */
	'pageSize': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductFilterResultDto
	 */
	'totalCount': number;
}
/**
 *
 * @export
 * @interface ProductQueryFilterDto
 */
export interface ProductQueryFilterDto {
	/**
	 *
	 * @type {string}
	 * @memberof ProductQueryFilterDto
	 */
	'attributeSlug': string;
	/**
	 *
	 * @type {Array<string>}
	 * @memberof ProductQueryFilterDto
	 */
	'values': Array<string>;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum ProductSorting {
	NAME_ASC = 'NAME_ASC',
	NAME_DESC = 'NAME_DESC',
	PRICE_ASC = 'PRICE_ASC',
	PRICE_DESC = 'PRICE_DESC',
	DATE_CREATED_ASC = 'DATE_CREATED_ASC',
	DATE_CREATED_DESC = 'DATE_CREATED_DESC',
	RATING_ASC = 'RATING_ASC',
	RATING_DESC = 'RATING_DESC'
}


/**
 *
 * @export
 * @interface ProductTypeAttributeDto
 */
export interface ProductTypeAttributeDto {
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeAttributeDto
	 */
	'id': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeAttributeDto
	 */
	'sortOrder': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeAttributeDto
	 */
	'attributeId': number;
}
/**
 *
 * @export
 * @interface ProductTypeDto
 */
export interface ProductTypeDto {
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof ProductTypeDto
	 */
	'name': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductTypeDto
	 */
	'hasVariants': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductTypeDto
	 */
	'isShippingRequired': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeDto
	 */
	'weight': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductTypeDto
	 */
	'isDigital': boolean;
	/**
	 *
	 * @type {object}
	 * @memberof ProductTypeDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof ProductTypeDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof ProductTypeDto
	 */
	'slug': string;
	/**
	 *
	 * @type {Array<ProductTypeAttributeDto>}
	 * @memberof ProductTypeDto
	 */
	'attributes': Array<ProductTypeAttributeDto>;
	/**
	 *
	 * @type {Array<ProductTypeVariantAttributeDto>}
	 * @memberof ProductTypeDto
	 */
	'variantAttributes': Array<ProductTypeVariantAttributeDto>;
}
/**
 *
 * @export
 * @interface ProductTypeVariantAttributeDto
 */
export interface ProductTypeVariantAttributeDto {
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeVariantAttributeDto
	 */
	'id': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeVariantAttributeDto
	 */
	'sortOrder': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductTypeVariantAttributeDto
	 */
	'variantSelection': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeVariantAttributeDto
	 */
	'attributeId': number;
}
/**
 *
 * @export
 * @interface ProductVariantDto
 */
export interface ProductVariantDto {
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof ProductVariantDto
	 */
	'sku': string;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof ProductVariantDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantDto
	 */
	'weight'?: number;
	/**
	 *
	 * @type {object}
	 * @memberof ProductVariantDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof ProductVariantDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantDto
	 */
	'sortOrder'?: number;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductVariantDto
	 */
	'isPreorder'?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof ProductVariantDto
	 */
	'preorderEndDate'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantDto
	 */
	'preorderGlobalThreshold'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantDto
	 */
	'quantityLimitPerCustomer'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof ProductVariantDto
	 */
	'created': string;
	/**
	 *
	 * @type {string}
	 * @memberof ProductVariantDto
	 */
	'updatedAt': string;
	/**
	 *
	 * @type {string}
	 * @memberof ProductVariantDto
	 */
	'currency': string;
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantDto
	 */
	'priceAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantDto
	 */
	'costPriceAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantDto
	 */
	'stock': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductVariantDto
	 */
	'trackInventory': boolean;
	/**
	 *
	 * @type {Array<ProductAttributeDto>}
	 * @memberof ProductVariantDto
	 */
	'attributes': Array<ProductAttributeDto>;
	/**
	 *
	 * @type {ProductDto}
	 * @memberof ProductVariantDto
	 */
	'product': ProductDto;
}
/**
 *
 * @export
 * @interface RegisterUserDto
 */
export interface RegisterUserDto {
	/**
	 *
	 * @type {string}
	 * @memberof RegisterUserDto
	 */
	'email': string;
	/**
	 *
	 * @type {string}
	 * @memberof RegisterUserDto
	 */
	'firstName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof RegisterUserDto
	 */
	'lastName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof RegisterUserDto
	 */
	'password': string;
}
/**
 *
 * @export
 * @interface SettingsDto
 */
export interface SettingsDto {
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'siteName': string;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof SettingsDto
	 */
	'adminLanguage': LanguageCode;
	/**
	 *
	 * @type {Array<LanguageCode>}
	 * @memberof SettingsDto
	 */
	'availableLanguages': Array<LanguageCode>;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'baseUrl': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof SettingsDto
	 */
	'canRegister': boolean;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof SettingsDto
	 */
	'defaultLanguage': LanguageCode;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'senderEmail': string;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'senderName': string;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'seoTitle': string;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'seoDescription': string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof SettingsDto
	 */
	'shopAddress'?: AddressDto;
	/**
	 *
	 * @type {MediaDto}
	 * @memberof SettingsDto
	 */
	'siteLogo'?: MediaDto;
}
/**
 *
 * @export
 * @interface SuccessLoginResponse
 */
export interface SuccessLoginResponse {
	/**
	 *
	 * @type {string}
	 * @memberof SuccessLoginResponse
	 */
	'access_token': string;
}
/**
 *
 * @export
 * @interface TranslatableDto
 */
export interface TranslatableDto {
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'de'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'it'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'fr'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'es'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'el'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'en'?: string;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum Unit {
	CM = 'CM',
	M = 'M',
	KM = 'KM',
	FT = 'FT',
	YD = 'YD',
	INCH = 'INCH',
	SQ_CM = 'SQ_CM',
	SQ_M = 'SQ_M',
	SQ_KM = 'SQ_KM',
	SQ_FT = 'SQ_FT',
	SQ_YD = 'SQ_YD',
	SQ_INCH = 'SQ_INCH',
	CUBIC_MILLIMETER = 'CUBIC_MILLIMETER',
	CUBIC_CENTIMETER = 'CUBIC_CENTIMETER',
	CUBIC_DECIMETER = 'CUBIC_DECIMETER',
	CUBIC_METER = 'CUBIC_METER',
	LITER = 'LITER',
	CUBIC_FOOT = 'CUBIC_FOOT',
	CUBIC_INCH = 'CUBIC_INCH',
	CUBIC_YARD = 'CUBIC_YARD',
	QT = 'QT',
	PINT = 'PINT',
	FL_OZ = 'FL_OZ',
	ACRE_IN = 'ACRE_IN',
	ACRE_FT = 'ACRE_FT',
	G = 'G',
	LB = 'LB',
	OZ = 'OZ',
	KG = 'KG',
	TONNE = 'TONNE'
}


/**
 *
 * @export
 * @interface UpdateAttributeDto
 */
export interface UpdateAttributeDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateAttributeDto
	 */
	'name'?: TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateAttributeDto
	 */
	'slug'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateAttributeDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateAttributeDto
	 */
	'privateMetadata'?: object;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateAttributeDto
	 */
	'availableInGrid'?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateAttributeDto
	 */
	'visibleInStorefront'?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateAttributeDto
	 */
	'filterableInDashboard'?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateAttributeDto
	 */
	'filterableInStorefront'?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateAttributeDto
	 */
	'valueRequired'?: boolean;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateAttributeDto
	 */
	'storefrontSearchPosition'?: number;
	/**
	 *
	 * @type {InputType}
	 * @memberof UpdateAttributeDto
	 */
	'inputType'?: InputType;
	/**
	 *
	 * @type {Unit}
	 * @memberof UpdateAttributeDto
	 */
	'unit'?: Unit;
}
/**
 *
 * @export
 * @interface UpdateAttributeValueDto
 */
export interface UpdateAttributeValueDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateAttributeValueDto
	 */
	'name'?: TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateAttributeValueDto
	 */
	'slug'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateAttributeValueDto
	 */
	'sortOrder'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateAttributeValueDto
	 */
	'value'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateAttributeValueDto
	 */
	'fileUrl'?: string;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateAttributeValueDto
	 */
	'richText'?: TranslatableDto;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateAttributeValueDto
	 */
	'boolean'?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateAttributeValueDto
	 */
	'dateTime'?: string;
}
/**
 *
 * @export
 * @interface UpdateCategoryDto
 */
export interface UpdateCategoryDto {
	/**
	 *
	 * @type {object}
	 * @memberof UpdateCategoryDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateCategoryDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCategoryDto
	 */
	'seoTitle': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCategoryDto
	 */
	'seoDescription': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCategoryDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCategoryDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCategoryDto
	 */
	'slug': string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateCategoryDto
	 */
	'parentId': number;
}
/**
 *
 * @export
 * @interface UpdateCheckoutDto
 */
export interface UpdateCheckoutDto {
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'email'?: string;
	/**
	 *
	 * @type {UserDto}
	 * @memberof UpdateCheckoutDto
	 */
	'user'?: UserDto;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UpdateCheckoutDto
	 */
	'billingAddress'?: AddressDto;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateCheckoutDto
	 */
	'discountAmount'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'discountName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'note'?: string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UpdateCheckoutDto
	 */
	'shippingAddress'?: AddressDto;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateCheckoutDto
	 */
	'shipping_method_id'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'voucherCode'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'translatedDiscountName'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateCheckoutDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateCheckoutDto
	 */
	'privateMetadata'?: object;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'currency'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'country'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'redirectUrl'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'trackingCode'?: string;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof UpdateCheckoutDto
	 */
	'languageCode'?: LanguageCode;
}
/**
 *
 * @export
 * @interface UpdateDiscountDto
 */
export interface UpdateDiscountDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateDiscountDto
	 */
	'name'?: TranslatableDto;
	/**
	 *
	 * @type {DiscountType}
	 * @memberof UpdateDiscountDto
	 */
	'discountType'?: DiscountType;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateDiscountDto
	 */
	'endDate'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateDiscountDto
	 */
	'startDate'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateDiscountDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateDiscountDto
	 */
	'privateMetadata'?: object;
}
/**
 *
 * @export
 * @interface UpdateOrderDto
 */
export interface UpdateOrderDto {
	/**
	 * shipping tracking id
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'trackingClientId'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'userEmail'?: string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UpdateOrderDto
	 */
	'billingAddress'?: AddressDto;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UpdateOrderDto
	 */
	'shippingAddress'?: AddressDto;
	/**
	 *
	 * @type {UserDto}
	 * @memberof UpdateOrderDto
	 */
	'user'?: UserDto;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'totalNetAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'voucher_id'?: number;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof UpdateOrderDto
	 */
	'languageCode'?: LanguageCode;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'shippingPriceGrossAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'totalGrossAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'shippingPriceNetAmount'?: number;
	/**
	 *
	 * @type {OrderStatus}
	 * @memberof UpdateOrderDto
	 */
	'status'?: OrderStatus;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'shippingMethodName'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'shippingMethodId'?: number;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateOrderDto
	 */
	'displayGrossPrices'?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'customerNote'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'weight'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'checkoutToken'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'currency'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateOrderDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateOrderDto
	 */
	'privateMetadata'?: object;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'redirectUrl'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'shippingTaxRate'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'undiscountedTotalGrossAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'undiscountedTotalNetAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'totalPaidAmount'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'origin'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateOrderDto
	 */
	'original'?: object;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'searchDocument'?: string;
}
/**
 *
 * @export
 * @interface UserDto
 */
export interface UserDto {
	/**
	 *
	 * @type {number}
	 * @memberof UserDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'email': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof UserDto
	 */
	'isAdmin': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UserDto
	 */
	'isStaff': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UserDto
	 */
	'isActive': boolean;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'createdAt': string;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'updatedAt': string;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'lastLogin'?: string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UserDto
	 */
	'defaultBillingAddress'?: AddressDto;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UserDto
	 */
	'defaultShippingAddress'?: AddressDto;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'notes'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'firstName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'lastName'?: string;
	/**
	 *
	 * @type {MediaDto}
	 * @memberof UserDto
	 */
	'avatar'?: MediaDto;
	/**
	 *
	 * @type {object}
	 * @memberof UserDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof UserDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof UserDto
	 */
	'languageCode': LanguageCode;
	/**
	 *
	 * @type {Array<AddressDto>}
	 * @memberof UserDto
	 */
	'addresses': Array<AddressDto>;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'password': string;
}

/**
 * AttributeValuesApi - axios parameter creator
 * @export
 */
export const AttributeValuesApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesDeleteValueByID: async (attributeId: number, valueId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributeValuesDeleteValueByID', 'attributeId', attributeId)
			// verify required parameter 'valueId' is not null or undefined
			assertParamExists('attributeValuesDeleteValueByID', 'valueId', valueId)
			const localVarPath = `/api/v1/attributes/{attributeId}/values/{valueId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)))
				.replace(`{${ "valueId" }}`, encodeURIComponent(String(valueId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesGetValueById: async (attributeId: number, valueId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributeValuesGetValueById', 'attributeId', attributeId)
			// verify required parameter 'valueId' is not null or undefined
			assertParamExists('attributeValuesGetValueById', 'valueId', valueId)
			const localVarPath = `/api/v1/attributes/{attributeId}/values/{valueId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)))
				.replace(`{${ "valueId" }}`, encodeURIComponent(String(valueId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesGetValuesOfAttributeById: async (attributeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributeValuesGetValuesOfAttributeById', 'attributeId', attributeId)
			const localVarPath = `/api/v1/attributes/{attributeId}/values`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {UpdateAttributeValueDto} updateAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesPatchValue: async (attributeId: number, valueId: number, updateAttributeValueDto: UpdateAttributeValueDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributeValuesPatchValue', 'attributeId', attributeId)
			// verify required parameter 'valueId' is not null or undefined
			assertParamExists('attributeValuesPatchValue', 'valueId', valueId)
			// verify required parameter 'updateAttributeValueDto' is not null or undefined
			assertParamExists('attributeValuesPatchValue', 'updateAttributeValueDto', updateAttributeValueDto)
			const localVarPath = `/api/v1/attributes/{attributeId}/values/{valueId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)))
				.replace(`{${ "valueId" }}`, encodeURIComponent(String(valueId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateAttributeValueDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {CreateAttributeValueDto} createAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesSave: async (attributeId: number, createAttributeValueDto: CreateAttributeValueDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributeValuesSave', 'attributeId', attributeId)
			// verify required parameter 'createAttributeValueDto' is not null or undefined
			assertParamExists('attributeValuesSave', 'createAttributeValueDto', createAttributeValueDto)
			const localVarPath = `/api/v1/attributes/{attributeId}/values`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createAttributeValueDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {CreateAttributeValueDto} createAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesUpdateValue: async (attributeId: number, valueId: number, createAttributeValueDto: CreateAttributeValueDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributeValuesUpdateValue', 'attributeId', attributeId)
			// verify required parameter 'valueId' is not null or undefined
			assertParamExists('attributeValuesUpdateValue', 'valueId', valueId)
			// verify required parameter 'createAttributeValueDto' is not null or undefined
			assertParamExists('attributeValuesUpdateValue', 'createAttributeValueDto', createAttributeValueDto)
			const localVarPath = `/api/v1/attributes/{attributeId}/values/{valueId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)))
				.replace(`{${ "valueId" }}`, encodeURIComponent(String(valueId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createAttributeValueDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * AttributeValuesApi - functional programming interface
 * @export
 */
export const AttributeValuesApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = AttributeValuesApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributeValuesDeleteValueByID(attributeId: number, valueId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeValueDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributeValuesDeleteValueByID(attributeId, valueId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributeValuesGetValueById(attributeId: number, valueId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeValueDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributeValuesGetValueById(attributeId, valueId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributeValuesGetValuesOfAttributeById(attributeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AttributeValueDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributeValuesGetValuesOfAttributeById(attributeId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {UpdateAttributeValueDto} updateAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributeValuesPatchValue(attributeId: number, valueId: number, updateAttributeValueDto: UpdateAttributeValueDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeValueDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributeValuesPatchValue(attributeId, valueId, updateAttributeValueDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {CreateAttributeValueDto} createAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributeValuesSave(attributeId: number, createAttributeValueDto: CreateAttributeValueDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeValueDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributeValuesSave(attributeId, createAttributeValueDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {CreateAttributeValueDto} createAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributeValuesUpdateValue(attributeId: number, valueId: number, createAttributeValueDto: CreateAttributeValueDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeValueDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributeValuesUpdateValue(attributeId, valueId, createAttributeValueDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * AttributeValuesApi - factory interface
 * @export
 */
export const AttributeValuesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = AttributeValuesApiFp(configuration);
	return {
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesDeleteValueByID(attributeId: number, valueId: number, options?: any): AxiosPromise<AttributeValueDto> {
			return localVarFp.attributeValuesDeleteValueByID(attributeId, valueId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesGetValueById(attributeId: number, valueId: number, options?: any): AxiosPromise<AttributeValueDto> {
			return localVarFp.attributeValuesGetValueById(attributeId, valueId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesGetValuesOfAttributeById(attributeId: number, options?: any): AxiosPromise<Array<AttributeValueDto>> {
			return localVarFp.attributeValuesGetValuesOfAttributeById(attributeId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {UpdateAttributeValueDto} updateAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesPatchValue(attributeId: number, valueId: number, updateAttributeValueDto: UpdateAttributeValueDto, options?: any): AxiosPromise<AttributeValueDto> {
			return localVarFp.attributeValuesPatchValue(attributeId, valueId, updateAttributeValueDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {CreateAttributeValueDto} createAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesSave(attributeId: number, createAttributeValueDto: CreateAttributeValueDto, options?: any): AxiosPromise<AttributeValueDto> {
			return localVarFp.attributeValuesSave(attributeId, createAttributeValueDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {CreateAttributeValueDto} createAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesUpdateValue(attributeId: number, valueId: number, createAttributeValueDto: CreateAttributeValueDto, options?: any): AxiosPromise<AttributeValueDto> {
			return localVarFp.attributeValuesUpdateValue(attributeId, valueId, createAttributeValueDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for attributeValuesDeleteValueByID operation in AttributeValuesApi.
 * @export
 * @interface AttributeValuesApiAttributeValuesDeleteValueByIDRequest
 */
export interface AttributeValuesApiAttributeValuesDeleteValueByIDRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesDeleteValueByID
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesDeleteValueByID
	 */
	readonly valueId: number;
}

/**
 * Request parameters for attributeValuesGetValueById operation in AttributeValuesApi.
 * @export
 * @interface AttributeValuesApiAttributeValuesGetValueByIdRequest
 */
export interface AttributeValuesApiAttributeValuesGetValueByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesGetValueById
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesGetValueById
	 */
	readonly valueId: number;
}

/**
 * Request parameters for attributeValuesGetValuesOfAttributeById operation in AttributeValuesApi.
 * @export
 * @interface AttributeValuesApiAttributeValuesGetValuesOfAttributeByIdRequest
 */
export interface AttributeValuesApiAttributeValuesGetValuesOfAttributeByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesGetValuesOfAttributeById
	 */
	readonly attributeId: number;
}

/**
 * Request parameters for attributeValuesPatchValue operation in AttributeValuesApi.
 * @export
 * @interface AttributeValuesApiAttributeValuesPatchValueRequest
 */
export interface AttributeValuesApiAttributeValuesPatchValueRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesPatchValue
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesPatchValue
	 */
	readonly valueId: number;

	/**
	 *
	 * @type {UpdateAttributeValueDto}
	 * @memberof AttributeValuesApiAttributeValuesPatchValue
	 */
	readonly updateAttributeValueDto: UpdateAttributeValueDto;
}

/**
 * Request parameters for attributeValuesSave operation in AttributeValuesApi.
 * @export
 * @interface AttributeValuesApiAttributeValuesSaveRequest
 */
export interface AttributeValuesApiAttributeValuesSaveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesSave
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {CreateAttributeValueDto}
	 * @memberof AttributeValuesApiAttributeValuesSave
	 */
	readonly createAttributeValueDto: CreateAttributeValueDto;
}

/**
 * Request parameters for attributeValuesUpdateValue operation in AttributeValuesApi.
 * @export
 * @interface AttributeValuesApiAttributeValuesUpdateValueRequest
 */
export interface AttributeValuesApiAttributeValuesUpdateValueRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesUpdateValue
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesUpdateValue
	 */
	readonly valueId: number;

	/**
	 *
	 * @type {CreateAttributeValueDto}
	 * @memberof AttributeValuesApiAttributeValuesUpdateValue
	 */
	readonly createAttributeValueDto: CreateAttributeValueDto;
}

/**
 * AttributeValuesApi - object-oriented interface
 * @export
 * @class AttributeValuesApi
 * @extends {BaseAPI}
 */
export class AttributeValuesApi extends BaseAPI {
	/**
	 *
	 * @param {AttributeValuesApiAttributeValuesDeleteValueByIDRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributeValuesApi
	 */
	public attributeValuesDeleteValueByID(requestParameters: AttributeValuesApiAttributeValuesDeleteValueByIDRequest, options?: AxiosRequestConfig) {
		return AttributeValuesApiFp(this.configuration).attributeValuesDeleteValueByID(requestParameters.attributeId, requestParameters.valueId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributeValuesApiAttributeValuesGetValueByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributeValuesApi
	 */
	public attributeValuesGetValueById(requestParameters: AttributeValuesApiAttributeValuesGetValueByIdRequest, options?: AxiosRequestConfig) {
		return AttributeValuesApiFp(this.configuration).attributeValuesGetValueById(requestParameters.attributeId, requestParameters.valueId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributeValuesApiAttributeValuesGetValuesOfAttributeByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributeValuesApi
	 */
	public attributeValuesGetValuesOfAttributeById(requestParameters: AttributeValuesApiAttributeValuesGetValuesOfAttributeByIdRequest, options?: AxiosRequestConfig) {
		return AttributeValuesApiFp(this.configuration).attributeValuesGetValuesOfAttributeById(requestParameters.attributeId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributeValuesApiAttributeValuesPatchValueRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributeValuesApi
	 */
	public attributeValuesPatchValue(requestParameters: AttributeValuesApiAttributeValuesPatchValueRequest, options?: AxiosRequestConfig) {
		return AttributeValuesApiFp(this.configuration).attributeValuesPatchValue(requestParameters.attributeId, requestParameters.valueId, requestParameters.updateAttributeValueDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributeValuesApiAttributeValuesSaveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributeValuesApi
	 */
	public attributeValuesSave(requestParameters: AttributeValuesApiAttributeValuesSaveRequest, options?: AxiosRequestConfig) {
		return AttributeValuesApiFp(this.configuration).attributeValuesSave(requestParameters.attributeId, requestParameters.createAttributeValueDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributeValuesApiAttributeValuesUpdateValueRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributeValuesApi
	 */
	public attributeValuesUpdateValue(requestParameters: AttributeValuesApiAttributeValuesUpdateValueRequest, options?: AxiosRequestConfig) {
		return AttributeValuesApiFp(this.configuration).attributeValuesUpdateValue(requestParameters.attributeId, requestParameters.valueId, requestParameters.createAttributeValueDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * AttributesApi - axios parameter creator
 * @export
 */
export const AttributesApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateAttributeDto} createAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesCreate: async (createAttributeDto: CreateAttributeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createAttributeDto' is not null or undefined
			assertParamExists('attributesCreate', 'createAttributeDto', createAttributeDto)
			const localVarPath = `/api/v1/attributes`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createAttributeDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/attributes`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesGetById: async (attributeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributesGetById', 'attributeId', attributeId)
			const localVarPath = `/api/v1/attributes/{attributeId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {UpdateAttributeDto} updateAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesPatch: async (attributeId: number, updateAttributeDto: UpdateAttributeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributesPatch', 'attributeId', attributeId)
			// verify required parameter 'updateAttributeDto' is not null or undefined
			assertParamExists('attributesPatch', 'updateAttributeDto', updateAttributeDto)
			const localVarPath = `/api/v1/attributes/{attributeId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateAttributeDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {UpdateAttributeDto} updateAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesRemove: async (attributeId: number, updateAttributeDto: UpdateAttributeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributesRemove', 'attributeId', attributeId)
			// verify required parameter 'updateAttributeDto' is not null or undefined
			assertParamExists('attributesRemove', 'updateAttributeDto', updateAttributeDto)
			const localVarPath = `/api/v1/attributes/{attributeId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateAttributeDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {CreateAttributeDto} createAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesUpdate: async (attributeId: number, createAttributeDto: CreateAttributeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributesUpdate', 'attributeId', attributeId)
			// verify required parameter 'createAttributeDto' is not null or undefined
			assertParamExists('attributesUpdate', 'createAttributeDto', createAttributeDto)
			const localVarPath = `/api/v1/attributes/{attributeId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createAttributeDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * AttributesApi - functional programming interface
 * @export
 */
export const AttributesApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = AttributesApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateAttributeDto} createAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributesCreate(createAttributeDto: CreateAttributeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributesCreate(createAttributeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributesFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AttributeDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributesFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributesGetById(attributeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributesGetById(attributeId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {UpdateAttributeDto} updateAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributesPatch(attributeId: number, updateAttributeDto: UpdateAttributeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributesPatch(attributeId, updateAttributeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {UpdateAttributeDto} updateAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributesRemove(attributeId: number, updateAttributeDto: UpdateAttributeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributesRemove(attributeId, updateAttributeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {CreateAttributeDto} createAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributesUpdate(attributeId: number, createAttributeDto: CreateAttributeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributesUpdate(attributeId, createAttributeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * AttributesApi - factory interface
 * @export
 */
export const AttributesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = AttributesApiFp(configuration);
	return {
		/**
		 *
		 * @param {CreateAttributeDto} createAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesCreate(createAttributeDto: CreateAttributeDto, options?: any): AxiosPromise<AttributeDto> {
			return localVarFp.attributesCreate(createAttributeDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesFindAll(options?: any): AxiosPromise<Array<AttributeDto>> {
			return localVarFp.attributesFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesGetById(attributeId: number, options?: any): AxiosPromise<AttributeDto> {
			return localVarFp.attributesGetById(attributeId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {UpdateAttributeDto} updateAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesPatch(attributeId: number, updateAttributeDto: UpdateAttributeDto, options?: any): AxiosPromise<AttributeDto> {
			return localVarFp.attributesPatch(attributeId, updateAttributeDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {UpdateAttributeDto} updateAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesRemove(attributeId: number, updateAttributeDto: UpdateAttributeDto, options?: any): AxiosPromise<AttributeDto> {
			return localVarFp.attributesRemove(attributeId, updateAttributeDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {CreateAttributeDto} createAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesUpdate(attributeId: number, createAttributeDto: CreateAttributeDto, options?: any): AxiosPromise<AttributeDto> {
			return localVarFp.attributesUpdate(attributeId, createAttributeDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for attributesCreate operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesCreateRequest
 */
export interface AttributesApiAttributesCreateRequest {
	/**
	 *
	 * @type {CreateAttributeDto}
	 * @memberof AttributesApiAttributesCreate
	 */
	readonly createAttributeDto: CreateAttributeDto;
}

/**
 * Request parameters for attributesGetById operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesGetByIdRequest
 */
export interface AttributesApiAttributesGetByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributesApiAttributesGetById
	 */
	readonly attributeId: number;
}

/**
 * Request parameters for attributesPatch operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesPatchRequest
 */
export interface AttributesApiAttributesPatchRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributesApiAttributesPatch
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {UpdateAttributeDto}
	 * @memberof AttributesApiAttributesPatch
	 */
	readonly updateAttributeDto: UpdateAttributeDto;
}

/**
 * Request parameters for attributesRemove operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesRemoveRequest
 */
export interface AttributesApiAttributesRemoveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributesApiAttributesRemove
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {UpdateAttributeDto}
	 * @memberof AttributesApiAttributesRemove
	 */
	readonly updateAttributeDto: UpdateAttributeDto;
}

/**
 * Request parameters for attributesUpdate operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesUpdateRequest
 */
export interface AttributesApiAttributesUpdateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributesApiAttributesUpdate
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {CreateAttributeDto}
	 * @memberof AttributesApiAttributesUpdate
	 */
	readonly createAttributeDto: CreateAttributeDto;
}

/**
 * AttributesApi - object-oriented interface
 * @export
 * @class AttributesApi
 * @extends {BaseAPI}
 */
export class AttributesApi extends BaseAPI {
	/**
	 *
	 * @param {AttributesApiAttributesCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributesApi
	 */
	public attributesCreate(requestParameters: AttributesApiAttributesCreateRequest, options?: AxiosRequestConfig) {
		return AttributesApiFp(this.configuration).attributesCreate(requestParameters.createAttributeDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributesApi
	 */
	public attributesFindAll(options?: AxiosRequestConfig) {
		return AttributesApiFp(this.configuration).attributesFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributesApiAttributesGetByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributesApi
	 */
	public attributesGetById(requestParameters: AttributesApiAttributesGetByIdRequest, options?: AxiosRequestConfig) {
		return AttributesApiFp(this.configuration).attributesGetById(requestParameters.attributeId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributesApiAttributesPatchRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributesApi
	 */
	public attributesPatch(requestParameters: AttributesApiAttributesPatchRequest, options?: AxiosRequestConfig) {
		return AttributesApiFp(this.configuration).attributesPatch(requestParameters.attributeId, requestParameters.updateAttributeDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributesApiAttributesRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributesApi
	 */
	public attributesRemove(requestParameters: AttributesApiAttributesRemoveRequest, options?: AxiosRequestConfig) {
		return AttributesApiFp(this.configuration).attributesRemove(requestParameters.attributeId, requestParameters.updateAttributeDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributesApiAttributesUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributesApi
	 */
	public attributesUpdate(requestParameters: AttributesApiAttributesUpdateRequest, options?: AxiosRequestConfig) {
		return AttributesApiFp(this.configuration).attributesUpdate(requestParameters.attributeId, requestParameters.createAttributeDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authGetHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/auth/profile`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {LoginUserDto} loginUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authLogin: async (loginUserDto: LoginUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'loginUserDto' is not null or undefined
			assertParamExists('authLogin', 'loginUserDto', loginUserDto)
			const localVarPath = `/api/v1/auth/login`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(loginUserDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {RegisterUserDto} registerUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authRegister: async (registerUserDto: RegisterUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'registerUserDto' is not null or undefined
			assertParamExists('authRegister', 'registerUserDto', registerUserDto)
			const localVarPath = `/api/v1/auth/register`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(registerUserDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authGetHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.authGetHello(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {LoginUserDto} loginUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authLogin(loginUserDto: LoginUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessLoginResponse>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.authLogin(loginUserDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {RegisterUserDto} registerUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authRegister(registerUserDto: RegisterUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.authRegister(registerUserDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = AuthenticationApiFp(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authGetHello(options?: any): AxiosPromise<void> {
			return localVarFp.authGetHello(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {LoginUserDto} loginUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authLogin(loginUserDto: LoginUserDto, options?: any): AxiosPromise<SuccessLoginResponse> {
			return localVarFp.authLogin(loginUserDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {RegisterUserDto} registerUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authRegister(registerUserDto: RegisterUserDto, options?: any): AxiosPromise<void> {
			return localVarFp.authRegister(registerUserDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for authLogin operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthLoginRequest
 */
export interface AuthenticationApiAuthLoginRequest {
	/**
	 *
	 * @type {LoginUserDto}
	 * @memberof AuthenticationApiAuthLogin
	 */
	readonly loginUserDto: LoginUserDto;
}

/**
 * Request parameters for authRegister operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthRegisterRequest
 */
export interface AuthenticationApiAuthRegisterRequest {
	/**
	 *
	 * @type {RegisterUserDto}
	 * @memberof AuthenticationApiAuthRegister
	 */
	readonly registerUserDto: RegisterUserDto;
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public authGetHello(options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration).authGetHello(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AuthenticationApiAuthLoginRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public authLogin(requestParameters: AuthenticationApiAuthLoginRequest, options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration).authLogin(requestParameters.loginUserDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AuthenticationApiAuthRegisterRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public authRegister(requestParameters: AuthenticationApiAuthRegisterRequest, options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration).authRegister(requestParameters.registerUserDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateCategoryDto} createCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesCreate: async (createCategoryDto: CreateCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createCategoryDto' is not null or undefined
			assertParamExists('categoriesCreate', 'createCategoryDto', createCategoryDto)
			const localVarPath = `/api/v1/categories`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createCategoryDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} [depth] The depth of children to retrieve. Set 0 for only the root categories, leave empty
		 *     for the full tree
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindAll: async (depth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/categories`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if ( depth !== undefined ) {
				localVarQueryParameter['depth'] = depth;
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Gets a category. Use depth query to control the level of children to retrieve
		 * @summary Get a category by id
		 * @param {number} id The id of the category to get
		 * @param {number} [depth] The depth of children to retrieve. Set 0 for only the requested category, leave
		 *     empty for the full tree
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindOne: async (id: number, depth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('categoriesFindOne', 'id', id)
			const localVarPath = `/api/v1/categories/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if ( depth !== undefined ) {
				localVarQueryParameter['depth'] = depth;
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {boolean} [forceDelete] Deletes the children subcategories. Default to false.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesRemove: async (id: number, forceDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('categoriesRemove', 'id', id)
			const localVarPath = `/api/v1/categories/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if ( forceDelete !== undefined ) {
				localVarQueryParameter['forceDelete'] = forceDelete;
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateCategoryDto} updateCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesUpdate: async (id: number, updateCategoryDto: UpdateCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('categoriesUpdate', 'id', id)
			// verify required parameter 'updateCategoryDto' is not null or undefined
			assertParamExists('categoriesUpdate', 'updateCategoryDto', updateCategoryDto)
			const localVarPath = `/api/v1/categories/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateCategoryDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateCategoryDto} createCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesCreate(createCategoryDto: CreateCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesCreate(createCategoryDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} [depth] The depth of children to retrieve. Set 0 for only the root categories, leave empty
		 *     for the full tree
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesFindAll(depth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesFindAll(depth, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Gets a category. Use depth query to control the level of children to retrieve
		 * @summary Get a category by id
		 * @param {number} id The id of the category to get
		 * @param {number} [depth] The depth of children to retrieve. Set 0 for only the requested category, leave
		 *     empty for the full tree
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesFindOne(id: number, depth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesFindOne(id, depth, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {boolean} [forceDelete] Deletes the children subcategories. Default to false.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesRemove(id: number, forceDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesRemove(id, forceDelete, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateCategoryDto} updateCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesUpdate(id: number, updateCategoryDto: UpdateCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesUpdate(id, updateCategoryDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = CategoriesApiFp(configuration);
	return {
		/**
		 *
		 * @param {CreateCategoryDto} createCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesCreate(createCategoryDto: CreateCategoryDto, options?: any): AxiosPromise<CategoryDto> {
			return localVarFp.categoriesCreate(createCategoryDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} [depth] The depth of children to retrieve. Set 0 for only the root categories, leave empty
		 *     for the full tree
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindAll(depth?: number, options?: any): AxiosPromise<Array<CategoryDto>> {
			return localVarFp.categoriesFindAll(depth, options).then((request) => request(axios, basePath));
		},
		/**
		 * Gets a category. Use depth query to control the level of children to retrieve
		 * @summary Get a category by id
		 * @param {number} id The id of the category to get
		 * @param {number} [depth] The depth of children to retrieve. Set 0 for only the requested category, leave
		 *     empty for the full tree
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindOne(id: number, depth?: number, options?: any): AxiosPromise<CategoryDto> {
			return localVarFp.categoriesFindOne(id, depth, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {boolean} [forceDelete] Deletes the children subcategories. Default to false.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesRemove(id: number, forceDelete?: boolean, options?: any): AxiosPromise<void> {
			return localVarFp.categoriesRemove(id, forceDelete, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateCategoryDto} updateCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesUpdate(id: number, updateCategoryDto: UpdateCategoryDto, options?: any): AxiosPromise<CategoryDto> {
			return localVarFp.categoriesUpdate(id, updateCategoryDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for categoriesCreate operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesCreateRequest
 */
export interface CategoriesApiCategoriesCreateRequest {
	/**
	 *
	 * @type {CreateCategoryDto}
	 * @memberof CategoriesApiCategoriesCreate
	 */
	readonly createCategoryDto: CreateCategoryDto;
}

/**
 * Request parameters for categoriesFindAll operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesFindAllRequest
 */
export interface CategoriesApiCategoriesFindAllRequest {
	/**
	 * The depth of children to retrieve. Set 0 for only the root categories, leave empty for the full tree
	 * @type {number}
	 * @memberof CategoriesApiCategoriesFindAll
	 */
	readonly depth?: number;
}

/**
 * Request parameters for categoriesFindOne operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesFindOneRequest
 */
export interface CategoriesApiCategoriesFindOneRequest {
	/**
	 * The id of the category to get
	 * @type {number}
	 * @memberof CategoriesApiCategoriesFindOne
	 */
	readonly id: number;

	/**
	 * The depth of children to retrieve. Set 0 for only the requested category, leave empty for the full tree
	 * @type {number}
	 * @memberof CategoriesApiCategoriesFindOne
	 */
	readonly depth?: number;
}

/**
 * Request parameters for categoriesRemove operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesRemoveRequest
 */
export interface CategoriesApiCategoriesRemoveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof CategoriesApiCategoriesRemove
	 */
	readonly id: number;

	/**
	 * Deletes the children subcategories. Default to false.
	 * @type {boolean}
	 * @memberof CategoriesApiCategoriesRemove
	 */
	readonly forceDelete?: boolean;
}

/**
 * Request parameters for categoriesUpdate operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesUpdateRequest
 */
export interface CategoriesApiCategoriesUpdateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof CategoriesApiCategoriesUpdate
	 */
	readonly id: number;

	/**
	 *
	 * @type {UpdateCategoryDto}
	 * @memberof CategoriesApiCategoriesUpdate
	 */
	readonly updateCategoryDto: UpdateCategoryDto;
}

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
	/**
	 *
	 * @param {CategoriesApiCategoriesCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesCreate(requestParameters: CategoriesApiCategoriesCreateRequest, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesCreate(requestParameters.createCategoryDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CategoriesApiCategoriesFindAllRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesFindAll(requestParameters: CategoriesApiCategoriesFindAllRequest = {}, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesFindAll(requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Gets a category. Use depth query to control the level of children to retrieve
	 * @summary Get a category by id
	 * @param {CategoriesApiCategoriesFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesFindOne(requestParameters: CategoriesApiCategoriesFindOneRequest, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesFindOne(requestParameters.id, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CategoriesApiCategoriesRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesRemove(requestParameters: CategoriesApiCategoriesRemoveRequest, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesRemove(requestParameters.id, requestParameters.forceDelete, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CategoriesApiCategoriesUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesUpdate(requestParameters: CategoriesApiCategoriesUpdateRequest, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesUpdate(requestParameters.id, requestParameters.updateCategoryDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * CheckoutApi - axios parameter creator
 * @export
 */
export const CheckoutApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateCheckoutDto} createCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutCreate: async (createCheckoutDto: CreateCheckoutDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createCheckoutDto' is not null or undefined
			assertParamExists('checkoutCreate', 'createCheckoutDto', createCheckoutDto)
			const localVarPath = `/api/v1/checkout`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createCheckoutDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/checkout`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('checkoutFindOne', 'id', id)
			const localVarPath = `/api/v1/checkout/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('checkoutRemove', 'id', id)
			const localVarPath = `/api/v1/checkout/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateCheckoutDto} updateCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutUpdate: async (id: string, updateCheckoutDto: UpdateCheckoutDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('checkoutUpdate', 'id', id)
			// verify required parameter 'updateCheckoutDto' is not null or undefined
			assertParamExists('checkoutUpdate', 'updateCheckoutDto', updateCheckoutDto)
			const localVarPath = `/api/v1/checkout/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateCheckoutDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * CheckoutApi - functional programming interface
 * @export
 */
export const CheckoutApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = CheckoutApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateCheckoutDto} createCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutCreate(createCheckoutDto: CreateCheckoutDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutCreate(createCheckoutDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutFindOne(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateCheckoutDto} updateCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutUpdate(id: string, updateCheckoutDto: UpdateCheckoutDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutUpdate(id, updateCheckoutDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * CheckoutApi - factory interface
 * @export
 */
export const CheckoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = CheckoutApiFp(configuration);
	return {
		/**
		 *
		 * @param {CreateCheckoutDto} createCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutCreate(createCheckoutDto: CreateCheckoutDto, options?: any): AxiosPromise<void> {
			return localVarFp.checkoutCreate(createCheckoutDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutFindAll(options?: any): AxiosPromise<void> {
			return localVarFp.checkoutFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutFindOne(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.checkoutFindOne(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutRemove(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.checkoutRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateCheckoutDto} updateCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutUpdate(id: string, updateCheckoutDto: UpdateCheckoutDto, options?: any): AxiosPromise<void> {
			return localVarFp.checkoutUpdate(id, updateCheckoutDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for checkoutCreate operation in CheckoutApi.
 * @export
 * @interface CheckoutApiCheckoutCreateRequest
 */
export interface CheckoutApiCheckoutCreateRequest {
	/**
	 *
	 * @type {CreateCheckoutDto}
	 * @memberof CheckoutApiCheckoutCreate
	 */
	readonly createCheckoutDto: CreateCheckoutDto;
}

/**
 * Request parameters for checkoutFindOne operation in CheckoutApi.
 * @export
 * @interface CheckoutApiCheckoutFindOneRequest
 */
export interface CheckoutApiCheckoutFindOneRequest {
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutApiCheckoutFindOne
	 */
	readonly id: string;
}

/**
 * Request parameters for checkoutRemove operation in CheckoutApi.
 * @export
 * @interface CheckoutApiCheckoutRemoveRequest
 */
export interface CheckoutApiCheckoutRemoveRequest {
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutApiCheckoutRemove
	 */
	readonly id: string;
}

/**
 * Request parameters for checkoutUpdate operation in CheckoutApi.
 * @export
 * @interface CheckoutApiCheckoutUpdateRequest
 */
export interface CheckoutApiCheckoutUpdateRequest {
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutApiCheckoutUpdate
	 */
	readonly id: string;

	/**
	 *
	 * @type {UpdateCheckoutDto}
	 * @memberof CheckoutApiCheckoutUpdate
	 */
	readonly updateCheckoutDto: UpdateCheckoutDto;
}

/**
 * CheckoutApi - object-oriented interface
 * @export
 * @class CheckoutApi
 * @extends {BaseAPI}
 */
export class CheckoutApi extends BaseAPI {
	/**
	 *
	 * @param {CheckoutApiCheckoutCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutCreate(requestParameters: CheckoutApiCheckoutCreateRequest, options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutCreate(requestParameters.createCheckoutDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutFindAll(options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CheckoutApiCheckoutFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutFindOne(requestParameters: CheckoutApiCheckoutFindOneRequest, options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CheckoutApiCheckoutRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutRemove(requestParameters: CheckoutApiCheckoutRemoveRequest, options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CheckoutApiCheckoutUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutUpdate(requestParameters: CheckoutApiCheckoutUpdateRequest, options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutUpdate(requestParameters.id, requestParameters.updateCheckoutDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * CoreApi - axios parameter creator
 * @export
 */
export const CoreApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		settingsGetSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/core/settings`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {SettingsDto} settingsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		settingsUpdateSettings: async (settingsDto: SettingsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'settingsDto' is not null or undefined
			assertParamExists('settingsUpdateSettings', 'settingsDto', settingsDto)
			const localVarPath = `/api/v1/core/settings`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(settingsDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * CoreApi - functional programming interface
 * @export
 */
export const CoreApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = CoreApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async settingsGetSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.settingsGetSettings(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {SettingsDto} settingsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async settingsUpdateSettings(settingsDto: SettingsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.settingsUpdateSettings(settingsDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * CoreApi - factory interface
 * @export
 */
export const CoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = CoreApiFp(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		settingsGetSettings(options?: any): AxiosPromise<SettingsDto> {
			return localVarFp.settingsGetSettings(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {SettingsDto} settingsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		settingsUpdateSettings(settingsDto: SettingsDto, options?: any): AxiosPromise<SettingsDto> {
			return localVarFp.settingsUpdateSettings(settingsDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for settingsUpdateSettings operation in CoreApi.
 * @export
 * @interface CoreApiSettingsUpdateSettingsRequest
 */
export interface CoreApiSettingsUpdateSettingsRequest {
	/**
	 *
	 * @type {SettingsDto}
	 * @memberof CoreApiSettingsUpdateSettings
	 */
	readonly settingsDto: SettingsDto;
}

/**
 * CoreApi - object-oriented interface
 * @export
 * @class CoreApi
 * @extends {BaseAPI}
 */
export class CoreApi extends BaseAPI {
	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CoreApi
	 */
	public settingsGetSettings(options?: AxiosRequestConfig) {
		return CoreApiFp(this.configuration).settingsGetSettings(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CoreApiSettingsUpdateSettingsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CoreApi
	 */
	public settingsUpdateSettings(requestParameters: CoreApiSettingsUpdateSettingsRequest, options?: AxiosRequestConfig) {
		return CoreApiFp(this.configuration).settingsUpdateSettings(requestParameters.settingsDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		appGetData: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/app`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async appGetData(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.appGetData(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = DefaultApiFp(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		appGetData(options?: any): AxiosPromise<void> {
			return localVarFp.appGetData(options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DefaultApi
	 */
	public appGetData(options?: AxiosRequestConfig) {
		return DefaultApiFp(this.configuration).appGetData(options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * DiscountApi - axios parameter creator
 * @export
 */
export const DiscountApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateDiscountSaleDto} createDiscountSaleDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesCreate: async (createDiscountSaleDto: CreateDiscountSaleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createDiscountSaleDto' is not null or undefined
			assertParamExists('discountSalesCreate', 'createDiscountSaleDto', createDiscountSaleDto)
			const localVarPath = `/api/v1/discounts`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createDiscountSaleDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/discounts`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesFindOne', 'id', id)
			const localVarPath = `/api/v1/discounts/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesRemove', 'id', id)
			const localVarPath = `/api/v1/discounts/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateDiscountDto} updateDiscountDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesUpdate: async (id: string, updateDiscountDto: UpdateDiscountDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesUpdate', 'id', id)
			// verify required parameter 'updateDiscountDto' is not null or undefined
			assertParamExists('discountSalesUpdate', 'updateDiscountDto', updateDiscountDto)
			const localVarPath = `/api/v1/discounts/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateDiscountDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * DiscountApi - functional programming interface
 * @export
 */
export const DiscountApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = DiscountApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateDiscountSaleDto} createDiscountSaleDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesCreate(createDiscountSaleDto: CreateDiscountSaleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesCreate(createDiscountSaleDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesFindOne(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateDiscountDto} updateDiscountDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesUpdate(id: string, updateDiscountDto: UpdateDiscountDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesUpdate(id, updateDiscountDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * DiscountApi - factory interface
 * @export
 */
export const DiscountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = DiscountApiFp(configuration);
	return {
		/**
		 *
		 * @param {CreateDiscountSaleDto} createDiscountSaleDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesCreate(createDiscountSaleDto: CreateDiscountSaleDto, options?: any): AxiosPromise<void> {
			return localVarFp.discountSalesCreate(createDiscountSaleDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesFindAll(options?: any): AxiosPromise<void> {
			return localVarFp.discountSalesFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesFindOne(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.discountSalesFindOne(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesRemove(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.discountSalesRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateDiscountDto} updateDiscountDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesUpdate(id: string, updateDiscountDto: UpdateDiscountDto, options?: any): AxiosPromise<void> {
			return localVarFp.discountSalesUpdate(id, updateDiscountDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for discountSalesCreate operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesCreateRequest
 */
export interface DiscountApiDiscountSalesCreateRequest {
	/**
	 *
	 * @type {CreateDiscountSaleDto}
	 * @memberof DiscountApiDiscountSalesCreate
	 */
	readonly createDiscountSaleDto: CreateDiscountSaleDto;
}

/**
 * Request parameters for discountSalesFindOne operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesFindOneRequest
 */
export interface DiscountApiDiscountSalesFindOneRequest {
	/**
	 *
	 * @type {string}
	 * @memberof DiscountApiDiscountSalesFindOne
	 */
	readonly id: string;
}

/**
 * Request parameters for discountSalesRemove operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesRemoveRequest
 */
export interface DiscountApiDiscountSalesRemoveRequest {
	/**
	 *
	 * @type {string}
	 * @memberof DiscountApiDiscountSalesRemove
	 */
	readonly id: string;
}

/**
 * Request parameters for discountSalesUpdate operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesUpdateRequest
 */
export interface DiscountApiDiscountSalesUpdateRequest {
	/**
	 *
	 * @type {string}
	 * @memberof DiscountApiDiscountSalesUpdate
	 */
	readonly id: string;

	/**
	 *
	 * @type {UpdateDiscountDto}
	 * @memberof DiscountApiDiscountSalesUpdate
	 */
	readonly updateDiscountDto: UpdateDiscountDto;
}

/**
 * DiscountApi - object-oriented interface
 * @export
 * @class DiscountApi
 * @extends {BaseAPI}
 */
export class DiscountApi extends BaseAPI {
	/**
	 *
	 * @param {DiscountApiDiscountSalesCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesCreate(requestParameters: DiscountApiDiscountSalesCreateRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesCreate(requestParameters.createDiscountSaleDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesFindAll(options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesFindOne(requestParameters: DiscountApiDiscountSalesFindOneRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesRemove(requestParameters: DiscountApiDiscountSalesRemoveRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesUpdate(requestParameters: DiscountApiDiscountSalesUpdateRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesUpdate(requestParameters.id, requestParameters.updateDiscountDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * MediaApi - axios parameter creator
 * @export
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {any} [file]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaCreateMedia: async (file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/media`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;
			const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


			if ( file !== undefined ) {
				localVarFormParams.append('file', file as any);
			}


			localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = localVarFormParams;

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('mediaDeleteById', 'id', id)
			const localVarPath = `/api/v1/media/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaGetById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('mediaGetById', 'id', id)
			const localVarPath = `/api/v1/media/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} [page]
		 * @param {number} [pageSize]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaListMedia: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/media`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if ( page !== undefined ) {
				localVarQueryParameter['page'] = page;
			}

			if ( pageSize !== undefined ) {
				localVarQueryParameter['pageSize'] = pageSize;
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * MediaApi - functional programming interface
 * @export
 */
export const MediaApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = MediaApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {any} [file]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async mediaCreateMedia(file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.mediaCreateMedia(file, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async mediaDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.mediaDeleteById(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async mediaGetById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.mediaGetById(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} [page]
		 * @param {number} [pageSize]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async mediaListMedia(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaListPaginated>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.mediaListMedia(page, pageSize, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * MediaApi - factory interface
 * @export
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = MediaApiFp(configuration);
	return {
		/**
		 *
		 * @param {any} [file]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaCreateMedia(file?: any, options?: any): AxiosPromise<MediaDto> {
			return localVarFp.mediaCreateMedia(file, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaDeleteById(id: number, options?: any): AxiosPromise<MediaDto> {
			return localVarFp.mediaDeleteById(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaGetById(id: number, options?: any): AxiosPromise<MediaDto> {
			return localVarFp.mediaGetById(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} [page]
		 * @param {number} [pageSize]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaListMedia(page?: number, pageSize?: number, options?: any): AxiosPromise<MediaListPaginated> {
			return localVarFp.mediaListMedia(page, pageSize, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for mediaCreateMedia operation in MediaApi.
 * @export
 * @interface MediaApiMediaCreateMediaRequest
 */
export interface MediaApiMediaCreateMediaRequest {
	/**
	 *
	 * @type {any}
	 * @memberof MediaApiMediaCreateMedia
	 */
	readonly file?: any;
}

/**
 * Request parameters for mediaDeleteById operation in MediaApi.
 * @export
 * @interface MediaApiMediaDeleteByIdRequest
 */
export interface MediaApiMediaDeleteByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof MediaApiMediaDeleteById
	 */
	readonly id: number;
}

/**
 * Request parameters for mediaGetById operation in MediaApi.
 * @export
 * @interface MediaApiMediaGetByIdRequest
 */
export interface MediaApiMediaGetByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof MediaApiMediaGetById
	 */
	readonly id: number;
}

/**
 * Request parameters for mediaListMedia operation in MediaApi.
 * @export
 * @interface MediaApiMediaListMediaRequest
 */
export interface MediaApiMediaListMediaRequest {
	/**
	 *
	 * @type {number}
	 * @memberof MediaApiMediaListMedia
	 */
	readonly page?: number;

	/**
	 *
	 * @type {number}
	 * @memberof MediaApiMediaListMedia
	 */
	readonly pageSize?: number;
}

/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export class MediaApi extends BaseAPI {
	/**
	 *
	 * @param {MediaApiMediaCreateMediaRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MediaApi
	 */
	public mediaCreateMedia(requestParameters: MediaApiMediaCreateMediaRequest = {}, options?: AxiosRequestConfig) {
		return MediaApiFp(this.configuration).mediaCreateMedia(requestParameters.file, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {MediaApiMediaDeleteByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MediaApi
	 */
	public mediaDeleteById(requestParameters: MediaApiMediaDeleteByIdRequest, options?: AxiosRequestConfig) {
		return MediaApiFp(this.configuration).mediaDeleteById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {MediaApiMediaGetByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MediaApi
	 */
	public mediaGetById(requestParameters: MediaApiMediaGetByIdRequest, options?: AxiosRequestConfig) {
		return MediaApiFp(this.configuration).mediaGetById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {MediaApiMediaListMediaRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MediaApi
	 */
	public mediaListMedia(requestParameters: MediaApiMediaListMediaRequest = {}, options?: AxiosRequestConfig) {
		return MediaApiFp(this.configuration).mediaListMedia(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateOrderDto} createOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderCreate: async (createOrderDto: CreateOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createOrderDto' is not null or undefined
			assertParamExists('orderCreate', 'createOrderDto', createOrderDto)
			const localVarPath = `/api/v1/order`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createOrderDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/order`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('orderFindOne', 'id', id)
			const localVarPath = `/api/v1/order/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('orderRemove', 'id', id)
			const localVarPath = `/api/v1/order/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateOrderDto} updateOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderUpdate: async (id: string, updateOrderDto: UpdateOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('orderUpdate', 'id', id)
			// verify required parameter 'updateOrderDto' is not null or undefined
			assertParamExists('orderUpdate', 'updateOrderDto', updateOrderDto)
			const localVarPath = `/api/v1/order/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateOrderDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateOrderDto} createOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderCreate(createOrderDto: CreateOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderCreate(createOrderDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderFindOne(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateOrderDto} updateOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderUpdate(id: string, updateOrderDto: UpdateOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderUpdate(id, updateOrderDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = OrdersApiFp(configuration);
	return {
		/**
		 *
		 * @param {CreateOrderDto} createOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderCreate(createOrderDto: CreateOrderDto, options?: any): AxiosPromise<void> {
			return localVarFp.orderCreate(createOrderDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderFindAll(options?: any): AxiosPromise<void> {
			return localVarFp.orderFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderFindOne(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.orderFindOne(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderRemove(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.orderRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateOrderDto} updateOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderUpdate(id: string, updateOrderDto: UpdateOrderDto, options?: any): AxiosPromise<void> {
			return localVarFp.orderUpdate(id, updateOrderDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for orderCreate operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderCreateRequest
 */
export interface OrdersApiOrderCreateRequest {
	/**
	 *
	 * @type {CreateOrderDto}
	 * @memberof OrdersApiOrderCreate
	 */
	readonly createOrderDto: CreateOrderDto;
}

/**
 * Request parameters for orderFindOne operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderFindOneRequest
 */
export interface OrdersApiOrderFindOneRequest {
	/**
	 *
	 * @type {string}
	 * @memberof OrdersApiOrderFindOne
	 */
	readonly id: string;
}

/**
 * Request parameters for orderRemove operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderRemoveRequest
 */
export interface OrdersApiOrderRemoveRequest {
	/**
	 *
	 * @type {string}
	 * @memberof OrdersApiOrderRemove
	 */
	readonly id: string;
}

/**
 * Request parameters for orderUpdate operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderUpdateRequest
 */
export interface OrdersApiOrderUpdateRequest {
	/**
	 *
	 * @type {string}
	 * @memberof OrdersApiOrderUpdate
	 */
	readonly id: string;

	/**
	 *
	 * @type {UpdateOrderDto}
	 * @memberof OrdersApiOrderUpdate
	 */
	readonly updateOrderDto: UpdateOrderDto;
}

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
	/**
	 *
	 * @param {OrdersApiOrderCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderCreate(requestParameters: OrdersApiOrderCreateRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderCreate(requestParameters.createOrderDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderFindAll(options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {OrdersApiOrderFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderFindOne(requestParameters: OrdersApiOrderFindOneRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {OrdersApiOrderRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderRemove(requestParameters: OrdersApiOrderRemoveRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {OrdersApiOrderUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderUpdate(requestParameters: OrdersApiOrderUpdateRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderUpdate(requestParameters.id, requestParameters.updateOrderDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * ProductTypesApi - axios parameter creator
 * @export
 */
export const ProductTypesApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateProductTypeDto} createProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesCreate: async (createProductTypeDto: CreateProductTypeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createProductTypeDto' is not null or undefined
			assertParamExists('productTypesCreate', 'createProductTypeDto', createProductTypeDto)
			const localVarPath = `/api/v1/product-types`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createProductTypeDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/product-types`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesGetById: async (productTypeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productTypeId' is not null or undefined
			assertParamExists('productTypesGetById', 'productTypeId', productTypeId)
			const localVarPath = `/api/v1/product-types/{productTypeId}`
				.replace(`{${ "productTypeId" }}`, encodeURIComponent(String(productTypeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesRemove: async (productTypeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productTypeId' is not null or undefined
			assertParamExists('productTypesRemove', 'productTypeId', productTypeId)
			const localVarPath = `/api/v1/product-types/{productTypeId}`
				.replace(`{${ "productTypeId" }}`, encodeURIComponent(String(productTypeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {CreateProductTypeDto} createProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesUpdate: async (productTypeId: number, createProductTypeDto: CreateProductTypeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productTypeId' is not null or undefined
			assertParamExists('productTypesUpdate', 'productTypeId', productTypeId)
			// verify required parameter 'createProductTypeDto' is not null or undefined
			assertParamExists('productTypesUpdate', 'createProductTypeDto', createProductTypeDto)
			const localVarPath = `/api/v1/product-types/{productTypeId}`
				.replace(`{${ "productTypeId" }}`, encodeURIComponent(String(productTypeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createProductTypeDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * ProductTypesApi - functional programming interface
 * @export
 */
export const ProductTypesApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = ProductTypesApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateProductTypeDto} createProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productTypesCreate(createProductTypeDto: CreateProductTypeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTypeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productTypesCreate(createProductTypeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productTypesFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductTypeDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productTypesFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productTypesGetById(productTypeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTypeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productTypesGetById(productTypeId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productTypesRemove(productTypeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTypeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productTypesRemove(productTypeId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {CreateProductTypeDto} createProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productTypesUpdate(productTypeId: number, createProductTypeDto: CreateProductTypeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTypeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productTypesUpdate(productTypeId, createProductTypeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * ProductTypesApi - factory interface
 * @export
 */
export const ProductTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = ProductTypesApiFp(configuration);
	return {
		/**
		 *
		 * @param {CreateProductTypeDto} createProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesCreate(createProductTypeDto: CreateProductTypeDto, options?: any): AxiosPromise<ProductTypeDto> {
			return localVarFp.productTypesCreate(createProductTypeDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesFindAll(options?: any): AxiosPromise<Array<ProductTypeDto>> {
			return localVarFp.productTypesFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesGetById(productTypeId: number, options?: any): AxiosPromise<ProductTypeDto> {
			return localVarFp.productTypesGetById(productTypeId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesRemove(productTypeId: number, options?: any): AxiosPromise<ProductTypeDto> {
			return localVarFp.productTypesRemove(productTypeId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {CreateProductTypeDto} createProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesUpdate(productTypeId: number, createProductTypeDto: CreateProductTypeDto, options?: any): AxiosPromise<ProductTypeDto> {
			return localVarFp.productTypesUpdate(productTypeId, createProductTypeDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for productTypesCreate operation in ProductTypesApi.
 * @export
 * @interface ProductTypesApiProductTypesCreateRequest
 */
export interface ProductTypesApiProductTypesCreateRequest {
	/**
	 *
	 * @type {CreateProductTypeDto}
	 * @memberof ProductTypesApiProductTypesCreate
	 */
	readonly createProductTypeDto: CreateProductTypeDto;
}

/**
 * Request parameters for productTypesGetById operation in ProductTypesApi.
 * @export
 * @interface ProductTypesApiProductTypesGetByIdRequest
 */
export interface ProductTypesApiProductTypesGetByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypesApiProductTypesGetById
	 */
	readonly productTypeId: number;
}

/**
 * Request parameters for productTypesRemove operation in ProductTypesApi.
 * @export
 * @interface ProductTypesApiProductTypesRemoveRequest
 */
export interface ProductTypesApiProductTypesRemoveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypesApiProductTypesRemove
	 */
	readonly productTypeId: number;
}

/**
 * Request parameters for productTypesUpdate operation in ProductTypesApi.
 * @export
 * @interface ProductTypesApiProductTypesUpdateRequest
 */
export interface ProductTypesApiProductTypesUpdateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypesApiProductTypesUpdate
	 */
	readonly productTypeId: number;

	/**
	 *
	 * @type {CreateProductTypeDto}
	 * @memberof ProductTypesApiProductTypesUpdate
	 */
	readonly createProductTypeDto: CreateProductTypeDto;
}

/**
 * ProductTypesApi - object-oriented interface
 * @export
 * @class ProductTypesApi
 * @extends {BaseAPI}
 */
export class ProductTypesApi extends BaseAPI {
	/**
	 *
	 * @param {ProductTypesApiProductTypesCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductTypesApi
	 */
	public productTypesCreate(requestParameters: ProductTypesApiProductTypesCreateRequest, options?: AxiosRequestConfig) {
		return ProductTypesApiFp(this.configuration).productTypesCreate(requestParameters.createProductTypeDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductTypesApi
	 */
	public productTypesFindAll(options?: AxiosRequestConfig) {
		return ProductTypesApiFp(this.configuration).productTypesFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductTypesApiProductTypesGetByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductTypesApi
	 */
	public productTypesGetById(requestParameters: ProductTypesApiProductTypesGetByIdRequest, options?: AxiosRequestConfig) {
		return ProductTypesApiFp(this.configuration).productTypesGetById(requestParameters.productTypeId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductTypesApiProductTypesRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductTypesApi
	 */
	public productTypesRemove(requestParameters: ProductTypesApiProductTypesRemoveRequest, options?: AxiosRequestConfig) {
		return ProductTypesApiFp(this.configuration).productTypesRemove(requestParameters.productTypeId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductTypesApiProductTypesUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductTypesApi
	 */
	public productTypesUpdate(requestParameters: ProductTypesApiProductTypesUpdateRequest, options?: AxiosRequestConfig) {
		return ProductTypesApiFp(this.configuration).productTypesUpdate(requestParameters.productTypeId, requestParameters.createProductTypeDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * ProductVariantsApi - axios parameter creator
 * @export
 */
export const ProductVariantsApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {number} productId
		 * @param {CreateProductVariantDto} createProductVariantDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantCreate: async (productId: number, createProductVariantDto: CreateProductVariantDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productId' is not null or undefined
			assertParamExists('productVariantCreate', 'productId', productId)
			// verify required parameter 'createProductVariantDto' is not null or undefined
			assertParamExists('productVariantCreate', 'createProductVariantDto', createProductVariantDto)
			const localVarPath = `/api/v1/products/{productId}/variants`
				.replace(`{${ "productId" }}`, encodeURIComponent(String(productId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createProductVariantDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} productId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantFindOfProduct: async (productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productId' is not null or undefined
			assertParamExists('productVariantFindOfProduct', 'productId', productId)
			const localVarPath = `/api/v1/products/{productId}/variants`
				.replace(`{${ "productId" }}`, encodeURIComponent(String(productId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantGetById: async (productId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productId' is not null or undefined
			assertParamExists('productVariantGetById', 'productId', productId)
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productVariantGetById', 'id', id)
			const localVarPath = `/api/v1/products/{productId}/variants/{id}`
				.replace(`{${ "productId" }}`, encodeURIComponent(String(productId)))
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantRemove: async (productId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productId' is not null or undefined
			assertParamExists('productVariantRemove', 'productId', productId)
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productVariantRemove', 'id', id)
			const localVarPath = `/api/v1/products/{productId}/variants/{id}`
				.replace(`{${ "productId" }}`, encodeURIComponent(String(productId)))
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {CreateProductVariantDto} createProductVariantDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantUpdate: async (productId: number, id: number, createProductVariantDto: CreateProductVariantDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productId' is not null or undefined
			assertParamExists('productVariantUpdate', 'productId', productId)
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productVariantUpdate', 'id', id)
			// verify required parameter 'createProductVariantDto' is not null or undefined
			assertParamExists('productVariantUpdate', 'createProductVariantDto', createProductVariantDto)
			const localVarPath = `/api/v1/products/{productId}/variants/{id}`
				.replace(`{${ "productId" }}`, encodeURIComponent(String(productId)))
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createProductVariantDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * ProductVariantsApi - functional programming interface
 * @export
 */
export const ProductVariantsApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = ProductVariantsApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} productId
		 * @param {CreateProductVariantDto} createProductVariantDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productVariantCreate(productId: number, createProductVariantDto: CreateProductVariantDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productVariantCreate(productId, createProductVariantDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} productId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productVariantFindOfProduct(productId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductVariantDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productVariantFindOfProduct(productId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productVariantGetById(productId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productVariantGetById(productId, id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productVariantRemove(productId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productVariantRemove(productId, id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {CreateProductVariantDto} createProductVariantDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productVariantUpdate(productId: number, id: number, createProductVariantDto: CreateProductVariantDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productVariantUpdate(productId, id, createProductVariantDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * ProductVariantsApi - factory interface
 * @export
 */
export const ProductVariantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = ProductVariantsApiFp(configuration);
	return {
		/**
		 *
		 * @param {number} productId
		 * @param {CreateProductVariantDto} createProductVariantDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantCreate(productId: number, createProductVariantDto: CreateProductVariantDto, options?: any): AxiosPromise<ProductVariantDto> {
			return localVarFp.productVariantCreate(productId, createProductVariantDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} productId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantFindOfProduct(productId: number, options?: any): AxiosPromise<Array<ProductVariantDto>> {
			return localVarFp.productVariantFindOfProduct(productId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantGetById(productId: number, id: number, options?: any): AxiosPromise<ProductVariantDto> {
			return localVarFp.productVariantGetById(productId, id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantRemove(productId: number, id: number, options?: any): AxiosPromise<ProductVariantDto> {
			return localVarFp.productVariantRemove(productId, id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {CreateProductVariantDto} createProductVariantDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantUpdate(productId: number, id: number, createProductVariantDto: CreateProductVariantDto, options?: any): AxiosPromise<ProductVariantDto> {
			return localVarFp.productVariantUpdate(productId, id, createProductVariantDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for productVariantCreate operation in ProductVariantsApi.
 * @export
 * @interface ProductVariantsApiProductVariantCreateRequest
 */
export interface ProductVariantsApiProductVariantCreateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantCreate
	 */
	readonly productId: number;

	/**
	 *
	 * @type {CreateProductVariantDto}
	 * @memberof ProductVariantsApiProductVariantCreate
	 */
	readonly createProductVariantDto: CreateProductVariantDto;
}

/**
 * Request parameters for productVariantFindOfProduct operation in ProductVariantsApi.
 * @export
 * @interface ProductVariantsApiProductVariantFindOfProductRequest
 */
export interface ProductVariantsApiProductVariantFindOfProductRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantFindOfProduct
	 */
	readonly productId: number;
}

/**
 * Request parameters for productVariantGetById operation in ProductVariantsApi.
 * @export
 * @interface ProductVariantsApiProductVariantGetByIdRequest
 */
export interface ProductVariantsApiProductVariantGetByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantGetById
	 */
	readonly productId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantGetById
	 */
	readonly id: number;
}

/**
 * Request parameters for productVariantRemove operation in ProductVariantsApi.
 * @export
 * @interface ProductVariantsApiProductVariantRemoveRequest
 */
export interface ProductVariantsApiProductVariantRemoveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantRemove
	 */
	readonly productId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantRemove
	 */
	readonly id: number;
}

/**
 * Request parameters for productVariantUpdate operation in ProductVariantsApi.
 * @export
 * @interface ProductVariantsApiProductVariantUpdateRequest
 */
export interface ProductVariantsApiProductVariantUpdateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantUpdate
	 */
	readonly productId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantUpdate
	 */
	readonly id: number;

	/**
	 *
	 * @type {CreateProductVariantDto}
	 * @memberof ProductVariantsApiProductVariantUpdate
	 */
	readonly createProductVariantDto: CreateProductVariantDto;
}

/**
 * ProductVariantsApi - object-oriented interface
 * @export
 * @class ProductVariantsApi
 * @extends {BaseAPI}
 */
export class ProductVariantsApi extends BaseAPI {
	/**
	 *
	 * @param {ProductVariantsApiProductVariantCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductVariantsApi
	 */
	public productVariantCreate(requestParameters: ProductVariantsApiProductVariantCreateRequest, options?: AxiosRequestConfig) {
		return ProductVariantsApiFp(this.configuration).productVariantCreate(requestParameters.productId, requestParameters.createProductVariantDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductVariantsApiProductVariantFindOfProductRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductVariantsApi
	 */
	public productVariantFindOfProduct(requestParameters: ProductVariantsApiProductVariantFindOfProductRequest, options?: AxiosRequestConfig) {
		return ProductVariantsApiFp(this.configuration).productVariantFindOfProduct(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductVariantsApiProductVariantGetByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductVariantsApi
	 */
	public productVariantGetById(requestParameters: ProductVariantsApiProductVariantGetByIdRequest, options?: AxiosRequestConfig) {
		return ProductVariantsApiFp(this.configuration).productVariantGetById(requestParameters.productId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductVariantsApiProductVariantRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductVariantsApi
	 */
	public productVariantRemove(requestParameters: ProductVariantsApiProductVariantRemoveRequest, options?: AxiosRequestConfig) {
		return ProductVariantsApiFp(this.configuration).productVariantRemove(requestParameters.productId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductVariantsApiProductVariantUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductVariantsApi
	 */
	public productVariantUpdate(requestParameters: ProductVariantsApiProductVariantUpdateRequest, options?: AxiosRequestConfig) {
		return ProductVariantsApiFp(this.configuration).productVariantUpdate(requestParameters.productId, requestParameters.id, requestParameters.createProductVariantDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateProductDto} createProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsCreate: async (createProductDto: CreateProductDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createProductDto' is not null or undefined
			assertParamExists('productsCreate', 'createProductDto', createProductDto)
			const localVarPath = `/api/v1/products`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createProductDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} itemsPerPage
		 * @param {number} page
		 * @param {Array<ProductQueryFilterDto>} [filters]
		 * @param {number} [minPrice]
		 * @param {number} [maxPrice]
		 * @param {ProductSorting} [sorting]
		 * @param {LanguageCode} [language]
		 * @param {string} [search]
		 * @param {boolean} [variants]
		 * @param {number} [categoryId]
		 * @param {number} [collectionId]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsFindAll: async (itemsPerPage: number, page: number, filters?: Array<ProductQueryFilterDto>, minPrice?: number, maxPrice?: number, sorting?: ProductSorting, language?: LanguageCode, search?: string, variants?: boolean, categoryId?: number, collectionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'itemsPerPage' is not null or undefined
			assertParamExists('productsFindAll', 'itemsPerPage', itemsPerPage)
			// verify required parameter 'page' is not null or undefined
			assertParamExists('productsFindAll', 'page', page)
			const localVarPath = `/api/v1/products`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			if ( filters ) {
				localVarQueryParameter['filters'] = filters;
			}

			if ( minPrice !== undefined ) {
				localVarQueryParameter['minPrice'] = minPrice;
			}

			if ( maxPrice !== undefined ) {
				localVarQueryParameter['maxPrice'] = maxPrice;
			}

			if ( sorting !== undefined ) {
				localVarQueryParameter['sorting'] = sorting;
			}

			if ( language !== undefined ) {
				localVarQueryParameter['language'] = language;
			}

			if ( search !== undefined ) {
				localVarQueryParameter['search'] = search;
			}

			if ( variants !== undefined ) {
				localVarQueryParameter['variants'] = variants;
			}

			if ( itemsPerPage !== undefined ) {
				localVarQueryParameter['itemsPerPage'] = itemsPerPage;
			}

			if ( page !== undefined ) {
				localVarQueryParameter['page'] = page;
			}

			if ( categoryId !== undefined ) {
				localVarQueryParameter['categoryId'] = categoryId;
			}

			if ( collectionId !== undefined ) {
				localVarQueryParameter['collectionId'] = collectionId;
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsGetById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productsGetById', 'id', id)
			const localVarPath = `/api/v1/products/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsRemove: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productsRemove', 'id', id)
			const localVarPath = `/api/v1/products/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {CreateProductDto} createProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsUpdate: async (id: number, createProductDto: CreateProductDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productsUpdate', 'id', id)
			// verify required parameter 'createProductDto' is not null or undefined
			assertParamExists('productsUpdate', 'createProductDto', createProductDto)
			const localVarPath = `/api/v1/products/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createProductDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateProductDto} createProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsCreate(createProductDto: CreateProductDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsCreate(createProductDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} itemsPerPage
		 * @param {number} page
		 * @param {Array<ProductQueryFilterDto>} [filters]
		 * @param {number} [minPrice]
		 * @param {number} [maxPrice]
		 * @param {ProductSorting} [sorting]
		 * @param {LanguageCode} [language]
		 * @param {string} [search]
		 * @param {boolean} [variants]
		 * @param {number} [categoryId]
		 * @param {number} [collectionId]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsFindAll(itemsPerPage: number, page: number, filters?: Array<ProductQueryFilterDto>, minPrice?: number, maxPrice?: number, sorting?: ProductSorting, language?: LanguageCode, search?: string, variants?: boolean, categoryId?: number, collectionId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFilterResultDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsFindAll(itemsPerPage, page, filters, minPrice, maxPrice, sorting, language, search, variants, categoryId, collectionId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsGetById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsGetById(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsRemove(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {CreateProductDto} createProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsUpdate(id: number, createProductDto: CreateProductDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsUpdate(id, createProductDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = ProductsApiFp(configuration);
	return {
		/**
		 *
		 * @param {CreateProductDto} createProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsCreate(createProductDto: CreateProductDto, options?: any): AxiosPromise<ProductDto> {
			return localVarFp.productsCreate(createProductDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} itemsPerPage
		 * @param {number} page
		 * @param {Array<ProductQueryFilterDto>} [filters]
		 * @param {number} [minPrice]
		 * @param {number} [maxPrice]
		 * @param {ProductSorting} [sorting]
		 * @param {LanguageCode} [language]
		 * @param {string} [search]
		 * @param {boolean} [variants]
		 * @param {number} [categoryId]
		 * @param {number} [collectionId]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsFindAll(itemsPerPage: number, page: number, filters?: Array<ProductQueryFilterDto>, minPrice?: number, maxPrice?: number, sorting?: ProductSorting, language?: LanguageCode, search?: string, variants?: boolean, categoryId?: number, collectionId?: number, options?: any): AxiosPromise<ProductFilterResultDto> {
			return localVarFp.productsFindAll(itemsPerPage, page, filters, minPrice, maxPrice, sorting, language, search, variants, categoryId, collectionId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsGetById(id: number, options?: any): AxiosPromise<ProductDto> {
			return localVarFp.productsGetById(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsRemove(id: number, options?: any): AxiosPromise<ProductDto> {
			return localVarFp.productsRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {CreateProductDto} createProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsUpdate(id: number, createProductDto: CreateProductDto, options?: any): AxiosPromise<ProductDto> {
			return localVarFp.productsUpdate(id, createProductDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for productsCreate operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsCreateRequest
 */
export interface ProductsApiProductsCreateRequest {
	/**
	 *
	 * @type {CreateProductDto}
	 * @memberof ProductsApiProductsCreate
	 */
	readonly createProductDto: CreateProductDto;
}

/**
 * Request parameters for productsFindAll operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsFindAllRequest
 */
export interface ProductsApiProductsFindAllRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly itemsPerPage: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly page: number;

	/**
	 *
	 * @type {Array<ProductQueryFilterDto>}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly filters?: Array<ProductQueryFilterDto>;

	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly minPrice?: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly maxPrice?: number;

	/**
	 *
	 * @type {ProductSorting}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly sorting?: ProductSorting;

	/**
	 *
	 * @type {LanguageCode}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly language?: LanguageCode;

	/**
	 *
	 * @type {string}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly search?: string;

	/**
	 *
	 * @type {boolean}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly variants?: boolean;

	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly categoryId?: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly collectionId?: number;
}

/**
 * Request parameters for productsGetById operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsGetByIdRequest
 */
export interface ProductsApiProductsGetByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsGetById
	 */
	readonly id: number;
}

/**
 * Request parameters for productsRemove operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsRemoveRequest
 */
export interface ProductsApiProductsRemoveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsRemove
	 */
	readonly id: number;
}

/**
 * Request parameters for productsUpdate operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsUpdateRequest
 */
export interface ProductsApiProductsUpdateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsUpdate
	 */
	readonly id: number;

	/**
	 *
	 * @type {CreateProductDto}
	 * @memberof ProductsApiProductsUpdate
	 */
	readonly createProductDto: CreateProductDto;
}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
	/**
	 *
	 * @param {ProductsApiProductsCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsCreate(requestParameters: ProductsApiProductsCreateRequest, options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsCreate(requestParameters.createProductDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductsApiProductsFindAllRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsFindAll(requestParameters: ProductsApiProductsFindAllRequest, options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsFindAll(requestParameters.itemsPerPage, requestParameters.page, requestParameters.filters, requestParameters.minPrice, requestParameters.maxPrice, requestParameters.sorting, requestParameters.language, requestParameters.search, requestParameters.variants, requestParameters.categoryId, requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductsApiProductsGetByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsGetById(requestParameters: ProductsApiProductsGetByIdRequest, options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsGetById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductsApiProductsRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsRemove(requestParameters: ProductsApiProductsRemoveRequest, options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductsApiProductsUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsUpdate(requestParameters: ProductsApiProductsUpdateRequest, options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsUpdate(requestParameters.id, requestParameters.createProductDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {object} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersCreate: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'body' is not null or undefined
			assertParamExists('usersCreate', 'body', body)
			const localVarPath = `/api/v1/users`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/users`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('usersFindOne', 'id', id)
			const localVarPath = `/api/v1/users/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('usersRemove', 'id', id)
			const localVarPath = `/api/v1/users/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {object} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersUpdate: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('usersUpdate', 'id', id)
			// verify required parameter 'body' is not null or undefined
			assertParamExists('usersUpdate', 'body', body)
			const localVarPath = `/api/v1/users/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {object} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async usersCreate(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.usersCreate(body, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async usersFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.usersFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async usersFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.usersFindOne(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async usersRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.usersRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {object} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async usersUpdate(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.usersUpdate(id, body, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = UsersApiFp(configuration);
	return {
		/**
		 *
		 * @param {object} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersCreate(body: object, options?: any): AxiosPromise<void> {
			return localVarFp.usersCreate(body, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersFindAll(options?: any): AxiosPromise<void> {
			return localVarFp.usersFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersFindOne(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.usersFindOne(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersRemove(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.usersRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {object} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersUpdate(id: string, body: object, options?: any): AxiosPromise<void> {
			return localVarFp.usersUpdate(id, body, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for usersCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersCreateRequest
 */
export interface UsersApiUsersCreateRequest {
	/**
	 *
	 * @type {object}
	 * @memberof UsersApiUsersCreate
	 */
	readonly body: object;
}

/**
 * Request parameters for usersFindOne operation in UsersApi.
 * @export
 * @interface UsersApiUsersFindOneRequest
 */
export interface UsersApiUsersFindOneRequest {
	/**
	 *
	 * @type {string}
	 * @memberof UsersApiUsersFindOne
	 */
	readonly id: string;
}

/**
 * Request parameters for usersRemove operation in UsersApi.
 * @export
 * @interface UsersApiUsersRemoveRequest
 */
export interface UsersApiUsersRemoveRequest {
	/**
	 *
	 * @type {string}
	 * @memberof UsersApiUsersRemove
	 */
	readonly id: string;
}

/**
 * Request parameters for usersUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersUpdateRequest
 */
export interface UsersApiUsersUpdateRequest {
	/**
	 *
	 * @type {string}
	 * @memberof UsersApiUsersUpdate
	 */
	readonly id: string;

	/**
	 *
	 * @type {object}
	 * @memberof UsersApiUsersUpdate
	 */
	readonly body: object;
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
	/**
	 *
	 * @param {UsersApiUsersCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public usersCreate(requestParameters: UsersApiUsersCreateRequest, options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration).usersCreate(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public usersFindAll(options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration).usersFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {UsersApiUsersFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public usersFindOne(requestParameters: UsersApiUsersFindOneRequest, options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration).usersFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {UsersApiUsersRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public usersRemove(requestParameters: UsersApiUsersRemoveRequest, options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration).usersRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {UsersApiUsersUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public usersUpdate(requestParameters: UsersApiUsersUpdateRequest, options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration).usersUpdate(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
	}
}


