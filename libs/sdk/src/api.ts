/* tslint:disable */
/* eslint-disable */
/**
 * Nima CMS
 * The core api for the Nima CMS backend.
 *
 * The version of the OpenAPI document: 0.0.1-alpha
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios';
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError } from './base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	assertParamExists,
	createRequestFunction,
	DUMMY_BASE_URL,
	serializeDataIfNeeded,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	toPathString,
} from './common';
import { Configuration } from './configuration';

/**
 *
 * @export
 * @interface AddressDto
 */
export interface AddressDto {
	/**
	 *
	 * @type {number}
	 * @memberof AddressDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'firstName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'lastName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'companyName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'phone'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'country': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'state': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'city': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'zip': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'address': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'address2'?: string;
}
/**
 *
 * @export
 * @interface AttributeDrillDownDto
 */
export interface AttributeDrillDownDto {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeDrillDownDto
	 */
	'attributeId': number;
	/**
	 *
	 * @type {string}
	 * @memberof AttributeDrillDownDto
	 */
	'attributeSlug': string;
	/**
	 *
	 * @type {Array<AttributeDrillDownValuesDto>}
	 * @memberof AttributeDrillDownDto
	 */
	'fieldValues': Array<AttributeDrillDownValuesDto>;
}
/**
 *
 * @export
 * @interface AttributeDrillDownValuesDto
 */
export interface AttributeDrillDownValuesDto {
	/**
	 *
	 * @type {string}
	 * @memberof AttributeDrillDownValuesDto
	 */
	'attributeValueSlug': string;
	/**
	 *
	 * @type {number}
	 * @memberof AttributeDrillDownValuesDto
	 */
	'attributeValueId': number;
	/**
	 *
	 * @type {number}
	 * @memberof AttributeDrillDownValuesDto
	 */
	'count': number;
}
/**
 *
 * @export
 * @interface AttributeDto
 */
export interface AttributeDto {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeDto
	 */
	'id': number;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof AttributeDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof AttributeDto
	 */
	'slug': string;
	/**
	 *
	 * @type {object}
	 * @memberof AttributeDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof AttributeDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeDto
	 */
	'availableInGrid': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeDto
	 */
	'visibleInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeDto
	 */
	'filterableInDashboard': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeDto
	 */
	'filterableInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeDto
	 */
	'valueRequired': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof AttributeDto
	 */
	'storefrontSearchPosition': number;
	/**
	 *
	 * @type {InputType}
	 * @memberof AttributeDto
	 */
	'inputType': InputType;
	/**
	 *
	 * @type {Unit}
	 * @memberof AttributeDto
	 */
	'unit'?: Unit;
}
/**
 *
 * @export
 * @interface AttributeValueDto
 */
export interface AttributeValueDto {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValueDto
	 */
	'id': number;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof AttributeValueDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof AttributeValueDto
	 */
	'slug'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValueDto
	 */
	'sortOrder'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof AttributeValueDto
	 */
	'value'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AttributeValueDto
	 */
	'fileUrl'?: string;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof AttributeValueDto
	 */
	'richText'?: TranslatableDto;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeValueDto
	 */
	'boolean'?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof AttributeValueDto
	 */
	'dateTime'?: string;
}
/**
 *
 * @export
 * @interface CategoryDto
 */
export interface CategoryDto {
	/**
	 *
	 * @type {number}
	 * @memberof CategoryDto
	 */
	'id': number;
	/**
	 *
	 * @type {object}
	 * @memberof CategoryDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CategoryDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CategoryDto
	 */
	'seoTitle': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CategoryDto
	 */
	'seoDescription': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CategoryDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CategoryDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof CategoryDto
	 */
	'slug': string;
	/**
	 *
	 * @type {Array<CategoryDto>}
	 * @memberof CategoryDto
	 */
	'children': Array<CategoryDto>;
	/**
	 * Only for ancestors query
	 * @type {CategoryDto}
	 * @memberof CategoryDto
	 */
	'parent'?: CategoryDto;
}
/**
 *
 * @export
 * @interface CheckoutAvailableShippingDto
 */
export interface CheckoutAvailableShippingDto {
	/**
	 *
	 * @type {ShippingMethodDto}
	 * @memberof CheckoutAvailableShippingDto
	 */
	'shippingMethod': ShippingMethodDto;
	/**
	 *
	 * @type {number}
	 * @memberof CheckoutAvailableShippingDto
	 */
	'rate': number;
}
/**
 *
 * @export
 * @interface CheckoutDto
 */
export interface CheckoutDto {
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutDto
	 */
	'created': string;
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutDto
	 */
	'lastChange': string;
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutDto
	 */
	'email'?: string;
	/**
	 *
	 * @type {boolean}
	 * @memberof CheckoutDto
	 */
	'useShippingAsBilling'?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutDto
	 */
	'token': string;
	/**
	 *
	 * @type {UserDto}
	 * @memberof CheckoutDto
	 */
	'user'?: UserDto;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof CheckoutDto
	 */
	'billingAddress': AddressDto;
	/**
	 *
	 * @type {number}
	 * @memberof CheckoutDto
	 */
	'discountAmount': number;
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutDto
	 */
	'discountName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutDto
	 */
	'note': string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof CheckoutDto
	 */
	'shippingAddress': AddressDto;
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutDto
	 */
	'voucherCode'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutDto
	 */
	'translatedDiscountName'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof CheckoutDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CheckoutDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutDto
	 */
	'currency': string;
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutDto
	 */
	'redirectUrl'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutDto
	 */
	'trackingCode'?: string;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof CheckoutDto
	 */
	'languageCode': LanguageCode;
	/**
	 *
	 * @type {PaymentMethod}
	 * @memberof CheckoutDto
	 */
	'paymentMethod': PaymentMethod;
	/**
	 *
	 * @type {Array<CheckoutLineDto>}
	 * @memberof CheckoutDto
	 */
	'lines': Array<CheckoutLineDto>;
	/**
	 *
	 * @type {number}
	 * @memberof CheckoutDto
	 */
	'subtotalPrice': number;
	/**
	 *
	 * @type {number}
	 * @memberof CheckoutDto
	 */
	'shippingCost': number;
	/**
	 *
	 * @type {number}
	 * @memberof CheckoutDto
	 */
	'quantity': number;
	/**
	 *
	 * @type {number}
	 * @memberof CheckoutDto
	 */
	'discount': number;
	/**
	 *
	 * @type {number}
	 * @memberof CheckoutDto
	 */
	'totalCost': number;
	/**
	 *
	 * @type {ShippingMethodDto}
	 * @memberof CheckoutDto
	 */
	'shippingMethod'?: ShippingMethodDto;
	/**
	 *
	 * @type {Array<CheckoutAvailableShippingDto>}
	 * @memberof CheckoutDto
	 */
	'availableShippingMethods': Array<CheckoutAvailableShippingDto>;
}
/**
 *
 * @export
 * @interface CheckoutLineDto
 */
export interface CheckoutLineDto {
	/**
	 *
	 * @type {number}
	 * @memberof CheckoutLineDto
	 */
	'quantity': number;
	/**
	 *
	 * @type {number}
	 * @memberof CheckoutLineDto
	 */
	'variantId': number;
	/**
	 *
	 * @type {number}
	 * @memberof CheckoutLineDto
	 */
	'productId': number;
	/**
	 *
	 * @type {number}
	 * @memberof CheckoutLineDto
	 */
	'totalCost': number;
	/**
	 *
	 * @type {number}
	 * @memberof CheckoutLineDto
	 */
	'discountedTotalCost': number;
}
/**
 *
 * @export
 * @interface CollectionDto
 */
export interface CollectionDto {
	/**
	 *
	 * @type {number}
	 * @memberof CollectionDto
	 */
	'id': number;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CollectionDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof CollectionDto
	 */
	'slug': string;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CollectionDto
	 */
	'seoDescription': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CollectionDto
	 */
	'seoTitle': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CollectionDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {object}
	 * @memberof CollectionDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CollectionDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {MediaDto}
	 * @memberof CollectionDto
	 */
	'backgroundImage': MediaDto;
	/**
	 *
	 * @type {Array<CollectionProductsDto>}
	 * @memberof CollectionDto
	 */
	'products': Array<CollectionProductsDto>;
}
/**
 *
 * @export
 * @interface CollectionProductsDto
 */
export interface CollectionProductsDto {
	/**
	 *
	 * @type {number}
	 * @memberof CollectionProductsDto
	 */
	'sortOrder': number;
	/**
	 *
	 * @type {ProductDto}
	 * @memberof CollectionProductsDto
	 */
	'product': ProductDto;
}
/**
 *
 * @export
 * @interface CreateAddressDto
 */
export interface CreateAddressDto {
	/**
	 *
	 * @type {string}
	 * @memberof CreateAddressDto
	 */
	'firstName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAddressDto
	 */
	'lastName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAddressDto
	 */
	'companyName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAddressDto
	 */
	'phone'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAddressDto
	 */
	'country': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAddressDto
	 */
	'state': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAddressDto
	 */
	'city': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAddressDto
	 */
	'zip': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAddressDto
	 */
	'address': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAddressDto
	 */
	'address2'?: string;
}
/**
 *
 * @export
 * @interface CreateAssignedProductAttributeDto
 */
export interface CreateAssignedProductAttributeDto {
	/**
	 *
	 * @type {number}
	 * @memberof CreateAssignedProductAttributeDto
	 */
	'productTypeAttributeId': number;
	/**
	 *
	 * @type {Array<CreateAssignedProductAttributeValueDto>}
	 * @memberof CreateAssignedProductAttributeDto
	 */
	'values': Array<CreateAssignedProductAttributeValueDto>;
}
/**
 *
 * @export
 * @interface CreateAssignedProductAttributeValueDto
 */
export interface CreateAssignedProductAttributeValueDto {
	/**
	 *
	 * @type {number}
	 * @memberof CreateAssignedProductAttributeValueDto
	 */
	'sortOrder': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateAssignedProductAttributeValueDto
	 */
	'valueId': number;
}
/**
 *
 * @export
 * @interface CreateAssignedProductVariantAttributeDto
 */
export interface CreateAssignedProductVariantAttributeDto {
	/**
	 *
	 * @type {number}
	 * @memberof CreateAssignedProductVariantAttributeDto
	 */
	'productTypeVariantAttributeId': number;
	/**
	 *
	 * @type {Array<CreateAssignedProductVariantAttributeValueDto>}
	 * @memberof CreateAssignedProductVariantAttributeDto
	 */
	'values': Array<CreateAssignedProductVariantAttributeValueDto>;
}
/**
 *
 * @export
 * @interface CreateAssignedProductVariantAttributeValueDto
 */
export interface CreateAssignedProductVariantAttributeValueDto {
	/**
	 *
	 * @type {number}
	 * @memberof CreateAssignedProductVariantAttributeValueDto
	 */
	'sortOrder': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateAssignedProductVariantAttributeValueDto
	 */
	'valueId': number;
}
/**
 *
 * @export
 * @interface CreateAttributeDto
 */
export interface CreateAttributeDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateAttributeDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAttributeDto
	 */
	'slug': string;
	/**
	 *
	 * @type {object}
	 * @memberof CreateAttributeDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateAttributeDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeDto
	 */
	'availableInGrid': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeDto
	 */
	'visibleInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeDto
	 */
	'filterableInDashboard': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeDto
	 */
	'filterableInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeDto
	 */
	'valueRequired': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof CreateAttributeDto
	 */
	'storefrontSearchPosition': number;
	/**
	 *
	 * @type {InputType}
	 * @memberof CreateAttributeDto
	 */
	'inputType': InputType;
	/**
	 *
	 * @type {Unit}
	 * @memberof CreateAttributeDto
	 */
	'unit'?: Unit;
}
/**
 *
 * @export
 * @interface CreateAttributeValueDto
 */
export interface CreateAttributeValueDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateAttributeValueDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAttributeValueDto
	 */
	'slug'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateAttributeValueDto
	 */
	'sortOrder'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAttributeValueDto
	 */
	'value'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAttributeValueDto
	 */
	'fileUrl'?: string;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateAttributeValueDto
	 */
	'richText'?: TranslatableDto;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeValueDto
	 */
	'boolean'?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAttributeValueDto
	 */
	'dateTime'?: string;
}
/**
 *
 * @export
 * @interface CreateCategoryDto
 */
export interface CreateCategoryDto {
	/**
	 *
	 * @type {object}
	 * @memberof CreateCategoryDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateCategoryDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCategoryDto
	 */
	'seoTitle': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCategoryDto
	 */
	'seoDescription': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCategoryDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCategoryDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCategoryDto
	 */
	'slug': string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateCategoryDto
	 */
	'parentId'?: number;
}
/**
 *
 * @export
 * @interface CreateCheckoutDto
 */
export interface CreateCheckoutDto {
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof CreateCheckoutDto
	 */
	'languageCode': LanguageCode;
}
/**
 *
 * @export
 * @interface CreateCollectionDto
 */
export interface CreateCollectionDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCollectionDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCollectionDto
	 */
	'slug': string;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCollectionDto
	 */
	'seoDescription': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCollectionDto
	 */
	'seoTitle': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCollectionDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {object}
	 * @memberof CreateCollectionDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateCollectionDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {Array<CreateCollectionProductDto>}
	 * @memberof CreateCollectionDto
	 */
	'products': Array<CreateCollectionProductDto>;
	/**
	 *
	 * @type {number}
	 * @memberof CreateCollectionDto
	 */
	'backgroundImageId'?: number;
}
/**
 *
 * @export
 * @interface CreateCollectionProductDto
 */
export interface CreateCollectionProductDto {
	/**
	 *
	 * @type {number}
	 * @memberof CreateCollectionProductDto
	 */
	'productId': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateCollectionProductDto
	 */
	'sortOrder': number;
}
/**
 *
 * @export
 * @interface CreateDiscountSaleDto
 */
export interface CreateDiscountSaleDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateDiscountSaleDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {DiscountType}
	 * @memberof CreateDiscountSaleDto
	 */
	'discountType': DiscountType;
	/**
	 *
	 * @type {number}
	 * @memberof CreateDiscountSaleDto
	 */
	'discountValue': number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateDiscountSaleDto
	 */
	'endDate'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateDiscountSaleDto
	 */
	'startDate'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof CreateDiscountSaleDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateDiscountSaleDto
	 */
	'privateMetadata': object;
}
/**
 *
 * @export
 * @interface CreateDiscountVoucherDto
 */
export interface CreateDiscountVoucherDto {
	/**
	 *
	 * @type {DiscountVoucherType}
	 * @memberof CreateDiscountVoucherDto
	 */
	'voucherType': DiscountVoucherType;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateDiscountVoucherDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {number}
	 * @memberof CreateDiscountVoucherDto
	 */
	'usageLimit': number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateDiscountVoucherDto
	 */
	'startDate': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateDiscountVoucherDto
	 */
	'endDate'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateDiscountVoucherDto
	 */
	'discountValue': number;
	/**
	 *
	 * @type {DiscountType}
	 * @memberof CreateDiscountVoucherDto
	 */
	'discountValueType': DiscountType;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateDiscountVoucherDto
	 */
	'applyOncePerOrder': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof CreateDiscountVoucherDto
	 */
	'minCheckoutItemsQuantity': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateDiscountVoucherDto
	 */
	'minSpentAmount': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateDiscountVoucherDto
	 */
	'applyOncePerCustomer': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateDiscountVoucherDto
	 */
	'onlyForStaff': boolean;
	/**
	 *
	 * @type {object}
	 * @memberof CreateDiscountVoucherDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateDiscountVoucherDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof CreateDiscountVoucherDto
	 */
	'code'?: string;
}
/**
 *
 * @export
 * @interface CreateOrderDto
 */
export interface CreateOrderDto {
	/**
	 * shipping tracking id
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'trackingClientId': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'userEmail': string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof CreateOrderDto
	 */
	'billingAddress'?: AddressDto;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof CreateOrderDto
	 */
	'shippingAddress'?: AddressDto;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'totalNetAmount': number;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof CreateOrderDto
	 */
	'languageCode': LanguageCode;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'shippingPriceGrossAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'totalGrossAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'shippingPriceNetAmount': number;
	/**
	 *
	 * @type {OrderStatus}
	 * @memberof CreateOrderDto
	 */
	'status': OrderStatus;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'shippingMethodName'?: string;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateOrderDto
	 */
	'displayGrossPrices': boolean;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'customerNote': string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'weight': number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'checkoutToken': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'currency': string;
	/**
	 *
	 * @type {object}
	 * @memberof CreateOrderDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateOrderDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'redirectUrl'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'shippingTaxRate': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'undiscountedTotalGrossAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'undiscountedTotalNetAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'totalPaidAmount': number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'origin': string;
	/**
	 *
	 * @type {Array<OrderLineDto>}
	 * @memberof CreateOrderDto
	 */
	'lines': Array<OrderLineDto>;
	/**
	 *
	 * @type {PaymentDto}
	 * @memberof CreateOrderDto
	 */
	'payment': PaymentDto;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'userId'?: number;
}
/**
 *
 * @export
 * @interface CreateOrderEventDto
 */
export interface CreateOrderEventDto {
	/**
	 *
	 * @type {OrderEventsEnum}
	 * @memberof CreateOrderEventDto
	 */
	'eventType': OrderEventsEnum;
	/**
	 *
	 * @type {object}
	 * @memberof CreateOrderEventDto
	 */
	'parameters': object;
}
/**
 *
 * @export
 * @interface CreateOrderFromCheckoutDto
 */
export interface CreateOrderFromCheckoutDto {
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderFromCheckoutDto
	 */
	'token': string;
}
/**
 *
 * @export
 * @interface CreateProductDto
 */
export interface CreateProductDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateProductDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateProductDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductDto
	 */
	'descriptionRaw': object;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'seoDescription': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'seoTitle': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductDto
	 */
	'chargeTaxes': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductDto
	 */
	'weight': number;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'slug': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'descriptionPlaintext': string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductDto
	 */
	'rating': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductDto
	 */
	'isPublished': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductDto
	 */
	'isVisibleInListings': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductDto
	 */
	'isAvailableForPurchase': boolean;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'currency': string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductDto
	 */
	'minPrice': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductDto
	 */
	'productTypeId': number;
	/**
	 *
	 * @type {Array<CreateAssignedProductAttributeDto>}
	 * @memberof CreateProductDto
	 */
	'attributes': Array<CreateAssignedProductAttributeDto>;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductDto
	 */
	'categoryId': number;
	/**
	 *
	 * @type {Array<CreateSortableMediaDto>}
	 * @memberof CreateProductDto
	 */
	'productMedia': Array<CreateSortableMediaDto>;
	/**
	 *
	 * @type {Array<number>}
	 * @memberof CreateProductDto
	 */
	'collectionIds': Array<number>;
}
/**
 *
 * @export
 * @interface CreateProductTypeDto
 */
export interface CreateProductTypeDto {
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductTypeDto
	 */
	'name': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductTypeDto
	 */
	'isShippingRequired': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductTypeDto
	 */
	'weight': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductTypeDto
	 */
	'isDigital': boolean;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductTypeDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductTypeDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductTypeDto
	 */
	'slug': string;
	/**
	 *
	 * @type {Array<ProductTypeAttributeDto>}
	 * @memberof CreateProductTypeDto
	 */
	'attributes': Array<ProductTypeAttributeDto>;
	/**
	 *
	 * @type {Array<ProductTypeVariantAttributeDto>}
	 * @memberof CreateProductTypeDto
	 */
	'variantAttributes': Array<ProductTypeVariantAttributeDto>;
}
/**
 *
 * @export
 * @interface CreateProductVariantDto
 */
export interface CreateProductVariantDto {
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductVariantDto
	 */
	'sku': string;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateProductVariantDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductVariantDto
	 */
	'weight'?: number;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductVariantDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductVariantDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductVariantDto
	 */
	'sortOrder'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductVariantDto
	 */
	'currency': string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductVariantDto
	 */
	'priceAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductVariantDto
	 */
	'stock': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductVariantDto
	 */
	'trackInventory': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductVariantDto
	 */
	'stockThreshold'?: number;
	/**
	 *
	 * @type {Array<CreateAssignedProductVariantAttributeDto>}
	 * @memberof CreateProductVariantDto
	 */
	'attributes': Array<CreateAssignedProductVariantAttributeDto>;
	/**
	 *
	 * @type {Array<CreateSortableMediaDto>}
	 * @memberof CreateProductVariantDto
	 */
	'productMedia': Array<CreateSortableMediaDto>;
}
/**
 *
 * @export
 * @interface CreateSettingsDto
 */
export interface CreateSettingsDto {
	/**
	 *
	 * @type {string}
	 * @memberof CreateSettingsDto
	 */
	'siteName': string;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof CreateSettingsDto
	 */
	'adminLanguage': LanguageCode;
	/**
	 *
	 * @type {string}
	 * @memberof CreateSettingsDto
	 */
	'adminEmail': string;
	/**
	 *
	 * @type {Array<LanguageCode>}
	 * @memberof CreateSettingsDto
	 */
	'availableLanguages': Array<LanguageCode>;
	/**
	 *
	 * @type {string}
	 * @memberof CreateSettingsDto
	 */
	'baseUrl': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateSettingsDto
	 */
	'canRegister': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof CreateSettingsDto
	 */
	'globalStockThreshold': number;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof CreateSettingsDto
	 */
	'defaultLanguage': LanguageCode;
	/**
	 *
	 * @type {string}
	 * @memberof CreateSettingsDto
	 */
	'senderEmail': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateSettingsDto
	 */
	'senderName': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateSettingsDto
	 */
	'seoTitle': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateSettingsDto
	 */
	'seoDescription': string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof CreateSettingsDto
	 */
	'shopAddress'?: AddressDto;
	/**
	 *
	 * @type {MediaDto}
	 * @memberof CreateSettingsDto
	 */
	'siteLogo'?: MediaDto;
}
/**
 *
 * @export
 * @interface CreateShippingMethodDto
 */
export interface CreateShippingMethodDto {
	/**
	 *
	 * @type {string}
	 * @memberof CreateShippingMethodDto
	 */
	'name': string;
	/**
	 *
	 * @type {object}
	 * @memberof CreateShippingMethodDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateShippingMethodDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateShippingMethodDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {Array<CreateShippingZoneDto>}
	 * @memberof CreateShippingMethodDto
	 */
	'shippingZones': Array<CreateShippingZoneDto>;
}
/**
 *
 * @export
 * @interface CreateShippingRateDto
 */
export interface CreateShippingRateDto {
	/**
	 *
	 * @type {number}
	 * @memberof CreateShippingRateDto
	 */
	'maximumOrderWeight'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateShippingRateDto
	 */
	'minimumOrderWeight'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateShippingRateDto
	 */
	'maximumPrice'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateShippingRateDto
	 */
	'minimumPrice'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateShippingRateDto
	 */
	'rate': number;
	/**
	 *
	 * @type {ShippingMethodType}
	 * @memberof CreateShippingRateDto
	 */
	'shippingType': ShippingMethodType;
	/**
	 *
	 * @type {number}
	 * @memberof CreateShippingRateDto
	 */
	'maximumDeliveryDays'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateShippingRateDto
	 */
	'minimumDeliveryDays'?: number;
}
/**
 *
 * @export
 * @interface CreateShippingZoneDto
 */
export interface CreateShippingZoneDto {
	/**
	 *
	 * @type {string}
	 * @memberof CreateShippingZoneDto
	 */
	'name': string;
	/**
	 *
	 * @type {ShippingZoneLocationType}
	 * @memberof CreateShippingZoneDto
	 */
	'locationType': ShippingZoneLocationType;
	/**
	 *
	 * @type {Array<string>}
	 * @memberof CreateShippingZoneDto
	 */
	'locationCodes': Array<string>;
	/**
	 *
	 * @type {object}
	 * @memberof CreateShippingZoneDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateShippingZoneDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {Array<ShippingRateDto>}
	 * @memberof CreateShippingZoneDto
	 */
	'shippingRates': Array<ShippingRateDto>;
}
/**
 *
 * @export
 * @interface CreateSortableMediaDto
 */
export interface CreateSortableMediaDto {
	/**
	 *
	 * @type {number}
	 * @memberof CreateSortableMediaDto
	 */
	'sortOrder': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateSortableMediaDto
	 */
	'mediaId': number;
}
/**
 *
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
	/**
	 *
	 * @type {string}
	 * @memberof CreateUserDto
	 */
	'email': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateUserDto
	 */
	'isAdmin': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateUserDto
	 */
	'isStaff': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateUserDto
	 */
	'isActive': boolean;
	/**
	 *
	 * @type {string}
	 * @memberof CreateUserDto
	 */
	'notes'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateUserDto
	 */
	'firstName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateUserDto
	 */
	'lastName'?: string;
	/**
	 *
	 * @type {MediaDto}
	 * @memberof CreateUserDto
	 */
	'avatar'?: MediaDto;
	/**
	 *
	 * @type {object}
	 * @memberof CreateUserDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateUserDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof CreateUserDto
	 */
	'languageCode': LanguageCode;
	/**
	 *
	 * @type {string}
	 * @memberof CreateUserDto
	 */
	'password': string;
}
/**
 *
 * @export
 * @interface DiscountAddCategoriesDto
 */
export interface DiscountAddCategoriesDto {
	/**
	 *
	 * @type {Array<number>}
	 * @memberof DiscountAddCategoriesDto
	 */
	'categoryIds': Array<number>;
}
/**
 *
 * @export
 * @interface DiscountAddCollectionsDto
 */
export interface DiscountAddCollectionsDto {
	/**
	 *
	 * @type {Array<number>}
	 * @memberof DiscountAddCollectionsDto
	 */
	'collectionIds': Array<number>;
}
/**
 *
 * @export
 * @interface DiscountAddProductsDto
 */
export interface DiscountAddProductsDto {
	/**
	 *
	 * @type {Array<number>}
	 * @memberof DiscountAddProductsDto
	 */
	'productIds': Array<number>;
}
/**
 *
 * @export
 * @interface DiscountAddVariantsDto
 */
export interface DiscountAddVariantsDto {
	/**
	 *
	 * @type {Array<number>}
	 * @memberof DiscountAddVariantsDto
	 */
	'variantIds': Array<number>;
}
/**
 *
 * @export
 * @interface DiscountSaleDto
 */
export interface DiscountSaleDto {
	/**
	 *
	 * @type {number}
	 * @memberof DiscountSaleDto
	 */
	'id': number;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof DiscountSaleDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {DiscountType}
	 * @memberof DiscountSaleDto
	 */
	'discountType': DiscountType;
	/**
	 *
	 * @type {number}
	 * @memberof DiscountSaleDto
	 */
	'discountValue': number;
	/**
	 *
	 * @type {string}
	 * @memberof DiscountSaleDto
	 */
	'endDate'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof DiscountSaleDto
	 */
	'startDate'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof DiscountSaleDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof DiscountSaleDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof DiscountSaleDto
	 */
	'created': string;
	/**
	 *
	 * @type {string}
	 * @memberof DiscountSaleDto
	 */
	'updatedAt': string;
	/**
	 *
	 * @type {Array<CategoryDto>}
	 * @memberof DiscountSaleDto
	 */
	'categories': Array<CategoryDto>;
	/**
	 *
	 * @type {Array<ProductDto>}
	 * @memberof DiscountSaleDto
	 */
	'products': Array<ProductDto>;
	/**
	 *
	 * @type {Array<ProductVariantDto>}
	 * @memberof DiscountSaleDto
	 */
	'variants': Array<ProductVariantDto>;
	/**
	 *
	 * @type {Array<CollectionDto>}
	 * @memberof DiscountSaleDto
	 */
	'collections': Array<CollectionDto>;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum DiscountType {
	PERCENTAGE = 'PERCENTAGE',
	FLAT = 'FLAT',
	FREE_SHIPPING = 'FREE_SHIPPING'
}


/**
 *
 * @export
 * @interface DiscountVoucherDto
 */
export interface DiscountVoucherDto {
	/**
	 *
	 * @type {number}
	 * @memberof DiscountVoucherDto
	 */
	'id': number;
	/**
	 *
	 * @type {DiscountVoucherType}
	 * @memberof DiscountVoucherDto
	 */
	'voucherType': DiscountVoucherType;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof DiscountVoucherDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof DiscountVoucherDto
	 */
	'code': string;
	/**
	 *
	 * @type {number}
	 * @memberof DiscountVoucherDto
	 */
	'usageLimit': number;
	/**
	 *
	 * @type {number}
	 * @memberof DiscountVoucherDto
	 */
	'used': number;
	/**
	 *
	 * @type {string}
	 * @memberof DiscountVoucherDto
	 */
	'startDate': string;
	/**
	 *
	 * @type {string}
	 * @memberof DiscountVoucherDto
	 */
	'endDate'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof DiscountVoucherDto
	 */
	'discountValue': number;
	/**
	 *
	 * @type {DiscountType}
	 * @memberof DiscountVoucherDto
	 */
	'discountValueType': DiscountType;
	/**
	 *
	 * @type {boolean}
	 * @memberof DiscountVoucherDto
	 */
	'applyOncePerOrder': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof DiscountVoucherDto
	 */
	'minCheckoutItemsQuantity': number;
	/**
	 *
	 * @type {number}
	 * @memberof DiscountVoucherDto
	 */
	'minSpentAmount': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof DiscountVoucherDto
	 */
	'applyOncePerCustomer': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof DiscountVoucherDto
	 */
	'onlyForStaff': boolean;
	/**
	 *
	 * @type {object}
	 * @memberof DiscountVoucherDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof DiscountVoucherDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof DiscountVoucherDto
	 */
	'created': string;
	/**
	 *
	 * @type {string}
	 * @memberof DiscountVoucherDto
	 */
	'updatedAt': string;
	/**
	 *
	 * @type {Array<CategoryDto>}
	 * @memberof DiscountVoucherDto
	 */
	'categories': Array<CategoryDto>;
	/**
	 *
	 * @type {Array<ProductDto>}
	 * @memberof DiscountVoucherDto
	 */
	'products': Array<ProductDto>;
	/**
	 *
	 * @type {Array<ProductVariantDto>}
	 * @memberof DiscountVoucherDto
	 */
	'variants': Array<ProductVariantDto>;
	/**
	 *
	 * @type {Array<CollectionDto>}
	 * @memberof DiscountVoucherDto
	 */
	'collections': Array<CollectionDto>;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum DiscountVoucherType {
	SHIPPING = 'SHIPPING',
	ENTIRE_ORDER = 'ENTIRE_ORDER',
	SPECIFIC_PRODUCT = 'SPECIFIC_PRODUCT'
}


/**
 *
 * @export
 * @interface EmailWebhooksDto
 */
export interface EmailWebhooksDto {
	/**
	 *
	 * @type {Emails}
	 * @memberof EmailWebhooksDto
	 */
	'emailType': Emails;
	/**
	 *
	 * @type {string}
	 * @memberof EmailWebhooksDto
	 */
	'webhook': string;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum Emails {
	BASE_COMMERCE = 'BASE_COMMERCE',
	ORDER_REFUNDED = 'ORDER_REFUNDED',
	ORDER_SHIPPED = 'ORDER_SHIPPED',
	ORDER_CANCELED = 'ORDER_CANCELED',
	ORDER_COMPLETED = 'ORDER_COMPLETED',
	ORDER_DETAILS = 'ORDER_DETAILS',
	ORDER_ON_HOLD = 'ORDER_ON_HOLD',
	ORDER_PAYMENT_PENDING = 'ORDER_PAYMENT_PENDING',
	ORDER_PROCESSING = 'ORDER_PROCESSING',
	ORDER_CANCELED_ADMIN = 'ORDER_CANCELED_ADMIN',
	LOW_STOCK_ADMIN = 'LOW_STOCK_ADMIN',
	ORDER_CREATED_ADMIN = 'ORDER_CREATED_ADMIN',
	ORDER_FAILED = 'ORDER_FAILED',
	ORDER_PAYMENT_PENDING_ADMIN = 'ORDER_PAYMENT_PENDING_ADMIN',
	VERIFY_EMAIL = 'VERIFY_EMAIL',
	RESET_PASSWORD = 'RESET_PASSWORD'
}


/**
 *
 * @export
 * @enum {string}
 */

export enum InputType {
	DROPDOWN = 'DROPDOWN',
	MULTISELECT = 'MULTISELECT',
	FILE = 'FILE',
	REFERENCE = 'REFERENCE',
	NUMERIC = 'NUMERIC',
	RICH_TEXT = 'RICH_TEXT',
	SWATCH = 'SWATCH',
	BOOLEAN = 'BOOLEAN',
	DATE = 'DATE',
	DATE_TIME = 'DATE_TIME'
}


/**
 *
 * @export
 * @enum {string}
 */

export enum LanguageCode {
	en = 'en',
	el = 'el',
	fr = 'fr',
	es = 'es',
	it = 'it',
	de = 'de',
	ru = 'ru'
}


/**
 *
 * @export
 * @interface LoginUserDto
 */
export interface LoginUserDto {
	/**
	 *
	 * @type {string}
	 * @memberof LoginUserDto
	 */
	'email': string;
	/**
	 *
	 * @type {string}
	 * @memberof LoginUserDto
	 */
	'password': string;
}
/**
 *
 * @export
 * @interface MediaDto
 */
export interface MediaDto {
	/**
	 *
	 * @type {number}
	 * @memberof MediaDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof MediaDto
	 */
	'mimeType': string;
	/**
	 *
	 * @type {string}
	 * @memberof MediaDto
	 */
	'name': string;
	/**
	 *
	 * @type {string}
	 * @memberof MediaDto
	 */
	'slug': string;
	/**
	 *
	 * @type {string}
	 * @memberof MediaDto
	 */
	'url': string;
	/**
	 *
	 * @type {string}
	 * @memberof MediaDto
	 */
	'thumbnailUrl': string | null;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof MediaDto
	 */
	'alt': TranslatableDto;
	/**
	 *
	 * @type {number}
	 * @memberof MediaDto
	 */
	'byteSize': number;
	/**
	 *
	 * @type {string}
	 * @memberof MediaDto
	 */
	'created': string;
}
/**
 *
 * @export
 * @interface MediaListPaginated
 */
export interface MediaListPaginated {
	/**
	 *
	 * @type {Array<MediaDto>}
	 * @memberof MediaListPaginated
	 */
	'items': Array<MediaDto>;
	/**
	 *
	 * @type {number}
	 * @memberof MediaListPaginated
	 */
	'pageNumber': number;
	/**
	 *
	 * @type {number}
	 * @memberof MediaListPaginated
	 */
	'pageSize': number;
	/**
	 *
	 * @type {number}
	 * @memberof MediaListPaginated
	 */
	'totalCount': number;
}
/**
 *
 * @export
 * @interface OrderDto
 */
export interface OrderDto {
	/**
	 *
	 * @type {number}
	 * @memberof OrderDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof OrderDto
	 */
	'created': string;
	/**
	 *
	 * @type {string}
	 * @memberof OrderDto
	 */
	'updatedAt': string;
	/**
	 * shipping tracking id
	 * @type {string}
	 * @memberof OrderDto
	 */
	'trackingClientId': string;
	/**
	 *
	 * @type {string}
	 * @memberof OrderDto
	 */
	'userEmail': string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof OrderDto
	 */
	'billingAddress'?: AddressDto;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof OrderDto
	 */
	'shippingAddress'?: AddressDto;
	/**
	 *
	 * @type {number}
	 * @memberof OrderDto
	 */
	'totalNetAmount': number;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof OrderDto
	 */
	'languageCode': LanguageCode;
	/**
	 *
	 * @type {number}
	 * @memberof OrderDto
	 */
	'shippingPriceGrossAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderDto
	 */
	'totalGrossAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderDto
	 */
	'shippingPriceNetAmount': number;
	/**
	 *
	 * @type {OrderStatus}
	 * @memberof OrderDto
	 */
	'status': OrderStatus;
	/**
	 *
	 * @type {string}
	 * @memberof OrderDto
	 */
	'shippingMethodName'?: string;
	/**
	 *
	 * @type {boolean}
	 * @memberof OrderDto
	 */
	'displayGrossPrices': boolean;
	/**
	 *
	 * @type {string}
	 * @memberof OrderDto
	 */
	'customerNote': string;
	/**
	 *
	 * @type {number}
	 * @memberof OrderDto
	 */
	'weight': number;
	/**
	 *
	 * @type {string}
	 * @memberof OrderDto
	 */
	'checkoutToken': string;
	/**
	 *
	 * @type {string}
	 * @memberof OrderDto
	 */
	'currency': string;
	/**
	 *
	 * @type {object}
	 * @memberof OrderDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof OrderDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof OrderDto
	 */
	'redirectUrl'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof OrderDto
	 */
	'shippingTaxRate': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderDto
	 */
	'undiscountedTotalGrossAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderDto
	 */
	'undiscountedTotalNetAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderDto
	 */
	'totalPaidAmount': number;
	/**
	 *
	 * @type {string}
	 * @memberof OrderDto
	 */
	'origin': string;
	/**
	 *
	 * @type {Array<OrderLineDto>}
	 * @memberof OrderDto
	 */
	'lines': Array<OrderLineDto>;
	/**
	 *
	 * @type {PaymentDto}
	 * @memberof OrderDto
	 */
	'payment': PaymentDto;
	/**
	 *
	 * @type {Array<OrderEventDto>}
	 * @memberof OrderDto
	 */
	'events': Array<OrderEventDto>;
}
/**
 *
 * @export
 * @interface OrderEventDto
 */
export interface OrderEventDto {
	/**
	 *
	 * @type {string}
	 * @memberof OrderEventDto
	 */
	'date': string;
	/**
	 *
	 * @type {OrderEventsEnum}
	 * @memberof OrderEventDto
	 */
	'eventType': OrderEventsEnum;
	/**
	 *
	 * @type {object}
	 * @memberof OrderEventDto
	 */
	'parameters': object;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum OrderEventsEnum {
	DRAFT_CREATED = 'DRAFT_CREATED',
	DRAFT_CREATED_FROM_REPLACE = 'DRAFT_CREATED_FROM_REPLACE',
	ADDED_PRODUCTS = 'ADDED_PRODUCTS',
	REMOVED_PRODUCTS = 'REMOVED_PRODUCTS',
	PLACED = 'PLACED',
	PLACED_FROM_DRAFT = 'PLACED_FROM_DRAFT',
	OVERSOLD_ITEMS = 'OVERSOLD_ITEMS',
	CANCELED = 'CANCELED',
	ORDER_MARKED_AS_PAID = 'ORDER_MARKED_AS_PAID',
	ORDER_FULLY_PAID = 'ORDER_FULLY_PAID',
	ORDER_REPLACEMENT_CREATED = 'ORDER_REPLACEMENT_CREATED',
	ORDER_DISCOUNT_ADDED = 'ORDER_DISCOUNT_ADDED',
	ORDER_DISCOUNT_AUTOMATICALLY_UPDATED = 'ORDER_DISCOUNT_AUTOMATICALLY_UPDATED',
	ORDER_DISCOUNT_UPDATED = 'ORDER_DISCOUNT_UPDATED',
	ORDER_DISCOUNT_DELETED = 'ORDER_DISCOUNT_DELETED',
	ORDER_LINE_DISCOUNT_UPDATED = 'ORDER_LINE_DISCOUNT_UPDATED',
	ORDER_LINE_DISCOUNT_REMOVED = 'ORDER_LINE_DISCOUNT_REMOVED',
	ORDER_LINE_PRODUCT_DELETED = 'ORDER_LINE_PRODUCT_DELETED',
	ORDER_LINE_VARIANT_DELETED = 'ORDER_LINE_VARIANT_DELETED',
	UPDATED_ADDRESS = 'UPDATED_ADDRESS',
	EMAIL_SENT = 'EMAIL_SENT',
	CONFIRMED = 'CONFIRMED',
	PAYMENT_AUTHORIZED = 'PAYMENT_AUTHORIZED',
	PAYMENT_CAPTURED = 'PAYMENT_CAPTURED',
	EXTERNAL_SERVICE_NOTIFICATION = 'EXTERNAL_SERVICE_NOTIFICATION',
	PAYMENT_REFUNDED = 'PAYMENT_REFUNDED',
	PAYMENT_VOIDED = 'PAYMENT_VOIDED',
	PAYMENT_FAILED = 'PAYMENT_FAILED',
	INVOICE_REQUESTED = 'INVOICE_REQUESTED',
	INVOICE_GENERATED = 'INVOICE_GENERATED',
	INVOICE_UPDATED = 'INVOICE_UPDATED',
	INVOICE_SENT = 'INVOICE_SENT',
	FULFILLMENT_CANCELED = 'FULFILLMENT_CANCELED',
	FULFILLMENT_RESTOCKED_ITEMS = 'FULFILLMENT_RESTOCKED_ITEMS',
	FULFILLMENT_FULFILLED_ITEMS = 'FULFILLMENT_FULFILLED_ITEMS',
	FULFILLMENT_REFUNDED = 'FULFILLMENT_REFUNDED',
	FULFILLMENT_RETURNED = 'FULFILLMENT_RETURNED',
	FULFILLMENT_REPLACED = 'FULFILLMENT_REPLACED',
	FULFILLMENT_AWAITS_APPROVAL = 'FULFILLMENT_AWAITS_APPROVAL',
	SHIPPED = 'SHIPPED',
	TRACKING_UPDATED = 'TRACKING_UPDATED',
	NOTE_ADDED = 'NOTE_ADDED',
	ON_HOLD = 'ON_HOLD',
	OTHER = 'OTHER'
}


/**
 *
 * @export
 * @interface OrderLineDto
 */
export interface OrderLineDto {
	/**
	 *
	 * @type {number}
	 * @memberof OrderLineDto
	 */
	'id': number;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof OrderLineDto
	 */
	'productName': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof OrderLineDto
	 */
	'productSku'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof OrderLineDto
	 */
	'quantity': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderLineDto
	 */
	'unitPriceNetAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderLineDto
	 */
	'unitPriceGrossAmount': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof OrderLineDto
	 */
	'isShippingRequired': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof OrderLineDto
	 */
	'quantityFulfilled': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderLineDto
	 */
	'taxRate': number;
	/**
	 *
	 * @type {string}
	 * @memberof OrderLineDto
	 */
	'currency': string;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof OrderLineDto
	 */
	'variantName': TranslatableDto;
	/**
	 *
	 * @type {number}
	 * @memberof OrderLineDto
	 */
	'totalPriceGrossAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderLineDto
	 */
	'totalPriceNetAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderLineDto
	 */
	'unitDiscountAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderLineDto
	 */
	'unitDiscountValue': number;
	/**
	 *
	 * @type {string}
	 * @memberof OrderLineDto
	 */
	'unitDiscountReason'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof OrderLineDto
	 */
	'unitDiscountType': string;
	/**
	 *
	 * @type {number}
	 * @memberof OrderLineDto
	 */
	'undiscountedTotalPriceGrossAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderLineDto
	 */
	'undiscountedTotalPriceNetAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderLineDto
	 */
	'undiscountedUnitPriceGrossAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderLineDto
	 */
	'undiscountedUnitPriceNetAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderLineDto
	 */
	'saleId'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof OrderLineDto
	 */
	'voucherCode'?: string;
}
/**
 *
 * @export
 * @interface OrderListPaginated
 */
export interface OrderListPaginated {
	/**
	 *
	 * @type {Array<OrderDto>}
	 * @memberof OrderListPaginated
	 */
	'items': Array<OrderDto>;
	/**
	 *
	 * @type {number}
	 * @memberof OrderListPaginated
	 */
	'pageNumber': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderListPaginated
	 */
	'pageSize': number;
	/**
	 *
	 * @type {number}
	 * @memberof OrderListPaginated
	 */
	'totalCount': number;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum OrderStatus {
	DRAFT = 'DRAFT',
	ON_HOLD = 'ON_HOLD',
	UNCONFIRMED = 'UNCONFIRMED',
	UNFULFILLED = 'UNFULFILLED',
	PARTIALLY_FULFILLED = 'PARTIALLY_FULFILLED',
	PARTIALLY_RETURNED = 'PARTIALLY_RETURNED',
	RETURNED = 'RETURNED',
	FULFILLED = 'FULFILLED',
	CANCELED = 'CANCELED'
}


/**
 *
 * @export
 * @interface PaymentDto
 */
export interface PaymentDto {
	/**
	 *
	 * @type {number}
	 * @memberof PaymentDto
	 */
	'id': number;
	/**
	 *
	 * @type {PaymentMethod}
	 * @memberof PaymentDto
	 */
	'method': PaymentMethod;
	/**
	 *
	 * @type {PaymentStatus}
	 * @memberof PaymentDto
	 */
	'status': PaymentStatus;
	/**
	 *
	 * @type {string}
	 * @memberof PaymentDto
	 */
	'dateCreated': string;
	/**
	 *
	 * @type {string}
	 * @memberof PaymentDto
	 */
	'dateUpdated': string;
	/**
	 *
	 * @type {number}
	 * @memberof PaymentDto
	 */
	'supportRefId': number;
	/**
	 *
	 * @type {number}
	 * @memberof PaymentDto
	 */
	'amount': number;
	/**
	 *
	 * @type {string}
	 * @memberof PaymentDto
	 */
	'customerId': string;
	/**
	 *
	 * @type {string}
	 * @memberof PaymentDto
	 */
	'description': string;
	/**
	 *
	 * @type {string}
	 * @memberof PaymentDto
	 */
	'currency': string;
	/**
	 *
	 * @type {string}
	 * @memberof PaymentDto
	 */
	'referenceId': string;
	/**
	 *
	 * @type {string}
	 * @memberof PaymentDto
	 */
	'transactionTicket': string;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum PaymentMethod {
	CARD = 'CARD',
	CASH_ON_DELIVERY = 'CASH_ON_DELIVERY',
	BANK_TRANSFER = 'BANK_TRANSFER'
}


/**
 *
 * @export
 * @enum {string}
 */

export enum PaymentStatus {
	PROCESSING = 'PROCESSING',
	CAPTURED = 'CAPTURED',
	ERROR = 'ERROR',
	PENDING = 'PENDING',
	CANCELED = 'CANCELED',
	REFUSED = 'REFUSED',
	AUTHORIZED = 'AUTHORIZED'
}


/**
 *
 * @export
 * @interface ProductAttributeDto
 */
export interface ProductAttributeDto {
	/**
	 *
	 * @type {number}
	 * @memberof ProductAttributeDto
	 */
	'id': number;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof ProductAttributeDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof ProductAttributeDto
	 */
	'slug': string;
	/**
	 *
	 * @type {object}
	 * @memberof ProductAttributeDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof ProductAttributeDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductAttributeDto
	 */
	'availableInGrid': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductAttributeDto
	 */
	'visibleInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductAttributeDto
	 */
	'filterableInDashboard': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductAttributeDto
	 */
	'filterableInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductAttributeDto
	 */
	'valueRequired': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof ProductAttributeDto
	 */
	'storefrontSearchPosition': number;
	/**
	 *
	 * @type {InputType}
	 * @memberof ProductAttributeDto
	 */
	'inputType': InputType;
	/**
	 *
	 * @type {Unit}
	 * @memberof ProductAttributeDto
	 */
	'unit'?: Unit;
	/**
	 *
	 * @type {Array<AttributeValueDto>}
	 * @memberof ProductAttributeDto
	 */
	'values': Array<AttributeValueDto>;
}
/**
 *
 * @export
 * @interface ProductDto
 */
export interface ProductDto {
	/**
	 *
	 * @type {number}
	 * @memberof ProductDto
	 */
	'id': number;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof ProductDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof ProductDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {object}
	 * @memberof ProductDto
	 */
	'descriptionRaw': object;
	/**
	 *
	 * @type {string}
	 * @memberof ProductDto
	 */
	'updatedAt': string;
	/**
	 *
	 * @type {string}
	 * @memberof ProductDto
	 */
	'seoDescription': string;
	/**
	 *
	 * @type {string}
	 * @memberof ProductDto
	 */
	'seoTitle': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductDto
	 */
	'chargeTaxes': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof ProductDto
	 */
	'weight': number;
	/**
	 *
	 * @type {object}
	 * @memberof ProductDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof ProductDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof ProductDto
	 */
	'slug': string;
	/**
	 *
	 * @type {number}
	 * @memberof ProductDto
	 */
	'defaultVariantId': number;
	/**
	 *
	 * @type {string}
	 * @memberof ProductDto
	 */
	'descriptionPlaintext': string;
	/**
	 *
	 * @type {number}
	 * @memberof ProductDto
	 */
	'rating': number;
	/**
	 *
	 * @type {string}
	 * @memberof ProductDto
	 */
	'created': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductDto
	 */
	'isPublished': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductDto
	 */
	'isVisibleInListings': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductDto
	 */
	'isAvailableForPurchase': boolean;
	/**
	 *
	 * @type {string}
	 * @memberof ProductDto
	 */
	'currency': string;
	/**
	 *
	 * @type {number}
	 * @memberof ProductDto
	 */
	'minPrice': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductDto
	 */
	'productTypeId': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductDto
	 */
	'categoryId': number;
	/**
	 *
	 * @type {Array<ProductAttributeDto>}
	 * @memberof ProductDto
	 */
	'attributes': Array<ProductAttributeDto>;
	/**
	 *
	 * @type {Array<SortableMediaDto>}
	 * @memberof ProductDto
	 */
	'productMedia': Array<SortableMediaDto>;
	/**
	 *
	 * @type {Array<CollectionDto>}
	 * @memberof ProductDto
	 */
	'collections': Array<CollectionDto>;
	/**
	 *
	 * @type {ProductVariantDto}
	 * @memberof ProductDto
	 */
	'defaultVariant'?: ProductVariantDto;
}
/**
 *
 * @export
 * @interface ProductFilterResultDto
 */
export interface ProductFilterResultDto {
	/**
	 *
	 * @type {Array<AttributeDrillDownDto>}
	 * @memberof ProductFilterResultDto
	 */
	'attributeDrillDown': Array<AttributeDrillDownDto>;
	/**
	 *
	 * @type {number}
	 * @memberof ProductFilterResultDto
	 */
	'minPrice': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductFilterResultDto
	 */
	'maxPrice': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductFilterResultDto
	 */
	'selectedMinPrice': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductFilterResultDto
	 */
	'selectedMaxPrice': number;
	/**
	 *
	 * @type {Array<ProductDto>}
	 * @memberof ProductFilterResultDto
	 */
	'items': Array<ProductDto>;
	/**
	 *
	 * @type {number}
	 * @memberof ProductFilterResultDto
	 */
	'pageNumber': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductFilterResultDto
	 */
	'pageSize': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductFilterResultDto
	 */
	'totalCount': number;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum ProductSorting {
	NAME_ASC = 'NAME_ASC',
	NAME_DESC = 'NAME_DESC',
	PRICE_ASC = 'PRICE_ASC',
	PRICE_DESC = 'PRICE_DESC',
	DATE_CREATED_ASC = 'DATE_CREATED_ASC',
	DATE_CREATED_DESC = 'DATE_CREATED_DESC',
	RATING_ASC = 'RATING_ASC',
	RATING_DESC = 'RATING_DESC'
}


/**
 *
 * @export
 * @interface ProductTypeAttributeDto
 */
export interface ProductTypeAttributeDto {
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeAttributeDto
	 */
	'id': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeAttributeDto
	 */
	'sortOrder': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeAttributeDto
	 */
	'attributeId': number;
}
/**
 *
 * @export
 * @interface ProductTypeDto
 */
export interface ProductTypeDto {
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof ProductTypeDto
	 */
	'name': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductTypeDto
	 */
	'hasVariants': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductTypeDto
	 */
	'isShippingRequired': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeDto
	 */
	'weight': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductTypeDto
	 */
	'isDigital': boolean;
	/**
	 *
	 * @type {object}
	 * @memberof ProductTypeDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof ProductTypeDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof ProductTypeDto
	 */
	'slug': string;
	/**
	 *
	 * @type {Array<ProductTypeAttributeDto>}
	 * @memberof ProductTypeDto
	 */
	'attributes': Array<ProductTypeAttributeDto>;
	/**
	 *
	 * @type {Array<ProductTypeVariantAttributeDto>}
	 * @memberof ProductTypeDto
	 */
	'variantAttributes': Array<ProductTypeVariantAttributeDto>;
}
/**
 *
 * @export
 * @interface ProductTypeVariantAttributeDto
 */
export interface ProductTypeVariantAttributeDto {
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeVariantAttributeDto
	 */
	'id': number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeVariantAttributeDto
	 */
	'sortOrder': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductTypeVariantAttributeDto
	 */
	'variantSelection': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeVariantAttributeDto
	 */
	'attributeId': number;
}
/**
 *
 * @export
 * @interface ProductVariantDto
 */
export interface ProductVariantDto {
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof ProductVariantDto
	 */
	'sku': string;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof ProductVariantDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantDto
	 */
	'weight'?: number;
	/**
	 *
	 * @type {object}
	 * @memberof ProductVariantDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof ProductVariantDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantDto
	 */
	'sortOrder'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof ProductVariantDto
	 */
	'created': string;
	/**
	 *
	 * @type {string}
	 * @memberof ProductVariantDto
	 */
	'updatedAt': string;
	/**
	 *
	 * @type {string}
	 * @memberof ProductVariantDto
	 */
	'currency': string;
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantDto
	 */
	'priceAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantDto
	 */
	'discountedPrice'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantDto
	 */
	'stock': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductVariantDto
	 */
	'trackInventory': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantDto
	 */
	'stockThreshold'?: number;
	/**
	 *
	 * @type {Array<ProductAttributeDto>}
	 * @memberof ProductVariantDto
	 */
	'attributes': Array<ProductAttributeDto>;
	/**
	 *
	 * @type {Array<SortableMediaDto>}
	 * @memberof ProductVariantDto
	 */
	'productMedia': Array<SortableMediaDto>;
}
/**
 *
 * @export
 * @interface RegisterUserDto
 */
export interface RegisterUserDto {
	/**
	 *
	 * @type {string}
	 * @memberof RegisterUserDto
	 */
	'email': string;
	/**
	 *
	 * @type {string}
	 * @memberof RegisterUserDto
	 */
	'firstName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof RegisterUserDto
	 */
	'lastName'?: string;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof RegisterUserDto
	 */
	'languageCode': LanguageCode;
	/**
	 *
	 * @type {string}
	 * @memberof RegisterUserDto
	 */
	'password': string;
}
/**
 *
 * @export
 * @interface RequestUserPasswordChangeDto
 */
export interface RequestUserPasswordChangeDto {
	/**
	 *
	 * @type {string}
	 * @memberof RequestUserPasswordChangeDto
	 */
	'email': string;
}
/**
 *
 * @export
 * @interface SettingsDto
 */
export interface SettingsDto {
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'siteName': string;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof SettingsDto
	 */
	'adminLanguage': LanguageCode;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'adminEmail': string;
	/**
	 *
	 * @type {Array<LanguageCode>}
	 * @memberof SettingsDto
	 */
	'availableLanguages': Array<LanguageCode>;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'baseUrl': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof SettingsDto
	 */
	'canRegister': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof SettingsDto
	 */
	'globalStockThreshold': number;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof SettingsDto
	 */
	'defaultLanguage': LanguageCode;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'senderEmail': string;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'senderName': string;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'seoTitle': string;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'seoDescription': string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof SettingsDto
	 */
	'shopAddress'?: AddressDto;
	/**
	 *
	 * @type {MediaDto}
	 * @memberof SettingsDto
	 */
	'siteLogo'?: MediaDto;
	/**
	 *
	 * @type {Array<EmailWebhooksDto>}
	 * @memberof SettingsDto
	 */
	'emailWebhooks': Array<EmailWebhooksDto>;
}
/**
 *
 * @export
 * @interface ShippingMethodDto
 */
export interface ShippingMethodDto {
	/**
	 *
	 * @type {number}
	 * @memberof ShippingMethodDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof ShippingMethodDto
	 */
	'name': string;
	/**
	 *
	 * @type {object}
	 * @memberof ShippingMethodDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof ShippingMethodDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof ShippingMethodDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {Array<ShippingZoneDto>}
	 * @memberof ShippingMethodDto
	 */
	'shippingZones': Array<ShippingZoneDto>;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum ShippingMethodType {
	FLAT_RATE = 'FLAT_RATE',
	FREE_SHIPPING = 'FREE_SHIPPING',
	LOCAL_PICKUP = 'LOCAL_PICKUP',
	BY_WEIGHT = 'BY_WEIGHT'
}


/**
 *
 * @export
 * @interface ShippingRateDto
 */
export interface ShippingRateDto {
	/**
	 *
	 * @type {number}
	 * @memberof ShippingRateDto
	 */
	'id': number;
	/**
	 *
	 * @type {number}
	 * @memberof ShippingRateDto
	 */
	'maximumOrderWeight'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof ShippingRateDto
	 */
	'minimumOrderWeight'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof ShippingRateDto
	 */
	'maximumPrice'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof ShippingRateDto
	 */
	'minimumPrice'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof ShippingRateDto
	 */
	'rate': number;
	/**
	 *
	 * @type {ShippingMethodType}
	 * @memberof ShippingRateDto
	 */
	'shippingType': ShippingMethodType;
	/**
	 *
	 * @type {number}
	 * @memberof ShippingRateDto
	 */
	'maximumDeliveryDays'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof ShippingRateDto
	 */
	'minimumDeliveryDays'?: number;
}
/**
 *
 * @export
 * @interface ShippingZoneDto
 */
export interface ShippingZoneDto {
	/**
	 *
	 * @type {number}
	 * @memberof ShippingZoneDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof ShippingZoneDto
	 */
	'name': string;
	/**
	 *
	 * @type {ShippingZoneLocationType}
	 * @memberof ShippingZoneDto
	 */
	'locationType': ShippingZoneLocationType;
	/**
	 *
	 * @type {Array<string>}
	 * @memberof ShippingZoneDto
	 */
	'locationCodes': Array<string>;
	/**
	 *
	 * @type {object}
	 * @memberof ShippingZoneDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof ShippingZoneDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {Array<ShippingRateDto>}
	 * @memberof ShippingZoneDto
	 */
	'shippingRates': Array<ShippingRateDto>;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum ShippingZoneLocationType {
	COUNTRY = 'COUNTRY',
	STATE = 'STATE',
	CONTINENT = 'CONTINENT',
	POSTAL = 'POSTAL'
}


/**
 *
 * @export
 * @interface SortableMediaDto
 */
export interface SortableMediaDto {
	/**
	 *
	 * @type {number}
	 * @memberof SortableMediaDto
	 */
	'sortOrder': number;
	/**
	 *
	 * @type {MediaDto}
	 * @memberof SortableMediaDto
	 */
	'media': MediaDto;
}
/**
 *
 * @export
 * @interface SuccessLoginResponse
 */
export interface SuccessLoginResponse {
	/**
	 *
	 * @type {string}
	 * @memberof SuccessLoginResponse
	 */
	'access_token': string;
}
/**
 *
 * @export
 * @interface TranslatableDto
 */
export interface TranslatableDto {
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'de'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'it'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'fr'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'es'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'el'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'en'?: string;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum Unit {
	CM = 'CM',
	M = 'M',
	KM = 'KM',
	FT = 'FT',
	YD = 'YD',
	INCH = 'INCH',
	SQ_CM = 'SQ_CM',
	SQ_M = 'SQ_M',
	SQ_KM = 'SQ_KM',
	SQ_FT = 'SQ_FT',
	SQ_YD = 'SQ_YD',
	SQ_INCH = 'SQ_INCH',
	CUBIC_MILLIMETER = 'CUBIC_MILLIMETER',
	CUBIC_CENTIMETER = 'CUBIC_CENTIMETER',
	CUBIC_DECIMETER = 'CUBIC_DECIMETER',
	CUBIC_METER = 'CUBIC_METER',
	LITER = 'LITER',
	CUBIC_FOOT = 'CUBIC_FOOT',
	CUBIC_INCH = 'CUBIC_INCH',
	CUBIC_YARD = 'CUBIC_YARD',
	QT = 'QT',
	PINT = 'PINT',
	FL_OZ = 'FL_OZ',
	ACRE_IN = 'ACRE_IN',
	ACRE_FT = 'ACRE_FT',
	G = 'G',
	LB = 'LB',
	OZ = 'OZ',
	KG = 'KG',
	TONNE = 'TONNE'
}


/**
 *
 * @export
 * @interface UpdateAttributeDto
 */
export interface UpdateAttributeDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateAttributeDto
	 */
	'name'?: TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateAttributeDto
	 */
	'slug'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateAttributeDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateAttributeDto
	 */
	'privateMetadata'?: object;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateAttributeDto
	 */
	'availableInGrid'?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateAttributeDto
	 */
	'visibleInStorefront'?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateAttributeDto
	 */
	'filterableInDashboard'?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateAttributeDto
	 */
	'filterableInStorefront'?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateAttributeDto
	 */
	'valueRequired'?: boolean;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateAttributeDto
	 */
	'storefrontSearchPosition'?: number;
	/**
	 *
	 * @type {InputType}
	 * @memberof UpdateAttributeDto
	 */
	'inputType'?: InputType;
	/**
	 *
	 * @type {Unit}
	 * @memberof UpdateAttributeDto
	 */
	'unit'?: Unit;
}
/**
 *
 * @export
 * @interface UpdateAttributeValueDto
 */
export interface UpdateAttributeValueDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateAttributeValueDto
	 */
	'name'?: TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateAttributeValueDto
	 */
	'slug'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateAttributeValueDto
	 */
	'sortOrder'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateAttributeValueDto
	 */
	'value'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateAttributeValueDto
	 */
	'fileUrl'?: string;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateAttributeValueDto
	 */
	'richText'?: TranslatableDto;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateAttributeValueDto
	 */
	'boolean'?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateAttributeValueDto
	 */
	'dateTime'?: string;
}
/**
 *
 * @export
 * @interface UpdateCategoryDto
 */
export interface UpdateCategoryDto {
	/**
	 *
	 * @type {object}
	 * @memberof UpdateCategoryDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateCategoryDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCategoryDto
	 */
	'seoTitle': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCategoryDto
	 */
	'seoDescription': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCategoryDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCategoryDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCategoryDto
	 */
	'slug': string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateCategoryDto
	 */
	'parentId'?: number;
}
/**
 *
 * @export
 * @interface UpdateCheckoutDto
 */
export interface UpdateCheckoutDto {
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'email'?: string;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateCheckoutDto
	 */
	'useShippingAsBilling'?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'note'?: string;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof UpdateCheckoutDto
	 */
	'languageCode'?: LanguageCode;
	/**
	 *
	 * @type {PaymentMethod}
	 * @memberof UpdateCheckoutDto
	 */
	'paymentMethod'?: PaymentMethod;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateCheckoutDto
	 */
	'shippingMethodId'?: number;
}
/**
 *
 * @export
 * @interface UpdateCheckoutLineDto
 */
export interface UpdateCheckoutLineDto {
	/**
	 *
	 * @type {number}
	 * @memberof UpdateCheckoutLineDto
	 */
	'quantity': number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateCheckoutLineDto
	 */
	'variantId': number;
}
/**
 *
 * @export
 * @interface UpdateCheckoutVoucherDto
 */
export interface UpdateCheckoutVoucherDto {
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutVoucherDto
	 */
	'voucherCode': string;
}
/**
 *
 * @export
 * @interface UpdateCollectionDto
 */
export interface UpdateCollectionDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCollectionDto
	 */
	'name'?: TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCollectionDto
	 */
	'slug'?: string;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCollectionDto
	 */
	'seoDescription'?: TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCollectionDto
	 */
	'seoTitle'?: TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCollectionDto
	 */
	'description'?: TranslatableDto;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateCollectionDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateCollectionDto
	 */
	'privateMetadata'?: object;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateCollectionDto
	 */
	'backgroundImageId'?: number;
}
/**
 *
 * @export
 * @interface UpdateDiscountDto
 */
export interface UpdateDiscountDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateDiscountDto
	 */
	'name'?: TranslatableDto;
	/**
	 *
	 * @type {DiscountType}
	 * @memberof UpdateDiscountDto
	 */
	'discountType'?: DiscountType;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateDiscountDto
	 */
	'discountValue'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateDiscountDto
	 */
	'endDate'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateDiscountDto
	 */
	'startDate'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateDiscountDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateDiscountDto
	 */
	'privateMetadata'?: object;
}
/**
 *
 * @export
 * @interface UpdateDiscountVoucherDto
 */
export interface UpdateDiscountVoucherDto {
	/**
	 *
	 * @type {DiscountVoucherType}
	 * @memberof UpdateDiscountVoucherDto
	 */
	'voucherType'?: DiscountVoucherType;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateDiscountVoucherDto
	 */
	'name'?: TranslatableDto;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateDiscountVoucherDto
	 */
	'usageLimit'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateDiscountVoucherDto
	 */
	'startDate'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateDiscountVoucherDto
	 */
	'endDate'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateDiscountVoucherDto
	 */
	'discountValue'?: number;
	/**
	 *
	 * @type {DiscountType}
	 * @memberof UpdateDiscountVoucherDto
	 */
	'discountValueType'?: DiscountType;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateDiscountVoucherDto
	 */
	'applyOncePerOrder'?: boolean;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateDiscountVoucherDto
	 */
	'minCheckoutItemsQuantity'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateDiscountVoucherDto
	 */
	'minSpentAmount'?: number;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateDiscountVoucherDto
	 */
	'applyOncePerCustomer'?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateDiscountVoucherDto
	 */
	'onlyForStaff'?: boolean;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateDiscountVoucherDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateDiscountVoucherDto
	 */
	'privateMetadata'?: object;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateDiscountVoucherDto
	 */
	'code'?: string;
}
/**
 *
 * @export
 * @interface UpdateOrderDto
 */
export interface UpdateOrderDto {
	/**
	 * shipping tracking id
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'trackingClientId'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'userEmail'?: string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UpdateOrderDto
	 */
	'billingAddress'?: AddressDto;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UpdateOrderDto
	 */
	'shippingAddress'?: AddressDto;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'totalNetAmount'?: number;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof UpdateOrderDto
	 */
	'languageCode'?: LanguageCode;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'shippingPriceGrossAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'totalGrossAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'shippingPriceNetAmount'?: number;
	/**
	 *
	 * @type {OrderStatus}
	 * @memberof UpdateOrderDto
	 */
	'status'?: OrderStatus;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'shippingMethodName'?: string;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateOrderDto
	 */
	'displayGrossPrices'?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'customerNote'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'weight'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'checkoutToken'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'currency'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateOrderDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateOrderDto
	 */
	'privateMetadata'?: object;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'redirectUrl'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'shippingTaxRate'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'undiscountedTotalGrossAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'undiscountedTotalNetAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'totalPaidAmount'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'origin'?: string;
	/**
	 *
	 * @type {Array<OrderLineDto>}
	 * @memberof UpdateOrderDto
	 */
	'lines'?: Array<OrderLineDto>;
	/**
	 *
	 * @type {PaymentDto}
	 * @memberof UpdateOrderDto
	 */
	'payment'?: PaymentDto;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'userId'?: number;
}
/**
 *
 * @export
 * @interface UpdateOrderStatusDto
 */
export interface UpdateOrderStatusDto {
	/**
	 *
	 * @type {OrderStatus}
	 * @memberof UpdateOrderStatusDto
	 */
	'status': OrderStatus;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateOrderStatusDto
	 */
	'notifyCustomer': boolean;
}
/**
 *
 * @export
 * @interface UpdatePaymentDto
 */
export interface UpdatePaymentDto {
	/**
	 *
	 * @type {PaymentStatus}
	 * @memberof UpdatePaymentDto
	 */
	'status'?: PaymentStatus;
	/**
	 *
	 * @type {number}
	 * @memberof UpdatePaymentDto
	 */
	'supportRefId'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdatePaymentDto
	 */
	'referenceId'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdatePaymentDto
	 */
	'transactionTicket'?: string;
}
/**
 *
 * @export
 * @interface UpdatePaymentStatusDto
 */
export interface UpdatePaymentStatusDto {
	/**
	 *
	 * @type {PaymentStatus}
	 * @memberof UpdatePaymentStatusDto
	 */
	'status': PaymentStatus;
}
/**
 *
 * @export
 * @interface UpdateShippingMethodDto
 */
export interface UpdateShippingMethodDto {
	/**
	 *
	 * @type {string}
	 * @memberof UpdateShippingMethodDto
	 */
	'name'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateShippingMethodDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateShippingMethodDto
	 */
	'privateMetadata'?: object;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateShippingMethodDto
	 */
	'description'?: TranslatableDto;
	/**
	 *
	 * @type {Array<CreateShippingZoneDto>}
	 * @memberof UpdateShippingMethodDto
	 */
	'shippingZones'?: Array<CreateShippingZoneDto>;
}
/**
 *
 * @export
 * @interface UpdateShippingRateDto
 */
export interface UpdateShippingRateDto {
	/**
	 *
	 * @type {number}
	 * @memberof UpdateShippingRateDto
	 */
	'maximumOrderWeight'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateShippingRateDto
	 */
	'minimumOrderWeight'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateShippingRateDto
	 */
	'maximumPrice'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateShippingRateDto
	 */
	'minimumPrice'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateShippingRateDto
	 */
	'rate'?: number;
	/**
	 *
	 * @type {ShippingMethodType}
	 * @memberof UpdateShippingRateDto
	 */
	'shippingType'?: ShippingMethodType;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateShippingRateDto
	 */
	'maximumDeliveryDays'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateShippingRateDto
	 */
	'minimumDeliveryDays'?: number;
}
/**
 *
 * @export
 * @interface UpdateShippingZoneDto
 */
export interface UpdateShippingZoneDto {
	/**
	 *
	 * @type {string}
	 * @memberof UpdateShippingZoneDto
	 */
	'name'?: string;
	/**
	 *
	 * @type {ShippingZoneLocationType}
	 * @memberof UpdateShippingZoneDto
	 */
	'locationType'?: ShippingZoneLocationType;
	/**
	 *
	 * @type {Array<string>}
	 * @memberof UpdateShippingZoneDto
	 */
	'locationCodes'?: Array<string>;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateShippingZoneDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateShippingZoneDto
	 */
	'privateMetadata'?: object;
	/**
	 *
	 * @type {Array<ShippingRateDto>}
	 * @memberof UpdateShippingZoneDto
	 */
	'shippingRates'?: Array<ShippingRateDto>;
}
/**
 *
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
	/**
	 *
	 * @type {string}
	 * @memberof UpdateUserDto
	 */
	'email'?: string;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateUserDto
	 */
	'isAdmin'?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateUserDto
	 */
	'isStaff'?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateUserDto
	 */
	'isActive'?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateUserDto
	 */
	'notes'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateUserDto
	 */
	'firstName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateUserDto
	 */
	'lastName'?: string;
	/**
	 *
	 * @type {MediaDto}
	 * @memberof UpdateUserDto
	 */
	'avatar'?: MediaDto;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateUserDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateUserDto
	 */
	'privateMetadata'?: object;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof UpdateUserDto
	 */
	'languageCode'?: LanguageCode;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateUserDto
	 */
	'password'?: string;
}
/**
 *
 * @export
 * @interface UpdateUserPasswordDto
 */
export interface UpdateUserPasswordDto {
	/**
	 *
	 * @type {string}
	 * @memberof UpdateUserPasswordDto
	 */
	'password': string;
}
/**
 *
 * @export
 * @interface UpdateWebhookSettingsDto
 */
export interface UpdateWebhookSettingsDto {
	/**
	 *
	 * @type {Array<EmailWebhooksDto>}
	 * @memberof UpdateWebhookSettingsDto
	 */
	'emailWebhooks': Array<EmailWebhooksDto>;
}
/**
 *
 * @export
 * @interface UserDto
 */
export interface UserDto {
	/**
	 *
	 * @type {number}
	 * @memberof UserDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'email': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof UserDto
	 */
	'isAdmin': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UserDto
	 */
	'isStaff': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UserDto
	 */
	'isActive': boolean;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'createdAt': string;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'updatedAt': string;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'lastLogin'?: string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UserDto
	 */
	'defaultBillingAddress'?: AddressDto;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UserDto
	 */
	'defaultShippingAddress'?: AddressDto;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'notes'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'firstName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'lastName'?: string;
	/**
	 *
	 * @type {MediaDto}
	 * @memberof UserDto
	 */
	'avatar'?: MediaDto;
	/**
	 *
	 * @type {object}
	 * @memberof UserDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof UserDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof UserDto
	 */
	'languageCode': LanguageCode;
	/**
	 *
	 * @type {Array<AddressDto>}
	 * @memberof UserDto
	 */
	'addresses': Array<AddressDto>;
}

/**
 * AddressApi - axios parameter creator
 * @export
 */
export const AddressApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addressGetById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('addressGetById', 'id', id)
			const localVarPath = `/api/v1/address/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {CreateAddressDto} createAddressDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addressUpdateById: async (id: number, createAddressDto: CreateAddressDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('addressUpdateById', 'id', id)
			// verify required parameter 'createAddressDto' is not null or undefined
			assertParamExists('addressUpdateById', 'createAddressDto', createAddressDto)
			const localVarPath = `/api/v1/address/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createAddressDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * AddressApi - functional programming interface
 * @export
 */
export const AddressApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = AddressApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addressGetById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addressGetById(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {CreateAddressDto} createAddressDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addressUpdateById(id: number, createAddressDto: CreateAddressDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addressUpdateById(id, createAddressDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * AddressApi - factory interface
 * @export
 */
export const AddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = AddressApiFp(configuration)
	return {
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addressGetById(id: number, options?: any): AxiosPromise<AddressDto> {
			return localVarFp.addressGetById(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {CreateAddressDto} createAddressDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addressUpdateById(id: number, createAddressDto: CreateAddressDto, options?: any): AxiosPromise<AddressDto> {
			return localVarFp.addressUpdateById(id, createAddressDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for addressGetById operation in AddressApi.
 * @export
 * @interface AddressApiAddressGetByIdRequest
 */
export interface AddressApiAddressGetByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AddressApiAddressGetById
	 */
	readonly id: number;
}

/**
 * Request parameters for addressUpdateById operation in AddressApi.
 * @export
 * @interface AddressApiAddressUpdateByIdRequest
 */
export interface AddressApiAddressUpdateByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AddressApiAddressUpdateById
	 */
	readonly id: number;

	/**
	 *
	 * @type {CreateAddressDto}
	 * @memberof AddressApiAddressUpdateById
	 */
	readonly createAddressDto: CreateAddressDto;
}

/**
 * AddressApi - object-oriented interface
 * @export
 * @class AddressApi
 * @extends {BaseAPI}
 */
export class AddressApi extends BaseAPI {
	/**
	 *
	 * @param {AddressApiAddressGetByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AddressApi
	 */
	public addressGetById(requestParameters: AddressApiAddressGetByIdRequest, options?: AxiosRequestConfig) {
		return AddressApiFp(this.configuration).addressGetById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AddressApiAddressUpdateByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AddressApi
	 */
	public addressUpdateById(requestParameters: AddressApiAddressUpdateByIdRequest, options?: AxiosRequestConfig) {
		return AddressApiFp(this.configuration).addressUpdateById(requestParameters.id, requestParameters.createAddressDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * AttributeValuesApi - axios parameter creator
 * @export
 */
export const AttributeValuesApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesDeleteValueByID: async (attributeId: number, valueId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributeValuesDeleteValueByID', 'attributeId', attributeId)
			// verify required parameter 'valueId' is not null or undefined
			assertParamExists('attributeValuesDeleteValueByID', 'valueId', valueId)
			const localVarPath = `/api/v1/attributes/{attributeId}/values/{valueId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)))
				.replace(`{${ "valueId" }}`, encodeURIComponent(String(valueId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesGetValueById: async (attributeId: number, valueId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributeValuesGetValueById', 'attributeId', attributeId)
			// verify required parameter 'valueId' is not null or undefined
			assertParamExists('attributeValuesGetValueById', 'valueId', valueId)
			const localVarPath = `/api/v1/attributes/{attributeId}/values/{valueId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)))
				.replace(`{${ "valueId" }}`, encodeURIComponent(String(valueId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesGetValuesOfAttributeById: async (attributeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributeValuesGetValuesOfAttributeById', 'attributeId', attributeId)
			const localVarPath = `/api/v1/attributes/{attributeId}/values`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {UpdateAttributeValueDto} updateAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesPatchValue: async (attributeId: number, valueId: number, updateAttributeValueDto: UpdateAttributeValueDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributeValuesPatchValue', 'attributeId', attributeId)
			// verify required parameter 'valueId' is not null or undefined
			assertParamExists('attributeValuesPatchValue', 'valueId', valueId)
			// verify required parameter 'updateAttributeValueDto' is not null or undefined
			assertParamExists('attributeValuesPatchValue', 'updateAttributeValueDto', updateAttributeValueDto)
			const localVarPath = `/api/v1/attributes/{attributeId}/values/{valueId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)))
				.replace(`{${ "valueId" }}`, encodeURIComponent(String(valueId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateAttributeValueDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {CreateAttributeValueDto} createAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesSave: async (attributeId: number, createAttributeValueDto: CreateAttributeValueDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributeValuesSave', 'attributeId', attributeId)
			// verify required parameter 'createAttributeValueDto' is not null or undefined
			assertParamExists('attributeValuesSave', 'createAttributeValueDto', createAttributeValueDto)
			const localVarPath = `/api/v1/attributes/{attributeId}/values`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createAttributeValueDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {CreateAttributeValueDto} createAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesUpdateValue: async (attributeId: number, valueId: number, createAttributeValueDto: CreateAttributeValueDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributeValuesUpdateValue', 'attributeId', attributeId)
			// verify required parameter 'valueId' is not null or undefined
			assertParamExists('attributeValuesUpdateValue', 'valueId', valueId)
			// verify required parameter 'createAttributeValueDto' is not null or undefined
			assertParamExists('attributeValuesUpdateValue', 'createAttributeValueDto', createAttributeValueDto)
			const localVarPath = `/api/v1/attributes/{attributeId}/values/{valueId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)))
				.replace(`{${ "valueId" }}`, encodeURIComponent(String(valueId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createAttributeValueDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * AttributeValuesApi - functional programming interface
 * @export
 */
export const AttributeValuesApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = AttributeValuesApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributeValuesDeleteValueByID(attributeId: number, valueId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeValueDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributeValuesDeleteValueByID(attributeId, valueId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributeValuesGetValueById(attributeId: number, valueId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeValueDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributeValuesGetValueById(attributeId, valueId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributeValuesGetValuesOfAttributeById(attributeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AttributeValueDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributeValuesGetValuesOfAttributeById(attributeId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {UpdateAttributeValueDto} updateAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributeValuesPatchValue(attributeId: number, valueId: number, updateAttributeValueDto: UpdateAttributeValueDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeValueDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributeValuesPatchValue(attributeId, valueId, updateAttributeValueDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {CreateAttributeValueDto} createAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributeValuesSave(attributeId: number, createAttributeValueDto: CreateAttributeValueDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeValueDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributeValuesSave(attributeId, createAttributeValueDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {CreateAttributeValueDto} createAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributeValuesUpdateValue(attributeId: number, valueId: number, createAttributeValueDto: CreateAttributeValueDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeValueDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributeValuesUpdateValue(attributeId, valueId, createAttributeValueDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * AttributeValuesApi - factory interface
 * @export
 */
export const AttributeValuesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = AttributeValuesApiFp(configuration)
	return {
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesDeleteValueByID(attributeId: number, valueId: number, options?: any): AxiosPromise<AttributeValueDto> {
			return localVarFp.attributeValuesDeleteValueByID(attributeId, valueId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesGetValueById(attributeId: number, valueId: number, options?: any): AxiosPromise<AttributeValueDto> {
			return localVarFp.attributeValuesGetValueById(attributeId, valueId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesGetValuesOfAttributeById(attributeId: number, options?: any): AxiosPromise<Array<AttributeValueDto>> {
			return localVarFp.attributeValuesGetValuesOfAttributeById(attributeId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {UpdateAttributeValueDto} updateAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesPatchValue(attributeId: number, valueId: number, updateAttributeValueDto: UpdateAttributeValueDto, options?: any): AxiosPromise<AttributeValueDto> {
			return localVarFp.attributeValuesPatchValue(attributeId, valueId, updateAttributeValueDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {CreateAttributeValueDto} createAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesSave(attributeId: number, createAttributeValueDto: CreateAttributeValueDto, options?: any): AxiosPromise<AttributeValueDto> {
			return localVarFp.attributeValuesSave(attributeId, createAttributeValueDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {number} valueId
		 * @param {CreateAttributeValueDto} createAttributeValueDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributeValuesUpdateValue(attributeId: number, valueId: number, createAttributeValueDto: CreateAttributeValueDto, options?: any): AxiosPromise<AttributeValueDto> {
			return localVarFp.attributeValuesUpdateValue(attributeId, valueId, createAttributeValueDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for attributeValuesDeleteValueByID operation in AttributeValuesApi.
 * @export
 * @interface AttributeValuesApiAttributeValuesDeleteValueByIDRequest
 */
export interface AttributeValuesApiAttributeValuesDeleteValueByIDRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesDeleteValueByID
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesDeleteValueByID
	 */
	readonly valueId: number;
}

/**
 * Request parameters for attributeValuesGetValueById operation in AttributeValuesApi.
 * @export
 * @interface AttributeValuesApiAttributeValuesGetValueByIdRequest
 */
export interface AttributeValuesApiAttributeValuesGetValueByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesGetValueById
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesGetValueById
	 */
	readonly valueId: number;
}

/**
 * Request parameters for attributeValuesGetValuesOfAttributeById operation in AttributeValuesApi.
 * @export
 * @interface AttributeValuesApiAttributeValuesGetValuesOfAttributeByIdRequest
 */
export interface AttributeValuesApiAttributeValuesGetValuesOfAttributeByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesGetValuesOfAttributeById
	 */
	readonly attributeId: number;
}

/**
 * Request parameters for attributeValuesPatchValue operation in AttributeValuesApi.
 * @export
 * @interface AttributeValuesApiAttributeValuesPatchValueRequest
 */
export interface AttributeValuesApiAttributeValuesPatchValueRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesPatchValue
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesPatchValue
	 */
	readonly valueId: number;

	/**
	 *
	 * @type {UpdateAttributeValueDto}
	 * @memberof AttributeValuesApiAttributeValuesPatchValue
	 */
	readonly updateAttributeValueDto: UpdateAttributeValueDto;
}

/**
 * Request parameters for attributeValuesSave operation in AttributeValuesApi.
 * @export
 * @interface AttributeValuesApiAttributeValuesSaveRequest
 */
export interface AttributeValuesApiAttributeValuesSaveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesSave
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {CreateAttributeValueDto}
	 * @memberof AttributeValuesApiAttributeValuesSave
	 */
	readonly createAttributeValueDto: CreateAttributeValueDto;
}

/**
 * Request parameters for attributeValuesUpdateValue operation in AttributeValuesApi.
 * @export
 * @interface AttributeValuesApiAttributeValuesUpdateValueRequest
 */
export interface AttributeValuesApiAttributeValuesUpdateValueRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesUpdateValue
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AttributeValuesApiAttributeValuesUpdateValue
	 */
	readonly valueId: number;

	/**
	 *
	 * @type {CreateAttributeValueDto}
	 * @memberof AttributeValuesApiAttributeValuesUpdateValue
	 */
	readonly createAttributeValueDto: CreateAttributeValueDto;
}

/**
 * AttributeValuesApi - object-oriented interface
 * @export
 * @class AttributeValuesApi
 * @extends {BaseAPI}
 */
export class AttributeValuesApi extends BaseAPI {
	/**
	 *
	 * @param {AttributeValuesApiAttributeValuesDeleteValueByIDRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributeValuesApi
	 */
	public attributeValuesDeleteValueByID(requestParameters: AttributeValuesApiAttributeValuesDeleteValueByIDRequest, options?: AxiosRequestConfig) {
		return AttributeValuesApiFp(this.configuration).attributeValuesDeleteValueByID(requestParameters.attributeId, requestParameters.valueId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributeValuesApiAttributeValuesGetValueByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributeValuesApi
	 */
	public attributeValuesGetValueById(requestParameters: AttributeValuesApiAttributeValuesGetValueByIdRequest, options?: AxiosRequestConfig) {
		return AttributeValuesApiFp(this.configuration).attributeValuesGetValueById(requestParameters.attributeId, requestParameters.valueId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributeValuesApiAttributeValuesGetValuesOfAttributeByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributeValuesApi
	 */
	public attributeValuesGetValuesOfAttributeById(requestParameters: AttributeValuesApiAttributeValuesGetValuesOfAttributeByIdRequest, options?: AxiosRequestConfig) {
		return AttributeValuesApiFp(this.configuration).attributeValuesGetValuesOfAttributeById(requestParameters.attributeId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributeValuesApiAttributeValuesPatchValueRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributeValuesApi
	 */
	public attributeValuesPatchValue(requestParameters: AttributeValuesApiAttributeValuesPatchValueRequest, options?: AxiosRequestConfig) {
		return AttributeValuesApiFp(this.configuration).attributeValuesPatchValue(requestParameters.attributeId, requestParameters.valueId, requestParameters.updateAttributeValueDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributeValuesApiAttributeValuesSaveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributeValuesApi
	 */
	public attributeValuesSave(requestParameters: AttributeValuesApiAttributeValuesSaveRequest, options?: AxiosRequestConfig) {
		return AttributeValuesApiFp(this.configuration).attributeValuesSave(requestParameters.attributeId, requestParameters.createAttributeValueDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributeValuesApiAttributeValuesUpdateValueRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributeValuesApi
	 */
	public attributeValuesUpdateValue(requestParameters: AttributeValuesApiAttributeValuesUpdateValueRequest, options?: AxiosRequestConfig) {
		return AttributeValuesApiFp(this.configuration).attributeValuesUpdateValue(requestParameters.attributeId, requestParameters.valueId, requestParameters.createAttributeValueDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * AttributesApi - axios parameter creator
 * @export
 */
export const AttributesApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateAttributeDto} createAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesCreate: async (createAttributeDto: CreateAttributeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createAttributeDto' is not null or undefined
			assertParamExists('attributesCreate', 'createAttributeDto', createAttributeDto)
			const localVarPath = `/api/v1/attributes`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createAttributeDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/attributes`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesGetById: async (attributeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributesGetById', 'attributeId', attributeId)
			const localVarPath = `/api/v1/attributes/{attributeId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {UpdateAttributeDto} updateAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesPatch: async (attributeId: number, updateAttributeDto: UpdateAttributeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributesPatch', 'attributeId', attributeId)
			// verify required parameter 'updateAttributeDto' is not null or undefined
			assertParamExists('attributesPatch', 'updateAttributeDto', updateAttributeDto)
			const localVarPath = `/api/v1/attributes/{attributeId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateAttributeDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {UpdateAttributeDto} updateAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesRemove: async (attributeId: number, updateAttributeDto: UpdateAttributeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributesRemove', 'attributeId', attributeId)
			// verify required parameter 'updateAttributeDto' is not null or undefined
			assertParamExists('attributesRemove', 'updateAttributeDto', updateAttributeDto)
			const localVarPath = `/api/v1/attributes/{attributeId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateAttributeDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {CreateAttributeDto} createAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesUpdate: async (attributeId: number, createAttributeDto: CreateAttributeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'attributeId' is not null or undefined
			assertParamExists('attributesUpdate', 'attributeId', attributeId)
			// verify required parameter 'createAttributeDto' is not null or undefined
			assertParamExists('attributesUpdate', 'createAttributeDto', createAttributeDto)
			const localVarPath = `/api/v1/attributes/{attributeId}`
				.replace(`{${ "attributeId" }}`, encodeURIComponent(String(attributeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createAttributeDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * AttributesApi - functional programming interface
 * @export
 */
export const AttributesApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = AttributesApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateAttributeDto} createAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributesCreate(createAttributeDto: CreateAttributeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributesCreate(createAttributeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributesFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AttributeDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributesFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributesGetById(attributeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributesGetById(attributeId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {UpdateAttributeDto} updateAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributesPatch(attributeId: number, updateAttributeDto: UpdateAttributeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributesPatch(attributeId, updateAttributeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {UpdateAttributeDto} updateAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributesRemove(attributeId: number, updateAttributeDto: UpdateAttributeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributesRemove(attributeId, updateAttributeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {CreateAttributeDto} createAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributesUpdate(attributeId: number, createAttributeDto: CreateAttributeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributesUpdate(attributeId, createAttributeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * AttributesApi - factory interface
 * @export
 */
export const AttributesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = AttributesApiFp(configuration)
	return {
		/**
		 *
		 * @param {CreateAttributeDto} createAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesCreate(createAttributeDto: CreateAttributeDto, options?: any): AxiosPromise<AttributeDto> {
			return localVarFp.attributesCreate(createAttributeDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesFindAll(options?: any): AxiosPromise<Array<AttributeDto>> {
			return localVarFp.attributesFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesGetById(attributeId: number, options?: any): AxiosPromise<AttributeDto> {
			return localVarFp.attributesGetById(attributeId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {UpdateAttributeDto} updateAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesPatch(attributeId: number, updateAttributeDto: UpdateAttributeDto, options?: any): AxiosPromise<AttributeDto> {
			return localVarFp.attributesPatch(attributeId, updateAttributeDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {UpdateAttributeDto} updateAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesRemove(attributeId: number, updateAttributeDto: UpdateAttributeDto, options?: any): AxiosPromise<AttributeDto> {
			return localVarFp.attributesRemove(attributeId, updateAttributeDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} attributeId
		 * @param {CreateAttributeDto} createAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesUpdate(attributeId: number, createAttributeDto: CreateAttributeDto, options?: any): AxiosPromise<AttributeDto> {
			return localVarFp.attributesUpdate(attributeId, createAttributeDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for attributesCreate operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesCreateRequest
 */
export interface AttributesApiAttributesCreateRequest {
	/**
	 *
	 * @type {CreateAttributeDto}
	 * @memberof AttributesApiAttributesCreate
	 */
	readonly createAttributeDto: CreateAttributeDto;
}

/**
 * Request parameters for attributesGetById operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesGetByIdRequest
 */
export interface AttributesApiAttributesGetByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributesApiAttributesGetById
	 */
	readonly attributeId: number;
}

/**
 * Request parameters for attributesPatch operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesPatchRequest
 */
export interface AttributesApiAttributesPatchRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributesApiAttributesPatch
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {UpdateAttributeDto}
	 * @memberof AttributesApiAttributesPatch
	 */
	readonly updateAttributeDto: UpdateAttributeDto;
}

/**
 * Request parameters for attributesRemove operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesRemoveRequest
 */
export interface AttributesApiAttributesRemoveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributesApiAttributesRemove
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {UpdateAttributeDto}
	 * @memberof AttributesApiAttributesRemove
	 */
	readonly updateAttributeDto: UpdateAttributeDto;
}

/**
 * Request parameters for attributesUpdate operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesUpdateRequest
 */
export interface AttributesApiAttributesUpdateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AttributesApiAttributesUpdate
	 */
	readonly attributeId: number;

	/**
	 *
	 * @type {CreateAttributeDto}
	 * @memberof AttributesApiAttributesUpdate
	 */
	readonly createAttributeDto: CreateAttributeDto;
}

/**
 * AttributesApi - object-oriented interface
 * @export
 * @class AttributesApi
 * @extends {BaseAPI}
 */
export class AttributesApi extends BaseAPI {
	/**
	 *
	 * @param {AttributesApiAttributesCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributesApi
	 */
	public attributesCreate(requestParameters: AttributesApiAttributesCreateRequest, options?: AxiosRequestConfig) {
		return AttributesApiFp(this.configuration).attributesCreate(requestParameters.createAttributeDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributesApi
	 */
	public attributesFindAll(options?: AxiosRequestConfig) {
		return AttributesApiFp(this.configuration).attributesFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributesApiAttributesGetByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributesApi
	 */
	public attributesGetById(requestParameters: AttributesApiAttributesGetByIdRequest, options?: AxiosRequestConfig) {
		return AttributesApiFp(this.configuration).attributesGetById(requestParameters.attributeId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributesApiAttributesPatchRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributesApi
	 */
	public attributesPatch(requestParameters: AttributesApiAttributesPatchRequest, options?: AxiosRequestConfig) {
		return AttributesApiFp(this.configuration).attributesPatch(requestParameters.attributeId, requestParameters.updateAttributeDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributesApiAttributesRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributesApi
	 */
	public attributesRemove(requestParameters: AttributesApiAttributesRemoveRequest, options?: AxiosRequestConfig) {
		return AttributesApiFp(this.configuration).attributesRemove(requestParameters.attributeId, requestParameters.updateAttributeDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributesApiAttributesUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributesApi
	 */
	public attributesUpdate(requestParameters: AttributesApiAttributesUpdateRequest, options?: AxiosRequestConfig) {
		return AttributesApiFp(this.configuration).attributesUpdate(requestParameters.attributeId, requestParameters.createAttributeDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authGetHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/auth/profile`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {LoginUserDto} loginUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authLogin: async (loginUserDto: LoginUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'loginUserDto' is not null or undefined
			assertParamExists('authLogin', 'loginUserDto', loginUserDto)
			const localVarPath = `/api/v1/auth/login`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(loginUserDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {RegisterUserDto} registerUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authRegister: async (registerUserDto: RegisterUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'registerUserDto' is not null or undefined
			assertParamExists('authRegister', 'registerUserDto', registerUserDto)
			const localVarPath = `/api/v1/auth/register`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(registerUserDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {RequestUserPasswordChangeDto} requestUserPasswordChangeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authRequestPasswordReset: async (requestUserPasswordChangeDto: RequestUserPasswordChangeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'requestUserPasswordChangeDto' is not null or undefined
			assertParamExists('authRequestPasswordReset', 'requestUserPasswordChangeDto', requestUserPasswordChangeDto)
			const localVarPath = `/api/v1/auth/passwordReset`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(requestUserPasswordChangeDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} token
		 * @param {UpdateUserPasswordDto} updateUserPasswordDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authResetPassword: async (token: string, updateUserPasswordDto: UpdateUserPasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'token' is not null or undefined
			assertParamExists('authResetPassword', 'token', token)
			// verify required parameter 'updateUserPasswordDto' is not null or undefined
			assertParamExists('authResetPassword', 'updateUserPasswordDto', updateUserPasswordDto)
			const localVarPath = `/api/v1/auth/passwordReset`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if ( token !== undefined ) {
				localVarQueryParameter['token'] = token;
			}


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateUserPasswordDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authGetHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.authGetHello(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {LoginUserDto} loginUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authLogin(loginUserDto: LoginUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessLoginResponse>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.authLogin(loginUserDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {RegisterUserDto} registerUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authRegister(registerUserDto: RegisterUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.authRegister(registerUserDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {RequestUserPasswordChangeDto} requestUserPasswordChangeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authRequestPasswordReset(requestUserPasswordChangeDto: RequestUserPasswordChangeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.authRequestPasswordReset(requestUserPasswordChangeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} token
		 * @param {UpdateUserPasswordDto} updateUserPasswordDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authResetPassword(token: string, updateUserPasswordDto: UpdateUserPasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.authResetPassword(token, updateUserPasswordDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = AuthenticationApiFp(configuration)
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authGetHello(options?: any): AxiosPromise<void> {
			return localVarFp.authGetHello(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {LoginUserDto} loginUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authLogin(loginUserDto: LoginUserDto, options?: any): AxiosPromise<SuccessLoginResponse> {
			return localVarFp.authLogin(loginUserDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {RegisterUserDto} registerUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authRegister(registerUserDto: RegisterUserDto, options?: any): AxiosPromise<void> {
			return localVarFp.authRegister(registerUserDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {RequestUserPasswordChangeDto} requestUserPasswordChangeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authRequestPasswordReset(requestUserPasswordChangeDto: RequestUserPasswordChangeDto, options?: any): AxiosPromise<void> {
			return localVarFp.authRequestPasswordReset(requestUserPasswordChangeDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} token
		 * @param {UpdateUserPasswordDto} updateUserPasswordDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authResetPassword(token: string, updateUserPasswordDto: UpdateUserPasswordDto, options?: any): AxiosPromise<void> {
			return localVarFp.authResetPassword(token, updateUserPasswordDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for authLogin operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthLoginRequest
 */
export interface AuthenticationApiAuthLoginRequest {
	/**
	 *
	 * @type {LoginUserDto}
	 * @memberof AuthenticationApiAuthLogin
	 */
	readonly loginUserDto: LoginUserDto;
}

/**
 * Request parameters for authRegister operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthRegisterRequest
 */
export interface AuthenticationApiAuthRegisterRequest {
	/**
	 *
	 * @type {RegisterUserDto}
	 * @memberof AuthenticationApiAuthRegister
	 */
	readonly registerUserDto: RegisterUserDto;
}

/**
 * Request parameters for authRequestPasswordReset operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthRequestPasswordResetRequest
 */
export interface AuthenticationApiAuthRequestPasswordResetRequest {
	/**
	 *
	 * @type {RequestUserPasswordChangeDto}
	 * @memberof AuthenticationApiAuthRequestPasswordReset
	 */
	readonly requestUserPasswordChangeDto: RequestUserPasswordChangeDto;
}

/**
 * Request parameters for authResetPassword operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthResetPasswordRequest
 */
export interface AuthenticationApiAuthResetPasswordRequest {
	/**
	 *
	 * @type {string}
	 * @memberof AuthenticationApiAuthResetPassword
	 */
	readonly token: string;

	/**
	 *
	 * @type {UpdateUserPasswordDto}
	 * @memberof AuthenticationApiAuthResetPassword
	 */
	readonly updateUserPasswordDto: UpdateUserPasswordDto;
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public authGetHello(options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration).authGetHello(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AuthenticationApiAuthLoginRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public authLogin(requestParameters: AuthenticationApiAuthLoginRequest, options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration).authLogin(requestParameters.loginUserDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AuthenticationApiAuthRegisterRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public authRegister(requestParameters: AuthenticationApiAuthRegisterRequest, options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration).authRegister(requestParameters.registerUserDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AuthenticationApiAuthRequestPasswordResetRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public authRequestPasswordReset(requestParameters: AuthenticationApiAuthRequestPasswordResetRequest, options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration).authRequestPasswordReset(requestParameters.requestUserPasswordChangeDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AuthenticationApiAuthResetPasswordRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public authResetPassword(requestParameters: AuthenticationApiAuthResetPasswordRequest, options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration).authResetPassword(requestParameters.token, requestParameters.updateUserPasswordDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateCategoryDto} createCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesCreate: async (createCategoryDto: CreateCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createCategoryDto' is not null or undefined
			assertParamExists('categoriesCreate', 'createCategoryDto', createCategoryDto)
			const localVarPath = `/api/v1/categories`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createCategoryDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} [depth] The depth of children to retrieve. Set 0 for only the root categories, -1 for flat
		 *     array, leave empty for the full tree
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindAll: async (depth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/categories`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			if ( depth !== undefined ) {
				localVarQueryParameter['depth'] = depth;
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Gets all the ancestors of a category. Useful for breadcrumbs
		 * @summary Get ancestors of category by id
		 * @param {number} id The id of the category to get
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindAncestorsById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('categoriesFindAncestorsById', 'id', id)
			const localVarPath = `/api/v1/categories/{id}/ancestors`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Gets a category. Use depth query to control the level of children to retrieve
		 * @summary Get a category by id
		 * @param {number} id The id of the category to get
		 * @param {number} [depth] The depth of children to retrieve. Set 0 for only the requested category, leave
		 *     empty for the full tree
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindOne: async (id: number, depth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('categoriesFindOne', 'id', id)
			const localVarPath = `/api/v1/categories/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			if ( depth !== undefined ) {
				localVarQueryParameter['depth'] = depth;
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Gets a category by slug. Use depth query to control the level of children to retrieve
		 * @summary Get a category by slug
		 * @param {string} slug The slug of the category to get
		 * @param {number} [depth] The depth of children to retrieve. Set 0 for only the requested category, leave
		 *     empty for the full tree
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindOneBySlug: async (slug: string, depth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'slug' is not null or undefined
			assertParamExists('categoriesFindOneBySlug', 'slug', slug)
			const localVarPath = `/api/v1/categories/slugs/{slug}`
				.replace(`{${ "slug" }}`, encodeURIComponent(String(slug)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			if ( depth !== undefined ) {
				localVarQueryParameter['depth'] = depth;
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Gets all ids of categories
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesGetAllIds: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/categories/ids`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Gets all slugs of categories
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesGetAllSlugs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/categories/slugs`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {boolean} [forceDelete] Deletes the children subcategories. Default to false.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesRemove: async (id: number, forceDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('categoriesRemove', 'id', id)
			const localVarPath = `/api/v1/categories/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			if ( forceDelete !== undefined ) {
				localVarQueryParameter['forceDelete'] = forceDelete;
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateCategoryDto} updateCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesUpdate: async (id: number, updateCategoryDto: UpdateCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('categoriesUpdate', 'id', id)
			// verify required parameter 'updateCategoryDto' is not null or undefined
			assertParamExists('categoriesUpdate', 'updateCategoryDto', updateCategoryDto)
			const localVarPath = `/api/v1/categories/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateCategoryDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateCategoryDto} createCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesCreate(createCategoryDto: CreateCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesCreate(createCategoryDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} [depth] The depth of children to retrieve. Set 0 for only the root categories, -1 for flat
		 *     array, leave empty for the full tree
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesFindAll(depth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesFindAll(depth, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Gets all the ancestors of a category. Useful for breadcrumbs
		 * @summary Get ancestors of category by id
		 * @param {number} id The id of the category to get
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesFindAncestorsById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesFindAncestorsById(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Gets a category. Use depth query to control the level of children to retrieve
		 * @summary Get a category by id
		 * @param {number} id The id of the category to get
		 * @param {number} [depth] The depth of children to retrieve. Set 0 for only the requested category, leave
		 *     empty for the full tree
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesFindOne(id: number, depth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesFindOne(id, depth, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Gets a category by slug. Use depth query to control the level of children to retrieve
		 * @summary Get a category by slug
		 * @param {string} slug The slug of the category to get
		 * @param {number} [depth] The depth of children to retrieve. Set 0 for only the requested category, leave
		 *     empty for the full tree
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesFindOneBySlug(slug: string, depth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesFindOneBySlug(slug, depth, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Gets all ids of categories
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesGetAllIds(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesGetAllIds(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Gets all slugs of categories
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesGetAllSlugs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesGetAllSlugs(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {boolean} [forceDelete] Deletes the children subcategories. Default to false.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesRemove(id: number, forceDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesRemove(id, forceDelete, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateCategoryDto} updateCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesUpdate(id: number, updateCategoryDto: UpdateCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesUpdate(id, updateCategoryDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = CategoriesApiFp(configuration)
	return {
		/**
		 *
		 * @param {CreateCategoryDto} createCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesCreate(createCategoryDto: CreateCategoryDto, options?: any): AxiosPromise<CategoryDto> {
			return localVarFp.categoriesCreate(createCategoryDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} [depth] The depth of children to retrieve. Set 0 for only the root categories, -1 for flat
		 *     array, leave empty for the full tree
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindAll(depth?: number, options?: any): AxiosPromise<Array<CategoryDto>> {
			return localVarFp.categoriesFindAll(depth, options).then((request) => request(axios, basePath));
		},
		/**
		 * Gets all the ancestors of a category. Useful for breadcrumbs
		 * @summary Get ancestors of category by id
		 * @param {number} id The id of the category to get
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindAncestorsById(id: number, options?: any): AxiosPromise<CategoryDto> {
			return localVarFp.categoriesFindAncestorsById(id, options).then((request) => request(axios, basePath));
		},
		/**
		 * Gets a category. Use depth query to control the level of children to retrieve
		 * @summary Get a category by id
		 * @param {number} id The id of the category to get
		 * @param {number} [depth] The depth of children to retrieve. Set 0 for only the requested category, leave
		 *     empty for the full tree
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindOne(id: number, depth?: number, options?: any): AxiosPromise<CategoryDto> {
			return localVarFp.categoriesFindOne(id, depth, options).then((request) => request(axios, basePath));
		},
		/**
		 * Gets a category by slug. Use depth query to control the level of children to retrieve
		 * @summary Get a category by slug
		 * @param {string} slug The slug of the category to get
		 * @param {number} [depth] The depth of children to retrieve. Set 0 for only the requested category, leave
		 *     empty for the full tree
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindOneBySlug(slug: string, depth?: number, options?: any): AxiosPromise<CategoryDto> {
			return localVarFp.categoriesFindOneBySlug(slug, depth, options).then((request) => request(axios, basePath));
		},
		/**
		 * Gets all ids of categories
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesGetAllIds(options?: any): AxiosPromise<Array<number>> {
			return localVarFp.categoriesGetAllIds(options).then((request) => request(axios, basePath));
		},
		/**
		 * Gets all slugs of categories
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesGetAllSlugs(options?: any): AxiosPromise<Array<string>> {
			return localVarFp.categoriesGetAllSlugs(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {boolean} [forceDelete] Deletes the children subcategories. Default to false.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesRemove(id: number, forceDelete?: boolean, options?: any): AxiosPromise<void> {
			return localVarFp.categoriesRemove(id, forceDelete, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateCategoryDto} updateCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesUpdate(id: number, updateCategoryDto: UpdateCategoryDto, options?: any): AxiosPromise<CategoryDto> {
			return localVarFp.categoriesUpdate(id, updateCategoryDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for categoriesCreate operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesCreateRequest
 */
export interface CategoriesApiCategoriesCreateRequest {
	/**
	 *
	 * @type {CreateCategoryDto}
	 * @memberof CategoriesApiCategoriesCreate
	 */
	readonly createCategoryDto: CreateCategoryDto;
}

/**
 * Request parameters for categoriesFindAll operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesFindAllRequest
 */
export interface CategoriesApiCategoriesFindAllRequest {
	/**
	 * The depth of children to retrieve. Set 0 for only the root categories, -1 for flat array, leave empty for the
	 * full tree
	 * @type {number}
	 * @memberof CategoriesApiCategoriesFindAll
	 */
	readonly depth?: number;
}

/**
 * Request parameters for categoriesFindAncestorsById operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesFindAncestorsByIdRequest
 */
export interface CategoriesApiCategoriesFindAncestorsByIdRequest {
	/**
	 * The id of the category to get
	 * @type {number}
	 * @memberof CategoriesApiCategoriesFindAncestorsById
	 */
	readonly id: number;
}

/**
 * Request parameters for categoriesFindOne operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesFindOneRequest
 */
export interface CategoriesApiCategoriesFindOneRequest {
	/**
	 * The id of the category to get
	 * @type {number}
	 * @memberof CategoriesApiCategoriesFindOne
	 */
	readonly id: number;

	/**
	 * The depth of children to retrieve. Set 0 for only the requested category, leave empty for the full tree
	 * @type {number}
	 * @memberof CategoriesApiCategoriesFindOne
	 */
	readonly depth?: number;
}

/**
 * Request parameters for categoriesFindOneBySlug operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesFindOneBySlugRequest
 */
export interface CategoriesApiCategoriesFindOneBySlugRequest {
	/**
	 * The slug of the category to get
	 * @type {string}
	 * @memberof CategoriesApiCategoriesFindOneBySlug
	 */
	readonly slug: string;

	/**
	 * The depth of children to retrieve. Set 0 for only the requested category, leave empty for the full tree
	 * @type {number}
	 * @memberof CategoriesApiCategoriesFindOneBySlug
	 */
	readonly depth?: number;
}

/**
 * Request parameters for categoriesRemove operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesRemoveRequest
 */
export interface CategoriesApiCategoriesRemoveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof CategoriesApiCategoriesRemove
	 */
	readonly id: number;

	/**
	 * Deletes the children subcategories. Default to false.
	 * @type {boolean}
	 * @memberof CategoriesApiCategoriesRemove
	 */
	readonly forceDelete?: boolean;
}

/**
 * Request parameters for categoriesUpdate operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesUpdateRequest
 */
export interface CategoriesApiCategoriesUpdateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof CategoriesApiCategoriesUpdate
	 */
	readonly id: number;

	/**
	 *
	 * @type {UpdateCategoryDto}
	 * @memberof CategoriesApiCategoriesUpdate
	 */
	readonly updateCategoryDto: UpdateCategoryDto;
}

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
	/**
	 *
	 * @param {CategoriesApiCategoriesCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesCreate(requestParameters: CategoriesApiCategoriesCreateRequest, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesCreate(requestParameters.createCategoryDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CategoriesApiCategoriesFindAllRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesFindAll(requestParameters: CategoriesApiCategoriesFindAllRequest = {}, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesFindAll(requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Gets all the ancestors of a category. Useful for breadcrumbs
	 * @summary Get ancestors of category by id
	 * @param {CategoriesApiCategoriesFindAncestorsByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesFindAncestorsById(requestParameters: CategoriesApiCategoriesFindAncestorsByIdRequest, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesFindAncestorsById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Gets a category. Use depth query to control the level of children to retrieve
	 * @summary Get a category by id
	 * @param {CategoriesApiCategoriesFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesFindOne(requestParameters: CategoriesApiCategoriesFindOneRequest, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesFindOne(requestParameters.id, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Gets a category by slug. Use depth query to control the level of children to retrieve
	 * @summary Get a category by slug
	 * @param {CategoriesApiCategoriesFindOneBySlugRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesFindOneBySlug(requestParameters: CategoriesApiCategoriesFindOneBySlugRequest, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesFindOneBySlug(requestParameters.slug, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Gets all ids of categories
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesGetAllIds(options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesGetAllIds(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Gets all slugs of categories
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesGetAllSlugs(options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesGetAllSlugs(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CategoriesApiCategoriesRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesRemove(requestParameters: CategoriesApiCategoriesRemoveRequest, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesRemove(requestParameters.id, requestParameters.forceDelete, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CategoriesApiCategoriesUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesUpdate(requestParameters: CategoriesApiCategoriesUpdateRequest, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesUpdate(requestParameters.id, requestParameters.updateCategoryDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * CheckoutApi - axios parameter creator
 * @export
 */
export const CheckoutApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateCheckoutDto} createCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutCreate: async (createCheckoutDto: CreateCheckoutDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createCheckoutDto' is not null or undefined
			assertParamExists('checkoutCreate', 'createCheckoutDto', createCheckoutDto)
			const localVarPath = `/api/v1/checkout`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createCheckoutDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutFindOne: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'token' is not null or undefined
			assertParamExists('checkoutFindOne', 'token', token)
			const localVarPath = `/api/v1/checkout/{token}`
				.replace(`{${ "token" }}`, encodeURIComponent(String(token)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} token
		 * @param {UpdateCheckoutDto} updateCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutUpdate: async (token: string, updateCheckoutDto: UpdateCheckoutDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'token' is not null or undefined
			assertParamExists('checkoutUpdate', 'token', token)
			// verify required parameter 'updateCheckoutDto' is not null or undefined
			assertParamExists('checkoutUpdate', 'updateCheckoutDto', updateCheckoutDto)
			const localVarPath = `/api/v1/checkout/{token}`
				.replace(`{${ "token" }}`, encodeURIComponent(String(token)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateCheckoutDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} token
		 * @param {CreateAddressDto} createAddressDto
		 * @param {boolean} [shipping]
		 * @param {boolean} [billing]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutUpdateAddress: async (token: string, createAddressDto: CreateAddressDto, shipping?: boolean, billing?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'token' is not null or undefined
			assertParamExists('checkoutUpdateAddress', 'token', token)
			// verify required parameter 'createAddressDto' is not null or undefined
			assertParamExists('checkoutUpdateAddress', 'createAddressDto', createAddressDto)
			const localVarPath = `/api/v1/checkout/{token}/address`
				.replace(`{${ "token" }}`, encodeURIComponent(String(token)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			if ( shipping !== undefined ) {
				localVarQueryParameter['shipping'] = shipping;
			}

			if ( billing !== undefined ) {
				localVarQueryParameter['billing'] = billing;
			}


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createAddressDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} token
		 * @param {UpdateCheckoutLineDto} updateCheckoutLineDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutUpdateLines: async (token: string, updateCheckoutLineDto: UpdateCheckoutLineDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'token' is not null or undefined
			assertParamExists('checkoutUpdateLines', 'token', token)
			// verify required parameter 'updateCheckoutLineDto' is not null or undefined
			assertParamExists('checkoutUpdateLines', 'updateCheckoutLineDto', updateCheckoutLineDto)
			const localVarPath = `/api/v1/checkout/{token}/lines`
				.replace(`{${ "token" }}`, encodeURIComponent(String(token)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateCheckoutLineDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} token
		 * @param {UpdateCheckoutVoucherDto} updateCheckoutVoucherDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutUpdateVoucher: async (token: string, updateCheckoutVoucherDto: UpdateCheckoutVoucherDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'token' is not null or undefined
			assertParamExists('checkoutUpdateVoucher', 'token', token)
			// verify required parameter 'updateCheckoutVoucherDto' is not null or undefined
			assertParamExists('checkoutUpdateVoucher', 'updateCheckoutVoucherDto', updateCheckoutVoucherDto)
			const localVarPath = `/api/v1/checkout/{token}/voucher`
				.replace(`{${ "token" }}`, encodeURIComponent(String(token)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateCheckoutVoucherDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * CheckoutApi - functional programming interface
 * @export
 */
export const CheckoutApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = CheckoutApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateCheckoutDto} createCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutCreate(createCheckoutDto: CreateCheckoutDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutCreate(createCheckoutDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutFindOne(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutFindOne(token, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} token
		 * @param {UpdateCheckoutDto} updateCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutUpdate(token: string, updateCheckoutDto: UpdateCheckoutDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutUpdate(token, updateCheckoutDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} token
		 * @param {CreateAddressDto} createAddressDto
		 * @param {boolean} [shipping]
		 * @param {boolean} [billing]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutUpdateAddress(token: string, createAddressDto: CreateAddressDto, shipping?: boolean, billing?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutUpdateAddress(token, createAddressDto, shipping, billing, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} token
		 * @param {UpdateCheckoutLineDto} updateCheckoutLineDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutUpdateLines(token: string, updateCheckoutLineDto: UpdateCheckoutLineDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutUpdateLines(token, updateCheckoutLineDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} token
		 * @param {UpdateCheckoutVoucherDto} updateCheckoutVoucherDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutUpdateVoucher(token: string, updateCheckoutVoucherDto: UpdateCheckoutVoucherDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutUpdateVoucher(token, updateCheckoutVoucherDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * CheckoutApi - factory interface
 * @export
 */
export const CheckoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = CheckoutApiFp(configuration)
	return {
		/**
		 *
		 * @param {CreateCheckoutDto} createCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutCreate(createCheckoutDto: CreateCheckoutDto, options?: any): AxiosPromise<CheckoutDto> {
			return localVarFp.checkoutCreate(createCheckoutDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutFindOne(token: string, options?: any): AxiosPromise<CheckoutDto> {
			return localVarFp.checkoutFindOne(token, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} token
		 * @param {UpdateCheckoutDto} updateCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutUpdate(token: string, updateCheckoutDto: UpdateCheckoutDto, options?: any): AxiosPromise<CheckoutDto> {
			return localVarFp.checkoutUpdate(token, updateCheckoutDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} token
		 * @param {CreateAddressDto} createAddressDto
		 * @param {boolean} [shipping]
		 * @param {boolean} [billing]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutUpdateAddress(token: string, createAddressDto: CreateAddressDto, shipping?: boolean, billing?: boolean, options?: any): AxiosPromise<CheckoutDto> {
			return localVarFp.checkoutUpdateAddress(token, createAddressDto, shipping, billing, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} token
		 * @param {UpdateCheckoutLineDto} updateCheckoutLineDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutUpdateLines(token: string, updateCheckoutLineDto: UpdateCheckoutLineDto, options?: any): AxiosPromise<CheckoutDto> {
			return localVarFp.checkoutUpdateLines(token, updateCheckoutLineDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} token
		 * @param {UpdateCheckoutVoucherDto} updateCheckoutVoucherDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutUpdateVoucher(token: string, updateCheckoutVoucherDto: UpdateCheckoutVoucherDto, options?: any): AxiosPromise<CheckoutDto> {
			return localVarFp.checkoutUpdateVoucher(token, updateCheckoutVoucherDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for checkoutCreate operation in CheckoutApi.
 * @export
 * @interface CheckoutApiCheckoutCreateRequest
 */
export interface CheckoutApiCheckoutCreateRequest {
	/**
	 *
	 * @type {CreateCheckoutDto}
	 * @memberof CheckoutApiCheckoutCreate
	 */
	readonly createCheckoutDto: CreateCheckoutDto;
}

/**
 * Request parameters for checkoutFindOne operation in CheckoutApi.
 * @export
 * @interface CheckoutApiCheckoutFindOneRequest
 */
export interface CheckoutApiCheckoutFindOneRequest {
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutApiCheckoutFindOne
	 */
	readonly token: string;
}

/**
 * Request parameters for checkoutUpdate operation in CheckoutApi.
 * @export
 * @interface CheckoutApiCheckoutUpdateRequest
 */
export interface CheckoutApiCheckoutUpdateRequest {
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutApiCheckoutUpdate
	 */
	readonly token: string;

	/**
	 *
	 * @type {UpdateCheckoutDto}
	 * @memberof CheckoutApiCheckoutUpdate
	 */
	readonly updateCheckoutDto: UpdateCheckoutDto;
}

/**
 * Request parameters for checkoutUpdateAddress operation in CheckoutApi.
 * @export
 * @interface CheckoutApiCheckoutUpdateAddressRequest
 */
export interface CheckoutApiCheckoutUpdateAddressRequest {
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutApiCheckoutUpdateAddress
	 */
	readonly token: string;

	/**
	 *
	 * @type {CreateAddressDto}
	 * @memberof CheckoutApiCheckoutUpdateAddress
	 */
	readonly createAddressDto: CreateAddressDto;

	/**
	 *
	 * @type {boolean}
	 * @memberof CheckoutApiCheckoutUpdateAddress
	 */
	readonly shipping?: boolean;

	/**
	 *
	 * @type {boolean}
	 * @memberof CheckoutApiCheckoutUpdateAddress
	 */
	readonly billing?: boolean;
}

/**
 * Request parameters for checkoutUpdateLines operation in CheckoutApi.
 * @export
 * @interface CheckoutApiCheckoutUpdateLinesRequest
 */
export interface CheckoutApiCheckoutUpdateLinesRequest {
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutApiCheckoutUpdateLines
	 */
	readonly token: string;

	/**
	 *
	 * @type {UpdateCheckoutLineDto}
	 * @memberof CheckoutApiCheckoutUpdateLines
	 */
	readonly updateCheckoutLineDto: UpdateCheckoutLineDto;
}

/**
 * Request parameters for checkoutUpdateVoucher operation in CheckoutApi.
 * @export
 * @interface CheckoutApiCheckoutUpdateVoucherRequest
 */
export interface CheckoutApiCheckoutUpdateVoucherRequest {
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutApiCheckoutUpdateVoucher
	 */
	readonly token: string;

	/**
	 *
	 * @type {UpdateCheckoutVoucherDto}
	 * @memberof CheckoutApiCheckoutUpdateVoucher
	 */
	readonly updateCheckoutVoucherDto: UpdateCheckoutVoucherDto;
}

/**
 * CheckoutApi - object-oriented interface
 * @export
 * @class CheckoutApi
 * @extends {BaseAPI}
 */
export class CheckoutApi extends BaseAPI {
	/**
	 *
	 * @param {CheckoutApiCheckoutCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutCreate(requestParameters: CheckoutApiCheckoutCreateRequest, options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutCreate(requestParameters.createCheckoutDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CheckoutApiCheckoutFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutFindOne(requestParameters: CheckoutApiCheckoutFindOneRequest, options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutFindOne(requestParameters.token, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CheckoutApiCheckoutUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutUpdate(requestParameters: CheckoutApiCheckoutUpdateRequest, options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutUpdate(requestParameters.token, requestParameters.updateCheckoutDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CheckoutApiCheckoutUpdateAddressRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutUpdateAddress(requestParameters: CheckoutApiCheckoutUpdateAddressRequest, options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutUpdateAddress(requestParameters.token, requestParameters.createAddressDto, requestParameters.shipping, requestParameters.billing, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CheckoutApiCheckoutUpdateLinesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutUpdateLines(requestParameters: CheckoutApiCheckoutUpdateLinesRequest, options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutUpdateLines(requestParameters.token, requestParameters.updateCheckoutLineDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CheckoutApiCheckoutUpdateVoucherRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutUpdateVoucher(requestParameters: CheckoutApiCheckoutUpdateVoucherRequest, options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutUpdateVoucher(requestParameters.token, requestParameters.updateCheckoutVoucherDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * CollectionsApi - axios parameter creator
 * @export
 */
export const CollectionsApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {number} collectionId
		 * @param {Array<CreateCollectionProductDto>} createCollectionProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsAddProducts: async (collectionId: number, createCollectionProductDto: Array<CreateCollectionProductDto>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'collectionId' is not null or undefined
			assertParamExists('collectionsAddProducts', 'collectionId', collectionId)
			// verify required parameter 'createCollectionProductDto' is not null or undefined
			assertParamExists('collectionsAddProducts', 'createCollectionProductDto', createCollectionProductDto)
			const localVarPath = `/api/v1/collections/{collectionId}/products`
				.replace(`{${ "collectionId" }}`, encodeURIComponent(String(collectionId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createCollectionProductDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {CreateCollectionDto} createCollectionDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsCreate: async (createCollectionDto: CreateCollectionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createCollectionDto' is not null or undefined
			assertParamExists('collectionsCreate', 'createCollectionDto', createCollectionDto)
			const localVarPath = `/api/v1/collections`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createCollectionDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/collections`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} collectionId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsFindOne: async (collectionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'collectionId' is not null or undefined
			assertParamExists('collectionsFindOne', 'collectionId', collectionId)
			const localVarPath = `/api/v1/collections/{collectionId}`
				.replace(`{${ "collectionId" }}`, encodeURIComponent(String(collectionId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} slug
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsFindOneBySlug: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'slug' is not null or undefined
			assertParamExists('collectionsFindOneBySlug', 'slug', slug)
			const localVarPath = `/api/v1/collections/slug/{slug}`
				.replace(`{${ "slug" }}`, encodeURIComponent(String(slug)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} collectionId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsRemove: async (collectionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'collectionId' is not null or undefined
			assertParamExists('collectionsRemove', 'collectionId', collectionId)
			const localVarPath = `/api/v1/collections/{collectionId}`
				.replace(`{${ "collectionId" }}`, encodeURIComponent(String(collectionId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} collectionId
		 * @param {number} productId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsRemoveProduct: async (collectionId: number, productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'collectionId' is not null or undefined
			assertParamExists('collectionsRemoveProduct', 'collectionId', collectionId)
			// verify required parameter 'productId' is not null or undefined
			assertParamExists('collectionsRemoveProduct', 'productId', productId)
			const localVarPath = `/api/v1/collections/{collectionId}/products/{productId}`
				.replace(`{${ "collectionId" }}`, encodeURIComponent(String(collectionId)))
				.replace(`{${ "productId" }}`, encodeURIComponent(String(productId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} collectionId
		 * @param {UpdateCollectionDto} updateCollectionDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsUpdate: async (collectionId: number, updateCollectionDto: UpdateCollectionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'collectionId' is not null or undefined
			assertParamExists('collectionsUpdate', 'collectionId', collectionId)
			// verify required parameter 'updateCollectionDto' is not null or undefined
			assertParamExists('collectionsUpdate', 'updateCollectionDto', updateCollectionDto)
			const localVarPath = `/api/v1/collections/{collectionId}`
				.replace(`{${ "collectionId" }}`, encodeURIComponent(String(collectionId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateCollectionDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * CollectionsApi - functional programming interface
 * @export
 */
export const CollectionsApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = CollectionsApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} collectionId
		 * @param {Array<CreateCollectionProductDto>} createCollectionProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async collectionsAddProducts(collectionId: number, createCollectionProductDto: Array<CreateCollectionProductDto>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsAddProducts(collectionId, createCollectionProductDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {CreateCollectionDto} createCollectionDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async collectionsCreate(createCollectionDto: CreateCollectionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsCreate(createCollectionDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async collectionsFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CollectionDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} collectionId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async collectionsFindOne(collectionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsFindOne(collectionId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} slug
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async collectionsFindOneBySlug(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsFindOneBySlug(slug, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} collectionId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async collectionsRemove(collectionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsRemove(collectionId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} collectionId
		 * @param {number} productId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async collectionsRemoveProduct(collectionId: number, productId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsRemoveProduct(collectionId, productId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} collectionId
		 * @param {UpdateCollectionDto} updateCollectionDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async collectionsUpdate(collectionId: number, updateCollectionDto: UpdateCollectionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.collectionsUpdate(collectionId, updateCollectionDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * CollectionsApi - factory interface
 * @export
 */
export const CollectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = CollectionsApiFp(configuration)
	return {
		/**
		 *
		 * @param {number} collectionId
		 * @param {Array<CreateCollectionProductDto>} createCollectionProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsAddProducts(collectionId: number, createCollectionProductDto: Array<CreateCollectionProductDto>, options?: any): AxiosPromise<CollectionDto> {
			return localVarFp.collectionsAddProducts(collectionId, createCollectionProductDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {CreateCollectionDto} createCollectionDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsCreate(createCollectionDto: CreateCollectionDto, options?: any): AxiosPromise<CollectionDto> {
			return localVarFp.collectionsCreate(createCollectionDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsFindAll(options?: any): AxiosPromise<Array<CollectionDto>> {
			return localVarFp.collectionsFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} collectionId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsFindOne(collectionId: number, options?: any): AxiosPromise<CollectionDto> {
			return localVarFp.collectionsFindOne(collectionId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} slug
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsFindOneBySlug(slug: string, options?: any): AxiosPromise<CollectionDto> {
			return localVarFp.collectionsFindOneBySlug(slug, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} collectionId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsRemove(collectionId: number, options?: any): AxiosPromise<CollectionDto> {
			return localVarFp.collectionsRemove(collectionId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} collectionId
		 * @param {number} productId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsRemoveProduct(collectionId: number, productId: number, options?: any): AxiosPromise<CollectionDto> {
			return localVarFp.collectionsRemoveProduct(collectionId, productId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} collectionId
		 * @param {UpdateCollectionDto} updateCollectionDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		collectionsUpdate(collectionId: number, updateCollectionDto: UpdateCollectionDto, options?: any): AxiosPromise<CollectionDto> {
			return localVarFp.collectionsUpdate(collectionId, updateCollectionDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for collectionsAddProducts operation in CollectionsApi.
 * @export
 * @interface CollectionsApiCollectionsAddProductsRequest
 */
export interface CollectionsApiCollectionsAddProductsRequest {
	/**
	 *
	 * @type {number}
	 * @memberof CollectionsApiCollectionsAddProducts
	 */
	readonly collectionId: number;

	/**
	 *
	 * @type {Array<CreateCollectionProductDto>}
	 * @memberof CollectionsApiCollectionsAddProducts
	 */
	readonly createCollectionProductDto: Array<CreateCollectionProductDto>;
}

/**
 * Request parameters for collectionsCreate operation in CollectionsApi.
 * @export
 * @interface CollectionsApiCollectionsCreateRequest
 */
export interface CollectionsApiCollectionsCreateRequest {
	/**
	 *
	 * @type {CreateCollectionDto}
	 * @memberof CollectionsApiCollectionsCreate
	 */
	readonly createCollectionDto: CreateCollectionDto;
}

/**
 * Request parameters for collectionsFindOne operation in CollectionsApi.
 * @export
 * @interface CollectionsApiCollectionsFindOneRequest
 */
export interface CollectionsApiCollectionsFindOneRequest {
	/**
	 *
	 * @type {number}
	 * @memberof CollectionsApiCollectionsFindOne
	 */
	readonly collectionId: number;
}

/**
 * Request parameters for collectionsFindOneBySlug operation in CollectionsApi.
 * @export
 * @interface CollectionsApiCollectionsFindOneBySlugRequest
 */
export interface CollectionsApiCollectionsFindOneBySlugRequest {
	/**
	 *
	 * @type {string}
	 * @memberof CollectionsApiCollectionsFindOneBySlug
	 */
	readonly slug: string;
}

/**
 * Request parameters for collectionsRemove operation in CollectionsApi.
 * @export
 * @interface CollectionsApiCollectionsRemoveRequest
 */
export interface CollectionsApiCollectionsRemoveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof CollectionsApiCollectionsRemove
	 */
	readonly collectionId: number;
}

/**
 * Request parameters for collectionsRemoveProduct operation in CollectionsApi.
 * @export
 * @interface CollectionsApiCollectionsRemoveProductRequest
 */
export interface CollectionsApiCollectionsRemoveProductRequest {
	/**
	 *
	 * @type {number}
	 * @memberof CollectionsApiCollectionsRemoveProduct
	 */
	readonly collectionId: number;

	/**
	 *
	 * @type {number}
	 * @memberof CollectionsApiCollectionsRemoveProduct
	 */
	readonly productId: number;
}

/**
 * Request parameters for collectionsUpdate operation in CollectionsApi.
 * @export
 * @interface CollectionsApiCollectionsUpdateRequest
 */
export interface CollectionsApiCollectionsUpdateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof CollectionsApiCollectionsUpdate
	 */
	readonly collectionId: number;

	/**
	 *
	 * @type {UpdateCollectionDto}
	 * @memberof CollectionsApiCollectionsUpdate
	 */
	readonly updateCollectionDto: UpdateCollectionDto;
}

/**
 * CollectionsApi - object-oriented interface
 * @export
 * @class CollectionsApi
 * @extends {BaseAPI}
 */
export class CollectionsApi extends BaseAPI {
	/**
	 *
	 * @param {CollectionsApiCollectionsAddProductsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CollectionsApi
	 */
	public collectionsAddProducts(requestParameters: CollectionsApiCollectionsAddProductsRequest, options?: AxiosRequestConfig) {
		return CollectionsApiFp(this.configuration).collectionsAddProducts(requestParameters.collectionId, requestParameters.createCollectionProductDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CollectionsApiCollectionsCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CollectionsApi
	 */
	public collectionsCreate(requestParameters: CollectionsApiCollectionsCreateRequest, options?: AxiosRequestConfig) {
		return CollectionsApiFp(this.configuration).collectionsCreate(requestParameters.createCollectionDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CollectionsApi
	 */
	public collectionsFindAll(options?: AxiosRequestConfig) {
		return CollectionsApiFp(this.configuration).collectionsFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CollectionsApiCollectionsFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CollectionsApi
	 */
	public collectionsFindOne(requestParameters: CollectionsApiCollectionsFindOneRequest, options?: AxiosRequestConfig) {
		return CollectionsApiFp(this.configuration).collectionsFindOne(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CollectionsApiCollectionsFindOneBySlugRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CollectionsApi
	 */
	public collectionsFindOneBySlug(requestParameters: CollectionsApiCollectionsFindOneBySlugRequest, options?: AxiosRequestConfig) {
		return CollectionsApiFp(this.configuration).collectionsFindOneBySlug(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CollectionsApiCollectionsRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CollectionsApi
	 */
	public collectionsRemove(requestParameters: CollectionsApiCollectionsRemoveRequest, options?: AxiosRequestConfig) {
		return CollectionsApiFp(this.configuration).collectionsRemove(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CollectionsApiCollectionsRemoveProductRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CollectionsApi
	 */
	public collectionsRemoveProduct(requestParameters: CollectionsApiCollectionsRemoveProductRequest, options?: AxiosRequestConfig) {
		return CollectionsApiFp(this.configuration).collectionsRemoveProduct(requestParameters.collectionId, requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CollectionsApiCollectionsUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CollectionsApi
	 */
	public collectionsUpdate(requestParameters: CollectionsApiCollectionsUpdateRequest, options?: AxiosRequestConfig) {
		return CollectionsApiFp(this.configuration).collectionsUpdate(requestParameters.collectionId, requestParameters.updateCollectionDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * CoreApi - axios parameter creator
 * @export
 */
export const CoreApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		settingsGetSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/core/settings`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {CreateSettingsDto} createSettingsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		settingsUpdateSettings: async (createSettingsDto: CreateSettingsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createSettingsDto' is not null or undefined
			assertParamExists('settingsUpdateSettings', 'createSettingsDto', createSettingsDto)
			const localVarPath = `/api/v1/core/settings`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createSettingsDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {UpdateWebhookSettingsDto} updateWebhookSettingsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		settingsUpdateWebhookSettings: async (updateWebhookSettingsDto: UpdateWebhookSettingsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'updateWebhookSettingsDto' is not null or undefined
			assertParamExists('settingsUpdateWebhookSettings', 'updateWebhookSettingsDto', updateWebhookSettingsDto)
			const localVarPath = `/api/v1/core/settings/webhooks`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateWebhookSettingsDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * CoreApi - functional programming interface
 * @export
 */
export const CoreApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = CoreApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async settingsGetSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.settingsGetSettings(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {CreateSettingsDto} createSettingsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async settingsUpdateSettings(createSettingsDto: CreateSettingsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.settingsUpdateSettings(createSettingsDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {UpdateWebhookSettingsDto} updateWebhookSettingsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async settingsUpdateWebhookSettings(updateWebhookSettingsDto: UpdateWebhookSettingsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSettingsDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.settingsUpdateWebhookSettings(updateWebhookSettingsDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * CoreApi - factory interface
 * @export
 */
export const CoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = CoreApiFp(configuration)
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		settingsGetSettings(options?: any): AxiosPromise<SettingsDto> {
			return localVarFp.settingsGetSettings(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {CreateSettingsDto} createSettingsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		settingsUpdateSettings(createSettingsDto: CreateSettingsDto, options?: any): AxiosPromise<SettingsDto> {
			return localVarFp.settingsUpdateSettings(createSettingsDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {UpdateWebhookSettingsDto} updateWebhookSettingsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		settingsUpdateWebhookSettings(updateWebhookSettingsDto: UpdateWebhookSettingsDto, options?: any): AxiosPromise<CreateSettingsDto> {
			return localVarFp.settingsUpdateWebhookSettings(updateWebhookSettingsDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for settingsUpdateSettings operation in CoreApi.
 * @export
 * @interface CoreApiSettingsUpdateSettingsRequest
 */
export interface CoreApiSettingsUpdateSettingsRequest {
	/**
	 *
	 * @type {CreateSettingsDto}
	 * @memberof CoreApiSettingsUpdateSettings
	 */
	readonly createSettingsDto: CreateSettingsDto;
}

/**
 * Request parameters for settingsUpdateWebhookSettings operation in CoreApi.
 * @export
 * @interface CoreApiSettingsUpdateWebhookSettingsRequest
 */
export interface CoreApiSettingsUpdateWebhookSettingsRequest {
	/**
	 *
	 * @type {UpdateWebhookSettingsDto}
	 * @memberof CoreApiSettingsUpdateWebhookSettings
	 */
	readonly updateWebhookSettingsDto: UpdateWebhookSettingsDto;
}

/**
 * CoreApi - object-oriented interface
 * @export
 * @class CoreApi
 * @extends {BaseAPI}
 */
export class CoreApi extends BaseAPI {
	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CoreApi
	 */
	public settingsGetSettings(options?: AxiosRequestConfig) {
		return CoreApiFp(this.configuration).settingsGetSettings(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CoreApiSettingsUpdateSettingsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CoreApi
	 */
	public settingsUpdateSettings(requestParameters: CoreApiSettingsUpdateSettingsRequest, options?: AxiosRequestConfig) {
		return CoreApiFp(this.configuration).settingsUpdateSettings(requestParameters.createSettingsDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CoreApiSettingsUpdateWebhookSettingsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CoreApi
	 */
	public settingsUpdateWebhookSettings(requestParameters: CoreApiSettingsUpdateWebhookSettingsRequest, options?: AxiosRequestConfig) {
		return CoreApiFp(this.configuration).settingsUpdateWebhookSettings(requestParameters.updateWebhookSettingsDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * DiscountApi - axios parameter creator
 * @export
 */
export const DiscountApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddCategoriesDto} discountAddCategoriesDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesAddCategories: async (id: number, discountAddCategoriesDto: DiscountAddCategoriesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesAddCategories', 'id', id)
			// verify required parameter 'discountAddCategoriesDto' is not null or undefined
			assertParamExists('discountSalesAddCategories', 'discountAddCategoriesDto', discountAddCategoriesDto)
			const localVarPath = `/api/v1/discounts/{id}/categories`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(discountAddCategoriesDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddCollectionsDto} discountAddCollectionsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesAddCollections: async (id: number, discountAddCollectionsDto: DiscountAddCollectionsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesAddCollections', 'id', id)
			// verify required parameter 'discountAddCollectionsDto' is not null or undefined
			assertParamExists('discountSalesAddCollections', 'discountAddCollectionsDto', discountAddCollectionsDto)
			const localVarPath = `/api/v1/discounts/{id}/collections`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(discountAddCollectionsDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddProductsDto} discountAddProductsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesAddProducts: async (id: number, discountAddProductsDto: DiscountAddProductsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesAddProducts', 'id', id)
			// verify required parameter 'discountAddProductsDto' is not null or undefined
			assertParamExists('discountSalesAddProducts', 'discountAddProductsDto', discountAddProductsDto)
			const localVarPath = `/api/v1/discounts/{id}/products`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(discountAddProductsDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddVariantsDto} discountAddVariantsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesAddVariants: async (id: number, discountAddVariantsDto: DiscountAddVariantsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesAddVariants', 'id', id)
			// verify required parameter 'discountAddVariantsDto' is not null or undefined
			assertParamExists('discountSalesAddVariants', 'discountAddVariantsDto', discountAddVariantsDto)
			const localVarPath = `/api/v1/discounts/{id}/variants`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(discountAddVariantsDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {CreateDiscountSaleDto} createDiscountSaleDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesCreate: async (createDiscountSaleDto: CreateDiscountSaleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createDiscountSaleDto' is not null or undefined
			assertParamExists('discountSalesCreate', 'createDiscountSaleDto', createDiscountSaleDto)
			const localVarPath = `/api/v1/discounts`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createDiscountSaleDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/discounts`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesFindOne: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesFindOne', 'id', id)
			const localVarPath = `/api/v1/discounts/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesRemove: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesRemove', 'id', id)
			const localVarPath = `/api/v1/discounts/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} categoryId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesRemoveCategory: async (id: number, categoryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesRemoveCategory', 'id', id)
			// verify required parameter 'categoryId' is not null or undefined
			assertParamExists('discountSalesRemoveCategory', 'categoryId', categoryId)
			const localVarPath = `/api/v1/discounts/{id}/categories/{categoryId}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)))
				.replace(`{${ "categoryId" }}`, encodeURIComponent(String(categoryId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} collectionId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesRemoveCollection: async (id: number, collectionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesRemoveCollection', 'id', id)
			// verify required parameter 'collectionId' is not null or undefined
			assertParamExists('discountSalesRemoveCollection', 'collectionId', collectionId)
			const localVarPath = `/api/v1/discounts/{id}/collections/{collectionId}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)))
				.replace(`{${ "collectionId" }}`, encodeURIComponent(String(collectionId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} productId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesRemoveProduct: async (id: number, productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesRemoveProduct', 'id', id)
			// verify required parameter 'productId' is not null or undefined
			assertParamExists('discountSalesRemoveProduct', 'productId', productId)
			const localVarPath = `/api/v1/discounts/{id}/products/{productId}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)))
				.replace(`{${ "productId" }}`, encodeURIComponent(String(productId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} variantId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesRemoveVariant: async (id: number, variantId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesRemoveVariant', 'id', id)
			// verify required parameter 'variantId' is not null or undefined
			assertParamExists('discountSalesRemoveVariant', 'variantId', variantId)
			const localVarPath = `/api/v1/discounts/{id}/variants/{variantId}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)))
				.replace(`{${ "variantId" }}`, encodeURIComponent(String(variantId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateDiscountDto} updateDiscountDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesUpdate: async (id: number, updateDiscountDto: UpdateDiscountDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesUpdate', 'id', id)
			// verify required parameter 'updateDiscountDto' is not null or undefined
			assertParamExists('discountSalesUpdate', 'updateDiscountDto', updateDiscountDto)
			const localVarPath = `/api/v1/discounts/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateDiscountDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * DiscountApi - functional programming interface
 * @export
 */
export const DiscountApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = DiscountApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddCategoriesDto} discountAddCategoriesDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesAddCategories(id: number, discountAddCategoriesDto: DiscountAddCategoriesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountSaleDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesAddCategories(id, discountAddCategoriesDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddCollectionsDto} discountAddCollectionsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesAddCollections(id: number, discountAddCollectionsDto: DiscountAddCollectionsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountSaleDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesAddCollections(id, discountAddCollectionsDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddProductsDto} discountAddProductsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesAddProducts(id: number, discountAddProductsDto: DiscountAddProductsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountSaleDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesAddProducts(id, discountAddProductsDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddVariantsDto} discountAddVariantsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesAddVariants(id: number, discountAddVariantsDto: DiscountAddVariantsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountSaleDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesAddVariants(id, discountAddVariantsDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {CreateDiscountSaleDto} createDiscountSaleDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesCreate(createDiscountSaleDto: CreateDiscountSaleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountSaleDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesCreate(createDiscountSaleDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DiscountSaleDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesFindOne(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountSaleDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesFindOne(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesRemove(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountSaleDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} categoryId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesRemoveCategory(id: number, categoryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountSaleDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesRemoveCategory(id, categoryId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} collectionId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesRemoveCollection(id: number, collectionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountSaleDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesRemoveCollection(id, collectionId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} productId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesRemoveProduct(id: number, productId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountSaleDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesRemoveProduct(id, productId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} variantId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesRemoveVariant(id: number, variantId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountSaleDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesRemoveVariant(id, variantId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateDiscountDto} updateDiscountDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesUpdate(id: number, updateDiscountDto: UpdateDiscountDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountSaleDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesUpdate(id, updateDiscountDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * DiscountApi - factory interface
 * @export
 */
export const DiscountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = DiscountApiFp(configuration)
	return {
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddCategoriesDto} discountAddCategoriesDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesAddCategories(id: number, discountAddCategoriesDto: DiscountAddCategoriesDto, options?: any): AxiosPromise<DiscountSaleDto> {
			return localVarFp.discountSalesAddCategories(id, discountAddCategoriesDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddCollectionsDto} discountAddCollectionsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesAddCollections(id: number, discountAddCollectionsDto: DiscountAddCollectionsDto, options?: any): AxiosPromise<DiscountSaleDto> {
			return localVarFp.discountSalesAddCollections(id, discountAddCollectionsDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddProductsDto} discountAddProductsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesAddProducts(id: number, discountAddProductsDto: DiscountAddProductsDto, options?: any): AxiosPromise<DiscountSaleDto> {
			return localVarFp.discountSalesAddProducts(id, discountAddProductsDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddVariantsDto} discountAddVariantsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesAddVariants(id: number, discountAddVariantsDto: DiscountAddVariantsDto, options?: any): AxiosPromise<DiscountSaleDto> {
			return localVarFp.discountSalesAddVariants(id, discountAddVariantsDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {CreateDiscountSaleDto} createDiscountSaleDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesCreate(createDiscountSaleDto: CreateDiscountSaleDto, options?: any): AxiosPromise<DiscountSaleDto> {
			return localVarFp.discountSalesCreate(createDiscountSaleDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesFindAll(options?: any): AxiosPromise<Array<DiscountSaleDto>> {
			return localVarFp.discountSalesFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesFindOne(id: number, options?: any): AxiosPromise<DiscountSaleDto> {
			return localVarFp.discountSalesFindOne(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesRemove(id: number, options?: any): AxiosPromise<DiscountSaleDto> {
			return localVarFp.discountSalesRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} categoryId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesRemoveCategory(id: number, categoryId: number, options?: any): AxiosPromise<DiscountSaleDto> {
			return localVarFp.discountSalesRemoveCategory(id, categoryId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} collectionId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesRemoveCollection(id: number, collectionId: number, options?: any): AxiosPromise<DiscountSaleDto> {
			return localVarFp.discountSalesRemoveCollection(id, collectionId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} productId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesRemoveProduct(id: number, productId: number, options?: any): AxiosPromise<DiscountSaleDto> {
			return localVarFp.discountSalesRemoveProduct(id, productId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} variantId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesRemoveVariant(id: number, variantId: number, options?: any): AxiosPromise<DiscountSaleDto> {
			return localVarFp.discountSalesRemoveVariant(id, variantId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateDiscountDto} updateDiscountDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesUpdate(id: number, updateDiscountDto: UpdateDiscountDto, options?: any): AxiosPromise<DiscountSaleDto> {
			return localVarFp.discountSalesUpdate(id, updateDiscountDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for discountSalesAddCategories operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesAddCategoriesRequest
 */
export interface DiscountApiDiscountSalesAddCategoriesRequest {
	/**
	 *
	 * @type {number}
	 * @memberof DiscountApiDiscountSalesAddCategories
	 */
	readonly id: number;

	/**
	 *
	 * @type {DiscountAddCategoriesDto}
	 * @memberof DiscountApiDiscountSalesAddCategories
	 */
	readonly discountAddCategoriesDto: DiscountAddCategoriesDto;
}

/**
 * Request parameters for discountSalesAddCollections operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesAddCollectionsRequest
 */
export interface DiscountApiDiscountSalesAddCollectionsRequest {
	/**
	 *
	 * @type {number}
	 * @memberof DiscountApiDiscountSalesAddCollections
	 */
	readonly id: number;

	/**
	 *
	 * @type {DiscountAddCollectionsDto}
	 * @memberof DiscountApiDiscountSalesAddCollections
	 */
	readonly discountAddCollectionsDto: DiscountAddCollectionsDto;
}

/**
 * Request parameters for discountSalesAddProducts operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesAddProductsRequest
 */
export interface DiscountApiDiscountSalesAddProductsRequest {
	/**
	 *
	 * @type {number}
	 * @memberof DiscountApiDiscountSalesAddProducts
	 */
	readonly id: number;

	/**
	 *
	 * @type {DiscountAddProductsDto}
	 * @memberof DiscountApiDiscountSalesAddProducts
	 */
	readonly discountAddProductsDto: DiscountAddProductsDto;
}

/**
 * Request parameters for discountSalesAddVariants operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesAddVariantsRequest
 */
export interface DiscountApiDiscountSalesAddVariantsRequest {
	/**
	 *
	 * @type {number}
	 * @memberof DiscountApiDiscountSalesAddVariants
	 */
	readonly id: number;

	/**
	 *
	 * @type {DiscountAddVariantsDto}
	 * @memberof DiscountApiDiscountSalesAddVariants
	 */
	readonly discountAddVariantsDto: DiscountAddVariantsDto;
}

/**
 * Request parameters for discountSalesCreate operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesCreateRequest
 */
export interface DiscountApiDiscountSalesCreateRequest {
	/**
	 *
	 * @type {CreateDiscountSaleDto}
	 * @memberof DiscountApiDiscountSalesCreate
	 */
	readonly createDiscountSaleDto: CreateDiscountSaleDto;
}

/**
 * Request parameters for discountSalesFindOne operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesFindOneRequest
 */
export interface DiscountApiDiscountSalesFindOneRequest {
	/**
	 *
	 * @type {number}
	 * @memberof DiscountApiDiscountSalesFindOne
	 */
	readonly id: number;
}

/**
 * Request parameters for discountSalesRemove operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesRemoveRequest
 */
export interface DiscountApiDiscountSalesRemoveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof DiscountApiDiscountSalesRemove
	 */
	readonly id: number;
}

/**
 * Request parameters for discountSalesRemoveCategory operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesRemoveCategoryRequest
 */
export interface DiscountApiDiscountSalesRemoveCategoryRequest {
	/**
	 *
	 * @type {number}
	 * @memberof DiscountApiDiscountSalesRemoveCategory
	 */
	readonly id: number;

	/**
	 *
	 * @type {number}
	 * @memberof DiscountApiDiscountSalesRemoveCategory
	 */
	readonly categoryId: number;
}

/**
 * Request parameters for discountSalesRemoveCollection operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesRemoveCollectionRequest
 */
export interface DiscountApiDiscountSalesRemoveCollectionRequest {
	/**
	 *
	 * @type {number}
	 * @memberof DiscountApiDiscountSalesRemoveCollection
	 */
	readonly id: number;

	/**
	 *
	 * @type {number}
	 * @memberof DiscountApiDiscountSalesRemoveCollection
	 */
	readonly collectionId: number;
}

/**
 * Request parameters for discountSalesRemoveProduct operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesRemoveProductRequest
 */
export interface DiscountApiDiscountSalesRemoveProductRequest {
	/**
	 *
	 * @type {number}
	 * @memberof DiscountApiDiscountSalesRemoveProduct
	 */
	readonly id: number;

	/**
	 *
	 * @type {number}
	 * @memberof DiscountApiDiscountSalesRemoveProduct
	 */
	readonly productId: number;
}

/**
 * Request parameters for discountSalesRemoveVariant operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesRemoveVariantRequest
 */
export interface DiscountApiDiscountSalesRemoveVariantRequest {
	/**
	 *
	 * @type {number}
	 * @memberof DiscountApiDiscountSalesRemoveVariant
	 */
	readonly id: number;

	/**
	 *
	 * @type {number}
	 * @memberof DiscountApiDiscountSalesRemoveVariant
	 */
	readonly variantId: number;
}

/**
 * Request parameters for discountSalesUpdate operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesUpdateRequest
 */
export interface DiscountApiDiscountSalesUpdateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof DiscountApiDiscountSalesUpdate
	 */
	readonly id: number;

	/**
	 *
	 * @type {UpdateDiscountDto}
	 * @memberof DiscountApiDiscountSalesUpdate
	 */
	readonly updateDiscountDto: UpdateDiscountDto;
}

/**
 * DiscountApi - object-oriented interface
 * @export
 * @class DiscountApi
 * @extends {BaseAPI}
 */
export class DiscountApi extends BaseAPI {
	/**
	 *
	 * @param {DiscountApiDiscountSalesAddCategoriesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesAddCategories(requestParameters: DiscountApiDiscountSalesAddCategoriesRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesAddCategories(requestParameters.id, requestParameters.discountAddCategoriesDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesAddCollectionsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesAddCollections(requestParameters: DiscountApiDiscountSalesAddCollectionsRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesAddCollections(requestParameters.id, requestParameters.discountAddCollectionsDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesAddProductsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesAddProducts(requestParameters: DiscountApiDiscountSalesAddProductsRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesAddProducts(requestParameters.id, requestParameters.discountAddProductsDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesAddVariantsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesAddVariants(requestParameters: DiscountApiDiscountSalesAddVariantsRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesAddVariants(requestParameters.id, requestParameters.discountAddVariantsDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesCreate(requestParameters: DiscountApiDiscountSalesCreateRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesCreate(requestParameters.createDiscountSaleDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesFindAll(options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesFindOne(requestParameters: DiscountApiDiscountSalesFindOneRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesRemove(requestParameters: DiscountApiDiscountSalesRemoveRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesRemoveCategoryRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesRemoveCategory(requestParameters: DiscountApiDiscountSalesRemoveCategoryRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesRemoveCategory(requestParameters.id, requestParameters.categoryId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesRemoveCollectionRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesRemoveCollection(requestParameters: DiscountApiDiscountSalesRemoveCollectionRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesRemoveCollection(requestParameters.id, requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesRemoveProductRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesRemoveProduct(requestParameters: DiscountApiDiscountSalesRemoveProductRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesRemoveProduct(requestParameters.id, requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesRemoveVariantRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesRemoveVariant(requestParameters: DiscountApiDiscountSalesRemoveVariantRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesRemoveVariant(requestParameters.id, requestParameters.variantId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesUpdate(requestParameters: DiscountApiDiscountSalesUpdateRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesUpdate(requestParameters.id, requestParameters.updateDiscountDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * MediaApi - axios parameter creator
 * @export
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {any} [file]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaCreateMedia: async (file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/media`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;
			const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			if ( file !== undefined ) {
				localVarFormParams.append('file', file as any);
			}


			localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = localVarFormParams;

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('mediaDeleteById', 'id', id)
			const localVarPath = `/api/v1/media/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaGetById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('mediaGetById', 'id', id)
			const localVarPath = `/api/v1/media/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} [page]
		 * @param {number} [pageSize]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaListMedia: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/media`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			if ( page !== undefined ) {
				localVarQueryParameter['page'] = page;
			}

			if ( pageSize !== undefined ) {
				localVarQueryParameter['pageSize'] = pageSize;
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * MediaApi - functional programming interface
 * @export
 */
export const MediaApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = MediaApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {any} [file]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async mediaCreateMedia(file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.mediaCreateMedia(file, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async mediaDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.mediaDeleteById(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async mediaGetById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.mediaGetById(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} [page]
		 * @param {number} [pageSize]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async mediaListMedia(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaListPaginated>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.mediaListMedia(page, pageSize, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * MediaApi - factory interface
 * @export
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = MediaApiFp(configuration)
	return {
		/**
		 *
		 * @param {any} [file]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaCreateMedia(file?: any, options?: any): AxiosPromise<MediaDto> {
			return localVarFp.mediaCreateMedia(file, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaDeleteById(id: number, options?: any): AxiosPromise<MediaDto> {
			return localVarFp.mediaDeleteById(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaGetById(id: number, options?: any): AxiosPromise<MediaDto> {
			return localVarFp.mediaGetById(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} [page]
		 * @param {number} [pageSize]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		mediaListMedia(page?: number, pageSize?: number, options?: any): AxiosPromise<MediaListPaginated> {
			return localVarFp.mediaListMedia(page, pageSize, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for mediaCreateMedia operation in MediaApi.
 * @export
 * @interface MediaApiMediaCreateMediaRequest
 */
export interface MediaApiMediaCreateMediaRequest {
	/**
	 *
	 * @type {any}
	 * @memberof MediaApiMediaCreateMedia
	 */
	readonly file?: any;
}

/**
 * Request parameters for mediaDeleteById operation in MediaApi.
 * @export
 * @interface MediaApiMediaDeleteByIdRequest
 */
export interface MediaApiMediaDeleteByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof MediaApiMediaDeleteById
	 */
	readonly id: number;
}

/**
 * Request parameters for mediaGetById operation in MediaApi.
 * @export
 * @interface MediaApiMediaGetByIdRequest
 */
export interface MediaApiMediaGetByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof MediaApiMediaGetById
	 */
	readonly id: number;
}

/**
 * Request parameters for mediaListMedia operation in MediaApi.
 * @export
 * @interface MediaApiMediaListMediaRequest
 */
export interface MediaApiMediaListMediaRequest {
	/**
	 *
	 * @type {number}
	 * @memberof MediaApiMediaListMedia
	 */
	readonly page?: number;

	/**
	 *
	 * @type {number}
	 * @memberof MediaApiMediaListMedia
	 */
	readonly pageSize?: number;
}

/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export class MediaApi extends BaseAPI {
	/**
	 *
	 * @param {MediaApiMediaCreateMediaRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MediaApi
	 */
	public mediaCreateMedia(requestParameters: MediaApiMediaCreateMediaRequest = {}, options?: AxiosRequestConfig) {
		return MediaApiFp(this.configuration).mediaCreateMedia(requestParameters.file, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {MediaApiMediaDeleteByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MediaApi
	 */
	public mediaDeleteById(requestParameters: MediaApiMediaDeleteByIdRequest, options?: AxiosRequestConfig) {
		return MediaApiFp(this.configuration).mediaDeleteById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {MediaApiMediaGetByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MediaApi
	 */
	public mediaGetById(requestParameters: MediaApiMediaGetByIdRequest, options?: AxiosRequestConfig) {
		return MediaApiFp(this.configuration).mediaGetById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {MediaApiMediaListMediaRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof MediaApi
	 */
	public mediaListMedia(requestParameters: MediaApiMediaListMediaRequest = {}, options?: AxiosRequestConfig) {
		return MediaApiFp(this.configuration).mediaListMedia(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateOrderDto} createOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderCreate: async (createOrderDto: CreateOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createOrderDto' is not null or undefined
			assertParamExists('orderCreate', 'createOrderDto', createOrderDto)
			const localVarPath = `/api/v1/order`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createOrderDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {CreateOrderFromCheckoutDto} createOrderFromCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderCreateFromCheckout: async (createOrderFromCheckoutDto: CreateOrderFromCheckoutDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createOrderFromCheckoutDto' is not null or undefined
			assertParamExists('orderCreateFromCheckout', 'createOrderFromCheckoutDto', createOrderFromCheckoutDto)
			const localVarPath = `/api/v1/order/token`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createOrderFromCheckoutDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {CreateOrderEventDto} createOrderEventDto
		 * @param {boolean} [notifyCustomer]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderCreateOrderEvent: async (id: number, createOrderEventDto: CreateOrderEventDto, notifyCustomer?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('orderCreateOrderEvent', 'id', id)
			// verify required parameter 'createOrderEventDto' is not null or undefined
			assertParamExists('orderCreateOrderEvent', 'createOrderEventDto', createOrderEventDto)
			const localVarPath = `/api/v1/order/{id}/events`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			if ( notifyCustomer !== undefined ) {
				localVarQueryParameter['notifyCustomer'] = notifyCustomer;
			}


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createOrderEventDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} [page]
		 * @param {number} [itemsPerPage]
		 * @param {OrderStatus} [status]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderFindAll: async (page?: number, itemsPerPage?: number, status?: OrderStatus, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/order`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			if ( page !== undefined ) {
				localVarQueryParameter['page'] = page;
			}

			if ( itemsPerPage !== undefined ) {
				localVarQueryParameter['itemsPerPage'] = itemsPerPage;
			}

			if ( status !== undefined ) {
				localVarQueryParameter['status'] = status;
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderFindOne: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('orderFindOne', 'id', id)
			const localVarPath = `/api/v1/order/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderRemove: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('orderRemove', 'id', id)
			const localVarPath = `/api/v1/order/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateOrderDto} updateOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderUpdate: async (id: number, updateOrderDto: UpdateOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('orderUpdate', 'id', id)
			// verify required parameter 'updateOrderDto' is not null or undefined
			assertParamExists('orderUpdate', 'updateOrderDto', updateOrderDto)
			const localVarPath = `/api/v1/order/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateOrderDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdatePaymentStatusDto} updatePaymentStatusDto
		 * @param {boolean} [notifyCustomer]
		 * @param {string} [xAPIKEY]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderUpdatePaymentStatus: async (id: number, updatePaymentStatusDto: UpdatePaymentStatusDto, notifyCustomer?: boolean, xAPIKEY?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('orderUpdatePaymentStatus', 'id', id)
			// verify required parameter 'updatePaymentStatusDto' is not null or undefined
			assertParamExists('orderUpdatePaymentStatus', 'updatePaymentStatusDto', updatePaymentStatusDto)
			const localVarPath = `/api/v1/order/{id}/payment/status`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			if ( notifyCustomer !== undefined ) {
				localVarQueryParameter['notifyCustomer'] = notifyCustomer;
			}

			if ( xAPIKEY !== undefined && xAPIKEY !== null ) {
				localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
			}


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updatePaymentStatusDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateOrderStatusDto} updateOrderStatusDto
		 * @param {string} [xAPIKEY]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderUpdateStatus: async (id: number, updateOrderStatusDto: UpdateOrderStatusDto, xAPIKEY?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('orderUpdateStatus', 'id', id)
			// verify required parameter 'updateOrderStatusDto' is not null or undefined
			assertParamExists('orderUpdateStatus', 'updateOrderStatusDto', updateOrderStatusDto)
			const localVarPath = `/api/v1/order/{id}/status`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			if ( xAPIKEY !== undefined && xAPIKEY !== null ) {
				localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
			}


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateOrderStatusDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateOrderDto} createOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderCreate(createOrderDto: CreateOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderCreate(createOrderDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {CreateOrderFromCheckoutDto} createOrderFromCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderCreateFromCheckout(createOrderFromCheckoutDto: CreateOrderFromCheckoutDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderCreateFromCheckout(createOrderFromCheckoutDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {CreateOrderEventDto} createOrderEventDto
		 * @param {boolean} [notifyCustomer]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderCreateOrderEvent(id: number, createOrderEventDto: CreateOrderEventDto, notifyCustomer?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderEventDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderCreateOrderEvent(id, createOrderEventDto, notifyCustomer, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} [page]
		 * @param {number} [itemsPerPage]
		 * @param {OrderStatus} [status]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderFindAll(page?: number, itemsPerPage?: number, status?: OrderStatus, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderListPaginated>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderFindAll(page, itemsPerPage, status, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderFindOne(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderFindOne(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderRemove(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateOrderDto} updateOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderUpdate(id: number, updateOrderDto: UpdateOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderUpdate(id, updateOrderDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdatePaymentStatusDto} updatePaymentStatusDto
		 * @param {boolean} [notifyCustomer]
		 * @param {string} [xAPIKEY]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderUpdatePaymentStatus(id: number, updatePaymentStatusDto: UpdatePaymentStatusDto, notifyCustomer?: boolean, xAPIKEY?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderUpdatePaymentStatus(id, updatePaymentStatusDto, notifyCustomer, xAPIKEY, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateOrderStatusDto} updateOrderStatusDto
		 * @param {string} [xAPIKEY]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderUpdateStatus(id: number, updateOrderStatusDto: UpdateOrderStatusDto, xAPIKEY?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderUpdateStatus(id, updateOrderStatusDto, xAPIKEY, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = OrdersApiFp(configuration)
	return {
		/**
		 *
		 * @param {CreateOrderDto} createOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderCreate(createOrderDto: CreateOrderDto, options?: any): AxiosPromise<OrderDto> {
			return localVarFp.orderCreate(createOrderDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {CreateOrderFromCheckoutDto} createOrderFromCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderCreateFromCheckout(createOrderFromCheckoutDto: CreateOrderFromCheckoutDto, options?: any): AxiosPromise<OrderDto> {
			return localVarFp.orderCreateFromCheckout(createOrderFromCheckoutDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {CreateOrderEventDto} createOrderEventDto
		 * @param {boolean} [notifyCustomer]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderCreateOrderEvent(id: number, createOrderEventDto: CreateOrderEventDto, notifyCustomer?: boolean, options?: any): AxiosPromise<OrderEventDto> {
			return localVarFp.orderCreateOrderEvent(id, createOrderEventDto, notifyCustomer, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} [page]
		 * @param {number} [itemsPerPage]
		 * @param {OrderStatus} [status]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderFindAll(page?: number, itemsPerPage?: number, status?: OrderStatus, options?: any): AxiosPromise<OrderListPaginated> {
			return localVarFp.orderFindAll(page, itemsPerPage, status, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderFindOne(id: number, options?: any): AxiosPromise<OrderDto> {
			return localVarFp.orderFindOne(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderRemove(id: number, options?: any): AxiosPromise<OrderDto> {
			return localVarFp.orderRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateOrderDto} updateOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderUpdate(id: number, updateOrderDto: UpdateOrderDto, options?: any): AxiosPromise<OrderDto> {
			return localVarFp.orderUpdate(id, updateOrderDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdatePaymentStatusDto} updatePaymentStatusDto
		 * @param {boolean} [notifyCustomer]
		 * @param {string} [xAPIKEY]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderUpdatePaymentStatus(id: number, updatePaymentStatusDto: UpdatePaymentStatusDto, notifyCustomer?: boolean, xAPIKEY?: string, options?: any): AxiosPromise<OrderDto> {
			return localVarFp.orderUpdatePaymentStatus(id, updatePaymentStatusDto, notifyCustomer, xAPIKEY, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateOrderStatusDto} updateOrderStatusDto
		 * @param {string} [xAPIKEY]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderUpdateStatus(id: number, updateOrderStatusDto: UpdateOrderStatusDto, xAPIKEY?: string, options?: any): AxiosPromise<OrderDto> {
			return localVarFp.orderUpdateStatus(id, updateOrderStatusDto, xAPIKEY, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for orderCreate operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderCreateRequest
 */
export interface OrdersApiOrderCreateRequest {
	/**
	 *
	 * @type {CreateOrderDto}
	 * @memberof OrdersApiOrderCreate
	 */
	readonly createOrderDto: CreateOrderDto;
}

/**
 * Request parameters for orderCreateFromCheckout operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderCreateFromCheckoutRequest
 */
export interface OrdersApiOrderCreateFromCheckoutRequest {
	/**
	 *
	 * @type {CreateOrderFromCheckoutDto}
	 * @memberof OrdersApiOrderCreateFromCheckout
	 */
	readonly createOrderFromCheckoutDto: CreateOrderFromCheckoutDto;
}

/**
 * Request parameters for orderCreateOrderEvent operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderCreateOrderEventRequest
 */
export interface OrdersApiOrderCreateOrderEventRequest {
	/**
	 *
	 * @type {number}
	 * @memberof OrdersApiOrderCreateOrderEvent
	 */
	readonly id: number;

	/**
	 *
	 * @type {CreateOrderEventDto}
	 * @memberof OrdersApiOrderCreateOrderEvent
	 */
	readonly createOrderEventDto: CreateOrderEventDto;

	/**
	 *
	 * @type {boolean}
	 * @memberof OrdersApiOrderCreateOrderEvent
	 */
	readonly notifyCustomer?: boolean;
}

/**
 * Request parameters for orderFindAll operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderFindAllRequest
 */
export interface OrdersApiOrderFindAllRequest {
	/**
	 *
	 * @type {number}
	 * @memberof OrdersApiOrderFindAll
	 */
	readonly page?: number;

	/**
	 *
	 * @type {number}
	 * @memberof OrdersApiOrderFindAll
	 */
	readonly itemsPerPage?: number;

	/**
	 *
	 * @type {OrderStatus}
	 * @memberof OrdersApiOrderFindAll
	 */
	readonly status?: OrderStatus;
}

/**
 * Request parameters for orderFindOne operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderFindOneRequest
 */
export interface OrdersApiOrderFindOneRequest {
	/**
	 *
	 * @type {number}
	 * @memberof OrdersApiOrderFindOne
	 */
	readonly id: number;
}

/**
 * Request parameters for orderRemove operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderRemoveRequest
 */
export interface OrdersApiOrderRemoveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof OrdersApiOrderRemove
	 */
	readonly id: number;
}

/**
 * Request parameters for orderUpdate operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderUpdateRequest
 */
export interface OrdersApiOrderUpdateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof OrdersApiOrderUpdate
	 */
	readonly id: number;

	/**
	 *
	 * @type {UpdateOrderDto}
	 * @memberof OrdersApiOrderUpdate
	 */
	readonly updateOrderDto: UpdateOrderDto;
}

/**
 * Request parameters for orderUpdatePaymentStatus operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderUpdatePaymentStatusRequest
 */
export interface OrdersApiOrderUpdatePaymentStatusRequest {
	/**
	 *
	 * @type {number}
	 * @memberof OrdersApiOrderUpdatePaymentStatus
	 */
	readonly id: number;

	/**
	 *
	 * @type {UpdatePaymentStatusDto}
	 * @memberof OrdersApiOrderUpdatePaymentStatus
	 */
	readonly updatePaymentStatusDto: UpdatePaymentStatusDto;

	/**
	 *
	 * @type {boolean}
	 * @memberof OrdersApiOrderUpdatePaymentStatus
	 */
	readonly notifyCustomer?: boolean;

	/**
	 *
	 * @type {string}
	 * @memberof OrdersApiOrderUpdatePaymentStatus
	 */
	readonly xAPIKEY?: string;
}

/**
 * Request parameters for orderUpdateStatus operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderUpdateStatusRequest
 */
export interface OrdersApiOrderUpdateStatusRequest {
	/**
	 *
	 * @type {number}
	 * @memberof OrdersApiOrderUpdateStatus
	 */
	readonly id: number;

	/**
	 *
	 * @type {UpdateOrderStatusDto}
	 * @memberof OrdersApiOrderUpdateStatus
	 */
	readonly updateOrderStatusDto: UpdateOrderStatusDto;

	/**
	 *
	 * @type {string}
	 * @memberof OrdersApiOrderUpdateStatus
	 */
	readonly xAPIKEY?: string;
}

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
	/**
	 *
	 * @param {OrdersApiOrderCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderCreate(requestParameters: OrdersApiOrderCreateRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderCreate(requestParameters.createOrderDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {OrdersApiOrderCreateFromCheckoutRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderCreateFromCheckout(requestParameters: OrdersApiOrderCreateFromCheckoutRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderCreateFromCheckout(requestParameters.createOrderFromCheckoutDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {OrdersApiOrderCreateOrderEventRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderCreateOrderEvent(requestParameters: OrdersApiOrderCreateOrderEventRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderCreateOrderEvent(requestParameters.id, requestParameters.createOrderEventDto, requestParameters.notifyCustomer, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {OrdersApiOrderFindAllRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderFindAll(requestParameters: OrdersApiOrderFindAllRequest = {}, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderFindAll(requestParameters.page, requestParameters.itemsPerPage, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {OrdersApiOrderFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderFindOne(requestParameters: OrdersApiOrderFindOneRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {OrdersApiOrderRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderRemove(requestParameters: OrdersApiOrderRemoveRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {OrdersApiOrderUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderUpdate(requestParameters: OrdersApiOrderUpdateRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderUpdate(requestParameters.id, requestParameters.updateOrderDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {OrdersApiOrderUpdatePaymentStatusRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderUpdatePaymentStatus(requestParameters: OrdersApiOrderUpdatePaymentStatusRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderUpdatePaymentStatus(requestParameters.id, requestParameters.updatePaymentStatusDto, requestParameters.notifyCustomer, requestParameters.xAPIKEY, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {OrdersApiOrderUpdateStatusRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderUpdateStatus(requestParameters: OrdersApiOrderUpdateStatusRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderUpdateStatus(requestParameters.id, requestParameters.updateOrderStatusDto, requestParameters.xAPIKEY, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export const PaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {number} id
		 * @param {string} [xAPIKEY]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		paymentsGetById: async (id: number, xAPIKEY?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('paymentsGetById', 'id', id)
			const localVarPath = `/api/v1/payments/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			if ( xAPIKEY !== undefined && xAPIKEY !== null ) {
				localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdatePaymentDto} updatePaymentDto
		 * @param {string} [xAPIKEY]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		paymentsPatch: async (id: number, updatePaymentDto: UpdatePaymentDto, xAPIKEY?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('paymentsPatch', 'id', id)
			// verify required parameter 'updatePaymentDto' is not null or undefined
			assertParamExists('paymentsPatch', 'updatePaymentDto', updatePaymentDto)
			const localVarPath = `/api/v1/payments/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			if ( xAPIKEY !== undefined && xAPIKEY !== null ) {
				localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
			}


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updatePaymentDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * PaymentsApi - functional programming interface
 * @export
 */
export const PaymentsApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = PaymentsApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} id
		 * @param {string} [xAPIKEY]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async paymentsGetById(id: number, xAPIKEY?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.paymentsGetById(id, xAPIKEY, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdatePaymentDto} updatePaymentDto
		 * @param {string} [xAPIKEY]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async paymentsPatch(id: number, updatePaymentDto: UpdatePaymentDto, xAPIKEY?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.paymentsPatch(id, updatePaymentDto, xAPIKEY, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * PaymentsApi - factory interface
 * @export
 */
export const PaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = PaymentsApiFp(configuration)
	return {
		/**
		 *
		 * @param {number} id
		 * @param {string} [xAPIKEY]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		paymentsGetById(id: number, xAPIKEY?: string, options?: any): AxiosPromise<PaymentDto> {
			return localVarFp.paymentsGetById(id, xAPIKEY, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdatePaymentDto} updatePaymentDto
		 * @param {string} [xAPIKEY]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		paymentsPatch(id: number, updatePaymentDto: UpdatePaymentDto, xAPIKEY?: string, options?: any): AxiosPromise<PaymentDto> {
			return localVarFp.paymentsPatch(id, updatePaymentDto, xAPIKEY, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for paymentsGetById operation in PaymentsApi.
 * @export
 * @interface PaymentsApiPaymentsGetByIdRequest
 */
export interface PaymentsApiPaymentsGetByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof PaymentsApiPaymentsGetById
	 */
	readonly id: number;

	/**
	 *
	 * @type {string}
	 * @memberof PaymentsApiPaymentsGetById
	 */
	readonly xAPIKEY?: string;
}

/**
 * Request parameters for paymentsPatch operation in PaymentsApi.
 * @export
 * @interface PaymentsApiPaymentsPatchRequest
 */
export interface PaymentsApiPaymentsPatchRequest {
	/**
	 *
	 * @type {number}
	 * @memberof PaymentsApiPaymentsPatch
	 */
	readonly id: number;

	/**
	 *
	 * @type {UpdatePaymentDto}
	 * @memberof PaymentsApiPaymentsPatch
	 */
	readonly updatePaymentDto: UpdatePaymentDto;

	/**
	 *
	 * @type {string}
	 * @memberof PaymentsApiPaymentsPatch
	 */
	readonly xAPIKEY?: string;
}

/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export class PaymentsApi extends BaseAPI {
	/**
	 *
	 * @param {PaymentsApiPaymentsGetByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PaymentsApi
	 */
	public paymentsGetById(requestParameters: PaymentsApiPaymentsGetByIdRequest, options?: AxiosRequestConfig) {
		return PaymentsApiFp(this.configuration).paymentsGetById(requestParameters.id, requestParameters.xAPIKEY, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {PaymentsApiPaymentsPatchRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PaymentsApi
	 */
	public paymentsPatch(requestParameters: PaymentsApiPaymentsPatchRequest, options?: AxiosRequestConfig) {
		return PaymentsApiFp(this.configuration).paymentsPatch(requestParameters.id, requestParameters.updatePaymentDto, requestParameters.xAPIKEY, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * ProductTypesApi - axios parameter creator
 * @export
 */
export const ProductTypesApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateProductTypeDto} createProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesCreate: async (createProductTypeDto: CreateProductTypeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createProductTypeDto' is not null or undefined
			assertParamExists('productTypesCreate', 'createProductTypeDto', createProductTypeDto)
			const localVarPath = `/api/v1/product-types`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createProductTypeDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/product-types`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesGetById: async (productTypeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productTypeId' is not null or undefined
			assertParamExists('productTypesGetById', 'productTypeId', productTypeId)
			const localVarPath = `/api/v1/product-types/{productTypeId}`
				.replace(`{${ "productTypeId" }}`, encodeURIComponent(String(productTypeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesRemove: async (productTypeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productTypeId' is not null or undefined
			assertParamExists('productTypesRemove', 'productTypeId', productTypeId)
			const localVarPath = `/api/v1/product-types/{productTypeId}`
				.replace(`{${ "productTypeId" }}`, encodeURIComponent(String(productTypeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {CreateProductTypeDto} createProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesUpdate: async (productTypeId: number, createProductTypeDto: CreateProductTypeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productTypeId' is not null or undefined
			assertParamExists('productTypesUpdate', 'productTypeId', productTypeId)
			// verify required parameter 'createProductTypeDto' is not null or undefined
			assertParamExists('productTypesUpdate', 'createProductTypeDto', createProductTypeDto)
			const localVarPath = `/api/v1/product-types/{productTypeId}`
				.replace(`{${ "productTypeId" }}`, encodeURIComponent(String(productTypeId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createProductTypeDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * ProductTypesApi - functional programming interface
 * @export
 */
export const ProductTypesApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = ProductTypesApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateProductTypeDto} createProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productTypesCreate(createProductTypeDto: CreateProductTypeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTypeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productTypesCreate(createProductTypeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productTypesFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductTypeDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productTypesFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productTypesGetById(productTypeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTypeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productTypesGetById(productTypeId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productTypesRemove(productTypeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTypeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productTypesRemove(productTypeId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {CreateProductTypeDto} createProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productTypesUpdate(productTypeId: number, createProductTypeDto: CreateProductTypeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTypeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productTypesUpdate(productTypeId, createProductTypeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * ProductTypesApi - factory interface
 * @export
 */
export const ProductTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = ProductTypesApiFp(configuration)
	return {
		/**
		 *
		 * @param {CreateProductTypeDto} createProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesCreate(createProductTypeDto: CreateProductTypeDto, options?: any): AxiosPromise<ProductTypeDto> {
			return localVarFp.productTypesCreate(createProductTypeDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesFindAll(options?: any): AxiosPromise<Array<ProductTypeDto>> {
			return localVarFp.productTypesFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesGetById(productTypeId: number, options?: any): AxiosPromise<ProductTypeDto> {
			return localVarFp.productTypesGetById(productTypeId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesRemove(productTypeId: number, options?: any): AxiosPromise<ProductTypeDto> {
			return localVarFp.productTypesRemove(productTypeId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} productTypeId
		 * @param {CreateProductTypeDto} createProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesUpdate(productTypeId: number, createProductTypeDto: CreateProductTypeDto, options?: any): AxiosPromise<ProductTypeDto> {
			return localVarFp.productTypesUpdate(productTypeId, createProductTypeDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for productTypesCreate operation in ProductTypesApi.
 * @export
 * @interface ProductTypesApiProductTypesCreateRequest
 */
export interface ProductTypesApiProductTypesCreateRequest {
	/**
	 *
	 * @type {CreateProductTypeDto}
	 * @memberof ProductTypesApiProductTypesCreate
	 */
	readonly createProductTypeDto: CreateProductTypeDto;
}

/**
 * Request parameters for productTypesGetById operation in ProductTypesApi.
 * @export
 * @interface ProductTypesApiProductTypesGetByIdRequest
 */
export interface ProductTypesApiProductTypesGetByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypesApiProductTypesGetById
	 */
	readonly productTypeId: number;
}

/**
 * Request parameters for productTypesRemove operation in ProductTypesApi.
 * @export
 * @interface ProductTypesApiProductTypesRemoveRequest
 */
export interface ProductTypesApiProductTypesRemoveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypesApiProductTypesRemove
	 */
	readonly productTypeId: number;
}

/**
 * Request parameters for productTypesUpdate operation in ProductTypesApi.
 * @export
 * @interface ProductTypesApiProductTypesUpdateRequest
 */
export interface ProductTypesApiProductTypesUpdateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypesApiProductTypesUpdate
	 */
	readonly productTypeId: number;

	/**
	 *
	 * @type {CreateProductTypeDto}
	 * @memberof ProductTypesApiProductTypesUpdate
	 */
	readonly createProductTypeDto: CreateProductTypeDto;
}

/**
 * ProductTypesApi - object-oriented interface
 * @export
 * @class ProductTypesApi
 * @extends {BaseAPI}
 */
export class ProductTypesApi extends BaseAPI {
	/**
	 *
	 * @param {ProductTypesApiProductTypesCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductTypesApi
	 */
	public productTypesCreate(requestParameters: ProductTypesApiProductTypesCreateRequest, options?: AxiosRequestConfig) {
		return ProductTypesApiFp(this.configuration).productTypesCreate(requestParameters.createProductTypeDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductTypesApi
	 */
	public productTypesFindAll(options?: AxiosRequestConfig) {
		return ProductTypesApiFp(this.configuration).productTypesFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductTypesApiProductTypesGetByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductTypesApi
	 */
	public productTypesGetById(requestParameters: ProductTypesApiProductTypesGetByIdRequest, options?: AxiosRequestConfig) {
		return ProductTypesApiFp(this.configuration).productTypesGetById(requestParameters.productTypeId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductTypesApiProductTypesRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductTypesApi
	 */
	public productTypesRemove(requestParameters: ProductTypesApiProductTypesRemoveRequest, options?: AxiosRequestConfig) {
		return ProductTypesApiFp(this.configuration).productTypesRemove(requestParameters.productTypeId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductTypesApiProductTypesUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductTypesApi
	 */
	public productTypesUpdate(requestParameters: ProductTypesApiProductTypesUpdateRequest, options?: AxiosRequestConfig) {
		return ProductTypesApiFp(this.configuration).productTypesUpdate(requestParameters.productTypeId, requestParameters.createProductTypeDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * ProductVariantsApi - axios parameter creator
 * @export
 */
export const ProductVariantsApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {number} productId
		 * @param {CreateProductVariantDto} createProductVariantDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantCreate: async (productId: number, createProductVariantDto: CreateProductVariantDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productId' is not null or undefined
			assertParamExists('productVariantCreate', 'productId', productId)
			// verify required parameter 'createProductVariantDto' is not null or undefined
			assertParamExists('productVariantCreate', 'createProductVariantDto', createProductVariantDto)
			const localVarPath = `/api/v1/products/{productId}/variants`
				.replace(`{${ "productId" }}`, encodeURIComponent(String(productId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createProductVariantDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} productId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantFindOfProduct: async (productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productId' is not null or undefined
			assertParamExists('productVariantFindOfProduct', 'productId', productId)
			const localVarPath = `/api/v1/products/{productId}/variants`
				.replace(`{${ "productId" }}`, encodeURIComponent(String(productId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantGetById: async (productId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productId' is not null or undefined
			assertParamExists('productVariantGetById', 'productId', productId)
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productVariantGetById', 'id', id)
			const localVarPath = `/api/v1/products/{productId}/variants/{id}`
				.replace(`{${ "productId" }}`, encodeURIComponent(String(productId)))
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantRemove: async (productId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productId' is not null or undefined
			assertParamExists('productVariantRemove', 'productId', productId)
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productVariantRemove', 'id', id)
			const localVarPath = `/api/v1/products/{productId}/variants/{id}`
				.replace(`{${ "productId" }}`, encodeURIComponent(String(productId)))
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {CreateProductVariantDto} createProductVariantDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantUpdate: async (productId: number, id: number, createProductVariantDto: CreateProductVariantDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'productId' is not null or undefined
			assertParamExists('productVariantUpdate', 'productId', productId)
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productVariantUpdate', 'id', id)
			// verify required parameter 'createProductVariantDto' is not null or undefined
			assertParamExists('productVariantUpdate', 'createProductVariantDto', createProductVariantDto)
			const localVarPath = `/api/v1/products/{productId}/variants/{id}`
				.replace(`{${ "productId" }}`, encodeURIComponent(String(productId)))
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createProductVariantDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * ProductVariantsApi - functional programming interface
 * @export
 */
export const ProductVariantsApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = ProductVariantsApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} productId
		 * @param {CreateProductVariantDto} createProductVariantDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productVariantCreate(productId: number, createProductVariantDto: CreateProductVariantDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productVariantCreate(productId, createProductVariantDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} productId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productVariantFindOfProduct(productId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductVariantDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productVariantFindOfProduct(productId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productVariantGetById(productId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productVariantGetById(productId, id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productVariantRemove(productId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productVariantRemove(productId, id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {CreateProductVariantDto} createProductVariantDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productVariantUpdate(productId: number, id: number, createProductVariantDto: CreateProductVariantDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productVariantUpdate(productId, id, createProductVariantDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * ProductVariantsApi - factory interface
 * @export
 */
export const ProductVariantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = ProductVariantsApiFp(configuration)
	return {
		/**
		 *
		 * @param {number} productId
		 * @param {CreateProductVariantDto} createProductVariantDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantCreate(productId: number, createProductVariantDto: CreateProductVariantDto, options?: any): AxiosPromise<ProductVariantDto> {
			return localVarFp.productVariantCreate(productId, createProductVariantDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} productId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantFindOfProduct(productId: number, options?: any): AxiosPromise<Array<ProductVariantDto>> {
			return localVarFp.productVariantFindOfProduct(productId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantGetById(productId: number, id: number, options?: any): AxiosPromise<ProductVariantDto> {
			return localVarFp.productVariantGetById(productId, id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantRemove(productId: number, id: number, options?: any): AxiosPromise<ProductVariantDto> {
			return localVarFp.productVariantRemove(productId, id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} productId
		 * @param {number} id
		 * @param {CreateProductVariantDto} createProductVariantDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productVariantUpdate(productId: number, id: number, createProductVariantDto: CreateProductVariantDto, options?: any): AxiosPromise<ProductVariantDto> {
			return localVarFp.productVariantUpdate(productId, id, createProductVariantDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for productVariantCreate operation in ProductVariantsApi.
 * @export
 * @interface ProductVariantsApiProductVariantCreateRequest
 */
export interface ProductVariantsApiProductVariantCreateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantCreate
	 */
	readonly productId: number;

	/**
	 *
	 * @type {CreateProductVariantDto}
	 * @memberof ProductVariantsApiProductVariantCreate
	 */
	readonly createProductVariantDto: CreateProductVariantDto;
}

/**
 * Request parameters for productVariantFindOfProduct operation in ProductVariantsApi.
 * @export
 * @interface ProductVariantsApiProductVariantFindOfProductRequest
 */
export interface ProductVariantsApiProductVariantFindOfProductRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantFindOfProduct
	 */
	readonly productId: number;
}

/**
 * Request parameters for productVariantGetById operation in ProductVariantsApi.
 * @export
 * @interface ProductVariantsApiProductVariantGetByIdRequest
 */
export interface ProductVariantsApiProductVariantGetByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantGetById
	 */
	readonly productId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantGetById
	 */
	readonly id: number;
}

/**
 * Request parameters for productVariantRemove operation in ProductVariantsApi.
 * @export
 * @interface ProductVariantsApiProductVariantRemoveRequest
 */
export interface ProductVariantsApiProductVariantRemoveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantRemove
	 */
	readonly productId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantRemove
	 */
	readonly id: number;
}

/**
 * Request parameters for productVariantUpdate operation in ProductVariantsApi.
 * @export
 * @interface ProductVariantsApiProductVariantUpdateRequest
 */
export interface ProductVariantsApiProductVariantUpdateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantUpdate
	 */
	readonly productId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProductVariantsApiProductVariantUpdate
	 */
	readonly id: number;

	/**
	 *
	 * @type {CreateProductVariantDto}
	 * @memberof ProductVariantsApiProductVariantUpdate
	 */
	readonly createProductVariantDto: CreateProductVariantDto;
}

/**
 * ProductVariantsApi - object-oriented interface
 * @export
 * @class ProductVariantsApi
 * @extends {BaseAPI}
 */
export class ProductVariantsApi extends BaseAPI {
	/**
	 *
	 * @param {ProductVariantsApiProductVariantCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductVariantsApi
	 */
	public productVariantCreate(requestParameters: ProductVariantsApiProductVariantCreateRequest, options?: AxiosRequestConfig) {
		return ProductVariantsApiFp(this.configuration).productVariantCreate(requestParameters.productId, requestParameters.createProductVariantDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductVariantsApiProductVariantFindOfProductRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductVariantsApi
	 */
	public productVariantFindOfProduct(requestParameters: ProductVariantsApiProductVariantFindOfProductRequest, options?: AxiosRequestConfig) {
		return ProductVariantsApiFp(this.configuration).productVariantFindOfProduct(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductVariantsApiProductVariantGetByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductVariantsApi
	 */
	public productVariantGetById(requestParameters: ProductVariantsApiProductVariantGetByIdRequest, options?: AxiosRequestConfig) {
		return ProductVariantsApiFp(this.configuration).productVariantGetById(requestParameters.productId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductVariantsApiProductVariantRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductVariantsApi
	 */
	public productVariantRemove(requestParameters: ProductVariantsApiProductVariantRemoveRequest, options?: AxiosRequestConfig) {
		return ProductVariantsApiFp(this.configuration).productVariantRemove(requestParameters.productId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductVariantsApiProductVariantUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductVariantsApi
	 */
	public productVariantUpdate(requestParameters: ProductVariantsApiProductVariantUpdateRequest, options?: AxiosRequestConfig) {
		return ProductVariantsApiFp(this.configuration).productVariantUpdate(requestParameters.productId, requestParameters.id, requestParameters.createProductVariantDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateProductDto} createProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsCreate: async (createProductDto: CreateProductDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createProductDto' is not null or undefined
			assertParamExists('productsCreate', 'createProductDto', createProductDto)
			const localVarPath = `/api/v1/products`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createProductDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {Array<number>} [attributeValueIds]
		 * @param {number} [minPrice]
		 * @param {number} [maxPrice]
		 * @param {ProductSorting} [sorting]
		 * @param {LanguageCode} [language]
		 * @param {string} [search]
		 * @param {boolean} [variants]
		 * @param {number} [itemsPerPage]
		 * @param {number} [page]
		 * @param {number} [categoryId]
		 * @param {number} [collectionId]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsFindAll: async (attributeValueIds?: Array<number>, minPrice?: number, maxPrice?: number, sorting?: ProductSorting, language?: LanguageCode, search?: string, variants?: boolean, itemsPerPage?: number, page?: number, categoryId?: number, collectionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/products`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			if ( attributeValueIds ) {
				localVarQueryParameter['attributeValueIds'] = attributeValueIds;
			}

			if ( minPrice !== undefined ) {
				localVarQueryParameter['minPrice'] = minPrice;
			}

			if ( maxPrice !== undefined ) {
				localVarQueryParameter['maxPrice'] = maxPrice;
			}

			if ( sorting !== undefined ) {
				localVarQueryParameter['sorting'] = sorting;
			}

			if ( language !== undefined ) {
				localVarQueryParameter['language'] = language;
			}

			if ( search !== undefined ) {
				localVarQueryParameter['search'] = search;
			}

			if ( variants !== undefined ) {
				localVarQueryParameter['variants'] = variants;
			}

			if ( itemsPerPage !== undefined ) {
				localVarQueryParameter['itemsPerPage'] = itemsPerPage;
			}

			if ( page !== undefined ) {
				localVarQueryParameter['page'] = page;
			}

			if ( categoryId !== undefined ) {
				localVarQueryParameter['categoryId'] = categoryId;
			}

			if ( collectionId !== undefined ) {
				localVarQueryParameter['collectionId'] = collectionId;
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsGetAllIds: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/products/ids`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsGetById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productsGetById', 'id', id)
			const localVarPath = `/api/v1/products/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsRemove: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productsRemove', 'id', id)
			const localVarPath = `/api/v1/products/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {CreateProductDto} createProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsUpdate: async (id: number, createProductDto: CreateProductDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productsUpdate', 'id', id)
			// verify required parameter 'createProductDto' is not null or undefined
			assertParamExists('productsUpdate', 'createProductDto', createProductDto)
			const localVarPath = `/api/v1/products/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createProductDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateProductDto} createProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsCreate(createProductDto: CreateProductDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsCreate(createProductDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {Array<number>} [attributeValueIds]
		 * @param {number} [minPrice]
		 * @param {number} [maxPrice]
		 * @param {ProductSorting} [sorting]
		 * @param {LanguageCode} [language]
		 * @param {string} [search]
		 * @param {boolean} [variants]
		 * @param {number} [itemsPerPage]
		 * @param {number} [page]
		 * @param {number} [categoryId]
		 * @param {number} [collectionId]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsFindAll(attributeValueIds?: Array<number>, minPrice?: number, maxPrice?: number, sorting?: ProductSorting, language?: LanguageCode, search?: string, variants?: boolean, itemsPerPage?: number, page?: number, categoryId?: number, collectionId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFilterResultDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsFindAll(attributeValueIds, minPrice, maxPrice, sorting, language, search, variants, itemsPerPage, page, categoryId, collectionId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsGetAllIds(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsGetAllIds(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsGetById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsGetById(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsRemove(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {CreateProductDto} createProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsUpdate(id: number, createProductDto: CreateProductDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsUpdate(id, createProductDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = ProductsApiFp(configuration)
	return {
		/**
		 *
		 * @param {CreateProductDto} createProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsCreate(createProductDto: CreateProductDto, options?: any): AxiosPromise<ProductDto> {
			return localVarFp.productsCreate(createProductDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {Array<number>} [attributeValueIds]
		 * @param {number} [minPrice]
		 * @param {number} [maxPrice]
		 * @param {ProductSorting} [sorting]
		 * @param {LanguageCode} [language]
		 * @param {string} [search]
		 * @param {boolean} [variants]
		 * @param {number} [itemsPerPage]
		 * @param {number} [page]
		 * @param {number} [categoryId]
		 * @param {number} [collectionId]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsFindAll(attributeValueIds?: Array<number>, minPrice?: number, maxPrice?: number, sorting?: ProductSorting, language?: LanguageCode, search?: string, variants?: boolean, itemsPerPage?: number, page?: number, categoryId?: number, collectionId?: number, options?: any): AxiosPromise<ProductFilterResultDto> {
			return localVarFp.productsFindAll(attributeValueIds, minPrice, maxPrice, sorting, language, search, variants, itemsPerPage, page, categoryId, collectionId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsGetAllIds(options?: any): AxiosPromise<Array<number>> {
			return localVarFp.productsGetAllIds(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsGetById(id: number, options?: any): AxiosPromise<ProductDto> {
			return localVarFp.productsGetById(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsRemove(id: number, options?: any): AxiosPromise<ProductDto> {
			return localVarFp.productsRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {CreateProductDto} createProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsUpdate(id: number, createProductDto: CreateProductDto, options?: any): AxiosPromise<ProductDto> {
			return localVarFp.productsUpdate(id, createProductDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for productsCreate operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsCreateRequest
 */
export interface ProductsApiProductsCreateRequest {
	/**
	 *
	 * @type {CreateProductDto}
	 * @memberof ProductsApiProductsCreate
	 */
	readonly createProductDto: CreateProductDto;
}

/**
 * Request parameters for productsFindAll operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsFindAllRequest
 */
export interface ProductsApiProductsFindAllRequest {
	/**
	 *
	 * @type {Array<number>}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly attributeValueIds?: Array<number>;

	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly minPrice?: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly maxPrice?: number;

	/**
	 *
	 * @type {ProductSorting}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly sorting?: ProductSorting;

	/**
	 *
	 * @type {LanguageCode}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly language?: LanguageCode;

	/**
	 *
	 * @type {string}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly search?: string;

	/**
	 *
	 * @type {boolean}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly variants?: boolean;

	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly itemsPerPage?: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly page?: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly categoryId?: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsFindAll
	 */
	readonly collectionId?: number;
}

/**
 * Request parameters for productsGetById operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsGetByIdRequest
 */
export interface ProductsApiProductsGetByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsGetById
	 */
	readonly id: number;
}

/**
 * Request parameters for productsRemove operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsRemoveRequest
 */
export interface ProductsApiProductsRemoveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsRemove
	 */
	readonly id: number;
}

/**
 * Request parameters for productsUpdate operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsUpdateRequest
 */
export interface ProductsApiProductsUpdateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProductsApiProductsUpdate
	 */
	readonly id: number;

	/**
	 *
	 * @type {CreateProductDto}
	 * @memberof ProductsApiProductsUpdate
	 */
	readonly createProductDto: CreateProductDto;
}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
	/**
	 *
	 * @param {ProductsApiProductsCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsCreate(requestParameters: ProductsApiProductsCreateRequest, options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsCreate(requestParameters.createProductDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductsApiProductsFindAllRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsFindAll(requestParameters: ProductsApiProductsFindAllRequest = {}, options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsFindAll(requestParameters.attributeValueIds, requestParameters.minPrice, requestParameters.maxPrice, requestParameters.sorting, requestParameters.language, requestParameters.search, requestParameters.variants, requestParameters.itemsPerPage, requestParameters.page, requestParameters.categoryId, requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsGetAllIds(options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsGetAllIds(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductsApiProductsGetByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsGetById(requestParameters: ProductsApiProductsGetByIdRequest, options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsGetById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductsApiProductsRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsRemove(requestParameters: ProductsApiProductsRemoveRequest, options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductsApiProductsUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsUpdate(requestParameters: ProductsApiProductsUpdateRequest, options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsUpdate(requestParameters.id, requestParameters.createProductDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * ShippingApi - axios parameter creator
 * @export
 */
export const ShippingApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateShippingMethodDto} createShippingMethodDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingMethodCreate: async (createShippingMethodDto: CreateShippingMethodDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createShippingMethodDto' is not null or undefined
			assertParamExists('shippingMethodCreate', 'createShippingMethodDto', createShippingMethodDto)
			const localVarPath = `/api/v1/shipping`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createShippingMethodDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingMethodDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('shippingMethodDeleteById', 'id', id)
			const localVarPath = `/api/v1/shipping/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} [addressId]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingMethodGetAll: async (addressId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/shipping`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if ( addressId !== undefined ) {
				localVarQueryParameter['addressId'] = addressId;
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingMethodGetOne: async (methodId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'methodId' is not null or undefined
			assertParamExists('shippingMethodGetOne', 'methodId', methodId)
			const localVarPath = `/api/v1/shipping/{methodId}`
				.replace(`{${ "methodId" }}`, encodeURIComponent(String(methodId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {UpdateShippingMethodDto} updateShippingMethodDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingMethodUpdateMethod: async (methodId: number, updateShippingMethodDto: UpdateShippingMethodDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'methodId' is not null or undefined
			assertParamExists('shippingMethodUpdateMethod', 'methodId', methodId)
			// verify required parameter 'updateShippingMethodDto' is not null or undefined
			assertParamExists('shippingMethodUpdateMethod', 'updateShippingMethodDto', updateShippingMethodDto)
			const localVarPath = `/api/v1/shipping/{methodId}`
				.replace(`{${ "methodId" }}`, encodeURIComponent(String(methodId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateShippingMethodDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {number} zoneId
		 * @param {CreateShippingRateDto} createShippingRateDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingRatesCreateRate: async (methodId: number, zoneId: number, createShippingRateDto: CreateShippingRateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'methodId' is not null or undefined
			assertParamExists('shippingRatesCreateRate', 'methodId', methodId)
			// verify required parameter 'zoneId' is not null or undefined
			assertParamExists('shippingRatesCreateRate', 'zoneId', zoneId)
			// verify required parameter 'createShippingRateDto' is not null or undefined
			assertParamExists('shippingRatesCreateRate', 'createShippingRateDto', createShippingRateDto)
			const localVarPath = `/api/v1/shipping/{methodId}/zones/{zoneId}/rates`
				.replace(`{${ "methodId" }}`, encodeURIComponent(String(methodId)))
				.replace(`{${ "zoneId" }}`, encodeURIComponent(String(zoneId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createShippingRateDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {number} zoneId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingRatesDeleteRate: async (methodId: number, zoneId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'methodId' is not null or undefined
			assertParamExists('shippingRatesDeleteRate', 'methodId', methodId)
			// verify required parameter 'zoneId' is not null or undefined
			assertParamExists('shippingRatesDeleteRate', 'zoneId', zoneId)
			// verify required parameter 'id' is not null or undefined
			assertParamExists('shippingRatesDeleteRate', 'id', id)
			const localVarPath = `/api/v1/shipping/{methodId}/zones/{zoneId}/rates/{id}`
				.replace(`{${ "methodId" }}`, encodeURIComponent(String(methodId)))
				.replace(`{${ "zoneId" }}`, encodeURIComponent(String(zoneId)))
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {number} zoneId
		 * @param {number} id
		 * @param {UpdateShippingRateDto} updateShippingRateDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingRatesUpdateRate: async (methodId: number, zoneId: number, id: number, updateShippingRateDto: UpdateShippingRateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'methodId' is not null or undefined
			assertParamExists('shippingRatesUpdateRate', 'methodId', methodId)
			// verify required parameter 'zoneId' is not null or undefined
			assertParamExists('shippingRatesUpdateRate', 'zoneId', zoneId)
			// verify required parameter 'id' is not null or undefined
			assertParamExists('shippingRatesUpdateRate', 'id', id)
			// verify required parameter 'updateShippingRateDto' is not null or undefined
			assertParamExists('shippingRatesUpdateRate', 'updateShippingRateDto', updateShippingRateDto)
			const localVarPath = `/api/v1/shipping/{methodId}/zones/{zoneId}/rates/{id}`
				.replace(`{${ "methodId" }}`, encodeURIComponent(String(methodId)))
				.replace(`{${ "zoneId" }}`, encodeURIComponent(String(zoneId)))
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateShippingRateDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {CreateShippingZoneDto} createShippingZoneDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingZonesCreateZone: async (methodId: number, createShippingZoneDto: CreateShippingZoneDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'methodId' is not null or undefined
			assertParamExists('shippingZonesCreateZone', 'methodId', methodId)
			// verify required parameter 'createShippingZoneDto' is not null or undefined
			assertParamExists('shippingZonesCreateZone', 'createShippingZoneDto', createShippingZoneDto)
			const localVarPath = `/api/v1/shipping/{methodId}/zones`
				.replace(`{${ "methodId" }}`, encodeURIComponent(String(methodId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createShippingZoneDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} methodId
		 * @param {UpdateShippingZoneDto} updateShippingZoneDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingZonesUpdateZone: async (id: number, methodId: number, updateShippingZoneDto: UpdateShippingZoneDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('shippingZonesUpdateZone', 'id', id)
			// verify required parameter 'methodId' is not null or undefined
			assertParamExists('shippingZonesUpdateZone', 'methodId', methodId)
			// verify required parameter 'updateShippingZoneDto' is not null or undefined
			assertParamExists('shippingZonesUpdateZone', 'updateShippingZoneDto', updateShippingZoneDto)
			const localVarPath = `/api/v1/shipping/{methodId}/zones/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)))
				.replace(`{${ "methodId" }}`, encodeURIComponent(String(methodId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateShippingZoneDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * ShippingApi - functional programming interface
 * @export
 */
export const ShippingApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = ShippingApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateShippingMethodDto} createShippingMethodDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async shippingMethodCreate(createShippingMethodDto: CreateShippingMethodDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.shippingMethodCreate(createShippingMethodDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async shippingMethodDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.shippingMethodDeleteById(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} [addressId]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async shippingMethodGetAll(addressId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShippingMethodDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.shippingMethodGetAll(addressId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async shippingMethodGetOne(methodId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.shippingMethodGetOne(methodId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {UpdateShippingMethodDto} updateShippingMethodDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async shippingMethodUpdateMethod(methodId: number, updateShippingMethodDto: UpdateShippingMethodDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.shippingMethodUpdateMethod(methodId, updateShippingMethodDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {number} zoneId
		 * @param {CreateShippingRateDto} createShippingRateDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async shippingRatesCreateRate(methodId: number, zoneId: number, createShippingRateDto: CreateShippingRateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingRateDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.shippingRatesCreateRate(methodId, zoneId, createShippingRateDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {number} zoneId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async shippingRatesDeleteRate(methodId: number, zoneId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingRateDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.shippingRatesDeleteRate(methodId, zoneId, id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {number} zoneId
		 * @param {number} id
		 * @param {UpdateShippingRateDto} updateShippingRateDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async shippingRatesUpdateRate(methodId: number, zoneId: number, id: number, updateShippingRateDto: UpdateShippingRateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingRateDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.shippingRatesUpdateRate(methodId, zoneId, id, updateShippingRateDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {CreateShippingZoneDto} createShippingZoneDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async shippingZonesCreateZone(methodId: number, createShippingZoneDto: CreateShippingZoneDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingZoneDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.shippingZonesCreateZone(methodId, createShippingZoneDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} methodId
		 * @param {UpdateShippingZoneDto} updateShippingZoneDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async shippingZonesUpdateZone(id: number, methodId: number, updateShippingZoneDto: UpdateShippingZoneDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingZoneDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.shippingZonesUpdateZone(id, methodId, updateShippingZoneDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * ShippingApi - factory interface
 * @export
 */
export const ShippingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = ShippingApiFp(configuration)
	return {
		/**
		 *
		 * @param {CreateShippingMethodDto} createShippingMethodDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingMethodCreate(createShippingMethodDto: CreateShippingMethodDto, options?: any): AxiosPromise<ShippingMethodDto> {
			return localVarFp.shippingMethodCreate(createShippingMethodDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingMethodDeleteById(id: number, options?: any): AxiosPromise<ShippingMethodDto> {
			return localVarFp.shippingMethodDeleteById(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} [addressId]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingMethodGetAll(addressId?: number, options?: any): AxiosPromise<Array<ShippingMethodDto>> {
			return localVarFp.shippingMethodGetAll(addressId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingMethodGetOne(methodId: number, options?: any): AxiosPromise<ShippingMethodDto> {
			return localVarFp.shippingMethodGetOne(methodId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {UpdateShippingMethodDto} updateShippingMethodDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingMethodUpdateMethod(methodId: number, updateShippingMethodDto: UpdateShippingMethodDto, options?: any): AxiosPromise<ShippingMethodDto> {
			return localVarFp.shippingMethodUpdateMethod(methodId, updateShippingMethodDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {number} zoneId
		 * @param {CreateShippingRateDto} createShippingRateDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingRatesCreateRate(methodId: number, zoneId: number, createShippingRateDto: CreateShippingRateDto, options?: any): AxiosPromise<ShippingRateDto> {
			return localVarFp.shippingRatesCreateRate(methodId, zoneId, createShippingRateDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {number} zoneId
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingRatesDeleteRate(methodId: number, zoneId: number, id: number, options?: any): AxiosPromise<ShippingRateDto> {
			return localVarFp.shippingRatesDeleteRate(methodId, zoneId, id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {number} zoneId
		 * @param {number} id
		 * @param {UpdateShippingRateDto} updateShippingRateDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingRatesUpdateRate(methodId: number, zoneId: number, id: number, updateShippingRateDto: UpdateShippingRateDto, options?: any): AxiosPromise<ShippingRateDto> {
			return localVarFp.shippingRatesUpdateRate(methodId, zoneId, id, updateShippingRateDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} methodId
		 * @param {CreateShippingZoneDto} createShippingZoneDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingZonesCreateZone(methodId: number, createShippingZoneDto: CreateShippingZoneDto, options?: any): AxiosPromise<ShippingZoneDto> {
			return localVarFp.shippingZonesCreateZone(methodId, createShippingZoneDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} methodId
		 * @param {UpdateShippingZoneDto} updateShippingZoneDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		shippingZonesUpdateZone(id: number, methodId: number, updateShippingZoneDto: UpdateShippingZoneDto, options?: any): AxiosPromise<ShippingZoneDto> {
			return localVarFp.shippingZonesUpdateZone(id, methodId, updateShippingZoneDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for shippingMethodCreate operation in ShippingApi.
 * @export
 * @interface ShippingApiShippingMethodCreateRequest
 */
export interface ShippingApiShippingMethodCreateRequest {
	/**
	 *
	 * @type {CreateShippingMethodDto}
	 * @memberof ShippingApiShippingMethodCreate
	 */
	readonly createShippingMethodDto: CreateShippingMethodDto;
}

/**
 * Request parameters for shippingMethodDeleteById operation in ShippingApi.
 * @export
 * @interface ShippingApiShippingMethodDeleteByIdRequest
 */
export interface ShippingApiShippingMethodDeleteByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ShippingApiShippingMethodDeleteById
	 */
	readonly id: number;
}

/**
 * Request parameters for shippingMethodGetAll operation in ShippingApi.
 * @export
 * @interface ShippingApiShippingMethodGetAllRequest
 */
export interface ShippingApiShippingMethodGetAllRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ShippingApiShippingMethodGetAll
	 */
	readonly addressId?: number;
}

/**
 * Request parameters for shippingMethodGetOne operation in ShippingApi.
 * @export
 * @interface ShippingApiShippingMethodGetOneRequest
 */
export interface ShippingApiShippingMethodGetOneRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ShippingApiShippingMethodGetOne
	 */
	readonly methodId: number;
}

/**
 * Request parameters for shippingMethodUpdateMethod operation in ShippingApi.
 * @export
 * @interface ShippingApiShippingMethodUpdateMethodRequest
 */
export interface ShippingApiShippingMethodUpdateMethodRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ShippingApiShippingMethodUpdateMethod
	 */
	readonly methodId: number;

	/**
	 *
	 * @type {UpdateShippingMethodDto}
	 * @memberof ShippingApiShippingMethodUpdateMethod
	 */
	readonly updateShippingMethodDto: UpdateShippingMethodDto;
}

/**
 * Request parameters for shippingRatesCreateRate operation in ShippingApi.
 * @export
 * @interface ShippingApiShippingRatesCreateRateRequest
 */
export interface ShippingApiShippingRatesCreateRateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ShippingApiShippingRatesCreateRate
	 */
	readonly methodId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ShippingApiShippingRatesCreateRate
	 */
	readonly zoneId: number;

	/**
	 *
	 * @type {CreateShippingRateDto}
	 * @memberof ShippingApiShippingRatesCreateRate
	 */
	readonly createShippingRateDto: CreateShippingRateDto;
}

/**
 * Request parameters for shippingRatesDeleteRate operation in ShippingApi.
 * @export
 * @interface ShippingApiShippingRatesDeleteRateRequest
 */
export interface ShippingApiShippingRatesDeleteRateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ShippingApiShippingRatesDeleteRate
	 */
	readonly methodId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ShippingApiShippingRatesDeleteRate
	 */
	readonly zoneId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ShippingApiShippingRatesDeleteRate
	 */
	readonly id: number;
}

/**
 * Request parameters for shippingRatesUpdateRate operation in ShippingApi.
 * @export
 * @interface ShippingApiShippingRatesUpdateRateRequest
 */
export interface ShippingApiShippingRatesUpdateRateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ShippingApiShippingRatesUpdateRate
	 */
	readonly methodId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ShippingApiShippingRatesUpdateRate
	 */
	readonly zoneId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ShippingApiShippingRatesUpdateRate
	 */
	readonly id: number;

	/**
	 *
	 * @type {UpdateShippingRateDto}
	 * @memberof ShippingApiShippingRatesUpdateRate
	 */
	readonly updateShippingRateDto: UpdateShippingRateDto;
}

/**
 * Request parameters for shippingZonesCreateZone operation in ShippingApi.
 * @export
 * @interface ShippingApiShippingZonesCreateZoneRequest
 */
export interface ShippingApiShippingZonesCreateZoneRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ShippingApiShippingZonesCreateZone
	 */
	readonly methodId: number;

	/**
	 *
	 * @type {CreateShippingZoneDto}
	 * @memberof ShippingApiShippingZonesCreateZone
	 */
	readonly createShippingZoneDto: CreateShippingZoneDto;
}

/**
 * Request parameters for shippingZonesUpdateZone operation in ShippingApi.
 * @export
 * @interface ShippingApiShippingZonesUpdateZoneRequest
 */
export interface ShippingApiShippingZonesUpdateZoneRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ShippingApiShippingZonesUpdateZone
	 */
	readonly id: number;

	/**
	 *
	 * @type {number}
	 * @memberof ShippingApiShippingZonesUpdateZone
	 */
	readonly methodId: number;

	/**
	 *
	 * @type {UpdateShippingZoneDto}
	 * @memberof ShippingApiShippingZonesUpdateZone
	 */
	readonly updateShippingZoneDto: UpdateShippingZoneDto;
}

/**
 * ShippingApi - object-oriented interface
 * @export
 * @class ShippingApi
 * @extends {BaseAPI}
 */
export class ShippingApi extends BaseAPI {
	/**
	 *
	 * @param {ShippingApiShippingMethodCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ShippingApi
	 */
	public shippingMethodCreate(requestParameters: ShippingApiShippingMethodCreateRequest, options?: AxiosRequestConfig) {
		return ShippingApiFp(this.configuration).shippingMethodCreate(requestParameters.createShippingMethodDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ShippingApiShippingMethodDeleteByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ShippingApi
	 */
	public shippingMethodDeleteById(requestParameters: ShippingApiShippingMethodDeleteByIdRequest, options?: AxiosRequestConfig) {
		return ShippingApiFp(this.configuration).shippingMethodDeleteById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ShippingApiShippingMethodGetAllRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ShippingApi
	 */
	public shippingMethodGetAll(requestParameters: ShippingApiShippingMethodGetAllRequest = {}, options?: AxiosRequestConfig) {
		return ShippingApiFp(this.configuration).shippingMethodGetAll(requestParameters.addressId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ShippingApiShippingMethodGetOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ShippingApi
	 */
	public shippingMethodGetOne(requestParameters: ShippingApiShippingMethodGetOneRequest, options?: AxiosRequestConfig) {
		return ShippingApiFp(this.configuration).shippingMethodGetOne(requestParameters.methodId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ShippingApiShippingMethodUpdateMethodRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ShippingApi
	 */
	public shippingMethodUpdateMethod(requestParameters: ShippingApiShippingMethodUpdateMethodRequest, options?: AxiosRequestConfig) {
		return ShippingApiFp(this.configuration).shippingMethodUpdateMethod(requestParameters.methodId, requestParameters.updateShippingMethodDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ShippingApiShippingRatesCreateRateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ShippingApi
	 */
	public shippingRatesCreateRate(requestParameters: ShippingApiShippingRatesCreateRateRequest, options?: AxiosRequestConfig) {
		return ShippingApiFp(this.configuration).shippingRatesCreateRate(requestParameters.methodId, requestParameters.zoneId, requestParameters.createShippingRateDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ShippingApiShippingRatesDeleteRateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ShippingApi
	 */
	public shippingRatesDeleteRate(requestParameters: ShippingApiShippingRatesDeleteRateRequest, options?: AxiosRequestConfig) {
		return ShippingApiFp(this.configuration).shippingRatesDeleteRate(requestParameters.methodId, requestParameters.zoneId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ShippingApiShippingRatesUpdateRateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ShippingApi
	 */
	public shippingRatesUpdateRate(requestParameters: ShippingApiShippingRatesUpdateRateRequest, options?: AxiosRequestConfig) {
		return ShippingApiFp(this.configuration).shippingRatesUpdateRate(requestParameters.methodId, requestParameters.zoneId, requestParameters.id, requestParameters.updateShippingRateDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ShippingApiShippingZonesCreateZoneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ShippingApi
	 */
	public shippingZonesCreateZone(requestParameters: ShippingApiShippingZonesCreateZoneRequest, options?: AxiosRequestConfig) {
		return ShippingApiFp(this.configuration).shippingZonesCreateZone(requestParameters.methodId, requestParameters.createShippingZoneDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ShippingApiShippingZonesUpdateZoneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ShippingApi
	 */
	public shippingZonesUpdateZone(requestParameters: ShippingApiShippingZonesUpdateZoneRequest, options?: AxiosRequestConfig) {
		return ShippingApiFp(this.configuration).shippingZonesUpdateZone(requestParameters.id, requestParameters.methodId, requestParameters.updateShippingZoneDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateUserDto} createUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersCreate: async (createUserDto: CreateUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createUserDto' is not null or undefined
			assertParamExists('usersCreate', 'createUserDto', createUserDto)
			const localVarPath = `/api/v1/users`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/users`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersFindOne: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('usersFindOne', 'id', id)
			const localVarPath = `/api/v1/users/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersRemove: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('usersRemove', 'id', id)
			const localVarPath = `/api/v1/users/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateUserDto} updateUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersUpdate: async (id: number, updateUserDto: UpdateUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('usersUpdate', 'id', id)
			// verify required parameter 'updateUserDto' is not null or undefined
			assertParamExists('usersUpdate', 'updateUserDto', updateUserDto)
			const localVarPath = `/api/v1/users/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateUserDto} createUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async usersCreate(createUserDto: CreateUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.usersCreate(createUserDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async usersFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.usersFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async usersFindOne(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.usersFindOne(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async usersRemove(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.usersRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateUserDto} updateUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async usersUpdate(id: number, updateUserDto: UpdateUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.usersUpdate(id, updateUserDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = UsersApiFp(configuration)
	return {
		/**
		 *
		 * @param {CreateUserDto} createUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersCreate(createUserDto: CreateUserDto, options?: any): AxiosPromise<UserDto> {
			return localVarFp.usersCreate(createUserDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersFindAll(options?: any): AxiosPromise<Array<UserDto>> {
			return localVarFp.usersFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersFindOne(id: number, options?: any): AxiosPromise<UserDto> {
			return localVarFp.usersFindOne(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersRemove(id: number, options?: any): AxiosPromise<UserDto> {
			return localVarFp.usersRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateUserDto} updateUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersUpdate(id: number, updateUserDto: UpdateUserDto, options?: any): AxiosPromise<UserDto> {
			return localVarFp.usersUpdate(id, updateUserDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for usersCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersCreateRequest
 */
export interface UsersApiUsersCreateRequest {
	/**
	 *
	 * @type {CreateUserDto}
	 * @memberof UsersApiUsersCreate
	 */
	readonly createUserDto: CreateUserDto;
}

/**
 * Request parameters for usersFindOne operation in UsersApi.
 * @export
 * @interface UsersApiUsersFindOneRequest
 */
export interface UsersApiUsersFindOneRequest {
	/**
	 *
	 * @type {number}
	 * @memberof UsersApiUsersFindOne
	 */
	readonly id: number;
}

/**
 * Request parameters for usersRemove operation in UsersApi.
 * @export
 * @interface UsersApiUsersRemoveRequest
 */
export interface UsersApiUsersRemoveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof UsersApiUsersRemove
	 */
	readonly id: number;
}

/**
 * Request parameters for usersUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersUpdateRequest
 */
export interface UsersApiUsersUpdateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof UsersApiUsersUpdate
	 */
	readonly id: number;

	/**
	 *
	 * @type {UpdateUserDto}
	 * @memberof UsersApiUsersUpdate
	 */
	readonly updateUserDto: UpdateUserDto;
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
	/**
	 *
	 * @param {UsersApiUsersCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public usersCreate(requestParameters: UsersApiUsersCreateRequest, options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration).usersCreate(requestParameters.createUserDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public usersFindAll(options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration).usersFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {UsersApiUsersFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public usersFindOne(requestParameters: UsersApiUsersFindOneRequest, options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration).usersFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {UsersApiUsersRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public usersRemove(requestParameters: UsersApiUsersRemoveRequest, options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration).usersRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {UsersApiUsersUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public usersUpdate(requestParameters: UsersApiUsersUpdateRequest, options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration).usersUpdate(requestParameters.id, requestParameters.updateUserDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * VouchersApi - axios parameter creator
 * @export
 */
export const VouchersApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddCategoriesDto} discountAddCategoriesDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherAddCategories: async (id: number, discountAddCategoriesDto: DiscountAddCategoriesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountVoucherAddCategories', 'id', id)
			// verify required parameter 'discountAddCategoriesDto' is not null or undefined
			assertParamExists('discountVoucherAddCategories', 'discountAddCategoriesDto', discountAddCategoriesDto)
			const localVarPath = `/api/v1/vouchers/{id}/categories`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(discountAddCategoriesDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddCollectionsDto} discountAddCollectionsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherAddCollections: async (id: number, discountAddCollectionsDto: DiscountAddCollectionsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountVoucherAddCollections', 'id', id)
			// verify required parameter 'discountAddCollectionsDto' is not null or undefined
			assertParamExists('discountVoucherAddCollections', 'discountAddCollectionsDto', discountAddCollectionsDto)
			const localVarPath = `/api/v1/vouchers/{id}/collections`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(discountAddCollectionsDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddProductsDto} discountAddProductsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherAddProducts: async (id: number, discountAddProductsDto: DiscountAddProductsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountVoucherAddProducts', 'id', id)
			// verify required parameter 'discountAddProductsDto' is not null or undefined
			assertParamExists('discountVoucherAddProducts', 'discountAddProductsDto', discountAddProductsDto)
			const localVarPath = `/api/v1/vouchers/{id}/products`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(discountAddProductsDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddVariantsDto} discountAddVariantsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherAddVariants: async (id: number, discountAddVariantsDto: DiscountAddVariantsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountVoucherAddVariants', 'id', id)
			// verify required parameter 'discountAddVariantsDto' is not null or undefined
			assertParamExists('discountVoucherAddVariants', 'discountAddVariantsDto', discountAddVariantsDto)
			const localVarPath = `/api/v1/vouchers/{id}/variants`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(discountAddVariantsDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {CreateDiscountVoucherDto} createDiscountVoucherDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherCreate: async (createDiscountVoucherDto: CreateDiscountVoucherDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createDiscountVoucherDto' is not null or undefined
			assertParamExists('discountVoucherCreate', 'createDiscountVoucherDto', createDiscountVoucherDto)
			const localVarPath = `/api/v1/vouchers`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createDiscountVoucherDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/vouchers`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherFindOne: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountVoucherFindOne', 'id', id)
			const localVarPath = `/api/v1/vouchers/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherRemove: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountVoucherRemove', 'id', id)
			const localVarPath = `/api/v1/vouchers/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} categoryId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherRemoveCategory: async (id: number, categoryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountVoucherRemoveCategory', 'id', id)
			// verify required parameter 'categoryId' is not null or undefined
			assertParamExists('discountVoucherRemoveCategory', 'categoryId', categoryId)
			const localVarPath = `/api/v1/vouchers/{id}/categories/{categoryId}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)))
				.replace(`{${ "categoryId" }}`, encodeURIComponent(String(categoryId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} collectionId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherRemoveCollection: async (id: number, collectionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountVoucherRemoveCollection', 'id', id)
			// verify required parameter 'collectionId' is not null or undefined
			assertParamExists('discountVoucherRemoveCollection', 'collectionId', collectionId)
			const localVarPath = `/api/v1/vouchers/{id}/collections/{collectionId}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)))
				.replace(`{${ "collectionId" }}`, encodeURIComponent(String(collectionId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} productId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherRemoveProduct: async (id: number, productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountVoucherRemoveProduct', 'id', id)
			// verify required parameter 'productId' is not null or undefined
			assertParamExists('discountVoucherRemoveProduct', 'productId', productId)
			const localVarPath = `/api/v1/vouchers/{id}/products/{productId}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)))
				.replace(`{${ "productId" }}`, encodeURIComponent(String(productId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} variantId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherRemoveVariant: async (id: number, variantId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountVoucherRemoveVariant', 'id', id)
			// verify required parameter 'variantId' is not null or undefined
			assertParamExists('discountVoucherRemoveVariant', 'variantId', variantId)
			const localVarPath = `/api/v1/vouchers/{id}/variants/{variantId}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)))
				.replace(`{${ "variantId" }}`, encodeURIComponent(String(variantId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateDiscountVoucherDto} updateDiscountVoucherDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherUpdate: async (id: number, updateDiscountVoucherDto: UpdateDiscountVoucherDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountVoucherUpdate', 'id', id)
			// verify required parameter 'updateDiscountVoucherDto' is not null or undefined
			assertParamExists('discountVoucherUpdate', 'updateDiscountVoucherDto', updateDiscountVoucherDto)
			const localVarPath = `/api/v1/vouchers/{id}`
				.replace(`{${ "id" }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateDiscountVoucherDto, localVarRequestOptions, configuration)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	}
};

/**
 * VouchersApi - functional programming interface
 * @export
 */
export const VouchersApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = VouchersApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddCategoriesDto} discountAddCategoriesDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountVoucherAddCategories(id: number, discountAddCategoriesDto: DiscountAddCategoriesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountVoucherDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountVoucherAddCategories(id, discountAddCategoriesDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddCollectionsDto} discountAddCollectionsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountVoucherAddCollections(id: number, discountAddCollectionsDto: DiscountAddCollectionsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountVoucherDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountVoucherAddCollections(id, discountAddCollectionsDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddProductsDto} discountAddProductsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountVoucherAddProducts(id: number, discountAddProductsDto: DiscountAddProductsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountVoucherDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountVoucherAddProducts(id, discountAddProductsDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddVariantsDto} discountAddVariantsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountVoucherAddVariants(id: number, discountAddVariantsDto: DiscountAddVariantsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountVoucherDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountVoucherAddVariants(id, discountAddVariantsDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {CreateDiscountVoucherDto} createDiscountVoucherDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountVoucherCreate(createDiscountVoucherDto: CreateDiscountVoucherDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountVoucherDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountVoucherCreate(createDiscountVoucherDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountVoucherFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DiscountVoucherDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountVoucherFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountVoucherFindOne(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountVoucherDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountVoucherFindOne(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountVoucherRemove(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountVoucherDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountVoucherRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} categoryId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountVoucherRemoveCategory(id: number, categoryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountVoucherDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountVoucherRemoveCategory(id, categoryId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} collectionId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountVoucherRemoveCollection(id: number, collectionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountVoucherDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountVoucherRemoveCollection(id, collectionId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} productId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountVoucherRemoveProduct(id: number, productId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountVoucherDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountVoucherRemoveProduct(id, productId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} variantId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountVoucherRemoveVariant(id: number, variantId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountVoucherDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountVoucherRemoveVariant(id, variantId, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateDiscountVoucherDto} updateDiscountVoucherDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountVoucherUpdate(id: number, updateDiscountVoucherDto: UpdateDiscountVoucherDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountVoucherDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountVoucherUpdate(id, updateDiscountVoucherDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * VouchersApi - factory interface
 * @export
 */
export const VouchersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = VouchersApiFp(configuration)
	return {
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddCategoriesDto} discountAddCategoriesDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherAddCategories(id: number, discountAddCategoriesDto: DiscountAddCategoriesDto, options?: any): AxiosPromise<DiscountVoucherDto> {
			return localVarFp.discountVoucherAddCategories(id, discountAddCategoriesDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddCollectionsDto} discountAddCollectionsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherAddCollections(id: number, discountAddCollectionsDto: DiscountAddCollectionsDto, options?: any): AxiosPromise<DiscountVoucherDto> {
			return localVarFp.discountVoucherAddCollections(id, discountAddCollectionsDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddProductsDto} discountAddProductsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherAddProducts(id: number, discountAddProductsDto: DiscountAddProductsDto, options?: any): AxiosPromise<DiscountVoucherDto> {
			return localVarFp.discountVoucherAddProducts(id, discountAddProductsDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {DiscountAddVariantsDto} discountAddVariantsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherAddVariants(id: number, discountAddVariantsDto: DiscountAddVariantsDto, options?: any): AxiosPromise<DiscountVoucherDto> {
			return localVarFp.discountVoucherAddVariants(id, discountAddVariantsDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {CreateDiscountVoucherDto} createDiscountVoucherDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherCreate(createDiscountVoucherDto: CreateDiscountVoucherDto, options?: any): AxiosPromise<DiscountVoucherDto> {
			return localVarFp.discountVoucherCreate(createDiscountVoucherDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherFindAll(options?: any): AxiosPromise<Array<DiscountVoucherDto>> {
			return localVarFp.discountVoucherFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherFindOne(id: number, options?: any): AxiosPromise<DiscountVoucherDto> {
			return localVarFp.discountVoucherFindOne(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherRemove(id: number, options?: any): AxiosPromise<DiscountVoucherDto> {
			return localVarFp.discountVoucherRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} categoryId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherRemoveCategory(id: number, categoryId: number, options?: any): AxiosPromise<DiscountVoucherDto> {
			return localVarFp.discountVoucherRemoveCategory(id, categoryId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} collectionId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherRemoveCollection(id: number, collectionId: number, options?: any): AxiosPromise<DiscountVoucherDto> {
			return localVarFp.discountVoucherRemoveCollection(id, collectionId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} productId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherRemoveProduct(id: number, productId: number, options?: any): AxiosPromise<DiscountVoucherDto> {
			return localVarFp.discountVoucherRemoveProduct(id, productId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {number} variantId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherRemoveVariant(id: number, variantId: number, options?: any): AxiosPromise<DiscountVoucherDto> {
			return localVarFp.discountVoucherRemoveVariant(id, variantId, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {UpdateDiscountVoucherDto} updateDiscountVoucherDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountVoucherUpdate(id: number, updateDiscountVoucherDto: UpdateDiscountVoucherDto, options?: any): AxiosPromise<DiscountVoucherDto> {
			return localVarFp.discountVoucherUpdate(id, updateDiscountVoucherDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for discountVoucherAddCategories operation in VouchersApi.
 * @export
 * @interface VouchersApiDiscountVoucherAddCategoriesRequest
 */
export interface VouchersApiDiscountVoucherAddCategoriesRequest {
	/**
	 *
	 * @type {number}
	 * @memberof VouchersApiDiscountVoucherAddCategories
	 */
	readonly id: number;

	/**
	 *
	 * @type {DiscountAddCategoriesDto}
	 * @memberof VouchersApiDiscountVoucherAddCategories
	 */
	readonly discountAddCategoriesDto: DiscountAddCategoriesDto;
}

/**
 * Request parameters for discountVoucherAddCollections operation in VouchersApi.
 * @export
 * @interface VouchersApiDiscountVoucherAddCollectionsRequest
 */
export interface VouchersApiDiscountVoucherAddCollectionsRequest {
	/**
	 *
	 * @type {number}
	 * @memberof VouchersApiDiscountVoucherAddCollections
	 */
	readonly id: number;

	/**
	 *
	 * @type {DiscountAddCollectionsDto}
	 * @memberof VouchersApiDiscountVoucherAddCollections
	 */
	readonly discountAddCollectionsDto: DiscountAddCollectionsDto;
}

/**
 * Request parameters for discountVoucherAddProducts operation in VouchersApi.
 * @export
 * @interface VouchersApiDiscountVoucherAddProductsRequest
 */
export interface VouchersApiDiscountVoucherAddProductsRequest {
	/**
	 *
	 * @type {number}
	 * @memberof VouchersApiDiscountVoucherAddProducts
	 */
	readonly id: number;

	/**
	 *
	 * @type {DiscountAddProductsDto}
	 * @memberof VouchersApiDiscountVoucherAddProducts
	 */
	readonly discountAddProductsDto: DiscountAddProductsDto;
}

/**
 * Request parameters for discountVoucherAddVariants operation in VouchersApi.
 * @export
 * @interface VouchersApiDiscountVoucherAddVariantsRequest
 */
export interface VouchersApiDiscountVoucherAddVariantsRequest {
	/**
	 *
	 * @type {number}
	 * @memberof VouchersApiDiscountVoucherAddVariants
	 */
	readonly id: number;

	/**
	 *
	 * @type {DiscountAddVariantsDto}
	 * @memberof VouchersApiDiscountVoucherAddVariants
	 */
	readonly discountAddVariantsDto: DiscountAddVariantsDto;
}

/**
 * Request parameters for discountVoucherCreate operation in VouchersApi.
 * @export
 * @interface VouchersApiDiscountVoucherCreateRequest
 */
export interface VouchersApiDiscountVoucherCreateRequest {
	/**
	 *
	 * @type {CreateDiscountVoucherDto}
	 * @memberof VouchersApiDiscountVoucherCreate
	 */
	readonly createDiscountVoucherDto: CreateDiscountVoucherDto;
}

/**
 * Request parameters for discountVoucherFindOne operation in VouchersApi.
 * @export
 * @interface VouchersApiDiscountVoucherFindOneRequest
 */
export interface VouchersApiDiscountVoucherFindOneRequest {
	/**
	 *
	 * @type {number}
	 * @memberof VouchersApiDiscountVoucherFindOne
	 */
	readonly id: number;
}

/**
 * Request parameters for discountVoucherRemove operation in VouchersApi.
 * @export
 * @interface VouchersApiDiscountVoucherRemoveRequest
 */
export interface VouchersApiDiscountVoucherRemoveRequest {
	/**
	 *
	 * @type {number}
	 * @memberof VouchersApiDiscountVoucherRemove
	 */
	readonly id: number;
}

/**
 * Request parameters for discountVoucherRemoveCategory operation in VouchersApi.
 * @export
 * @interface VouchersApiDiscountVoucherRemoveCategoryRequest
 */
export interface VouchersApiDiscountVoucherRemoveCategoryRequest {
	/**
	 *
	 * @type {number}
	 * @memberof VouchersApiDiscountVoucherRemoveCategory
	 */
	readonly id: number;

	/**
	 *
	 * @type {number}
	 * @memberof VouchersApiDiscountVoucherRemoveCategory
	 */
	readonly categoryId: number;
}

/**
 * Request parameters for discountVoucherRemoveCollection operation in VouchersApi.
 * @export
 * @interface VouchersApiDiscountVoucherRemoveCollectionRequest
 */
export interface VouchersApiDiscountVoucherRemoveCollectionRequest {
	/**
	 *
	 * @type {number}
	 * @memberof VouchersApiDiscountVoucherRemoveCollection
	 */
	readonly id: number;

	/**
	 *
	 * @type {number}
	 * @memberof VouchersApiDiscountVoucherRemoveCollection
	 */
	readonly collectionId: number;
}

/**
 * Request parameters for discountVoucherRemoveProduct operation in VouchersApi.
 * @export
 * @interface VouchersApiDiscountVoucherRemoveProductRequest
 */
export interface VouchersApiDiscountVoucherRemoveProductRequest {
	/**
	 *
	 * @type {number}
	 * @memberof VouchersApiDiscountVoucherRemoveProduct
	 */
	readonly id: number;

	/**
	 *
	 * @type {number}
	 * @memberof VouchersApiDiscountVoucherRemoveProduct
	 */
	readonly productId: number;
}

/**
 * Request parameters for discountVoucherRemoveVariant operation in VouchersApi.
 * @export
 * @interface VouchersApiDiscountVoucherRemoveVariantRequest
 */
export interface VouchersApiDiscountVoucherRemoveVariantRequest {
	/**
	 *
	 * @type {number}
	 * @memberof VouchersApiDiscountVoucherRemoveVariant
	 */
	readonly id: number;

	/**
	 *
	 * @type {number}
	 * @memberof VouchersApiDiscountVoucherRemoveVariant
	 */
	readonly variantId: number;
}

/**
 * Request parameters for discountVoucherUpdate operation in VouchersApi.
 * @export
 * @interface VouchersApiDiscountVoucherUpdateRequest
 */
export interface VouchersApiDiscountVoucherUpdateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof VouchersApiDiscountVoucherUpdate
	 */
	readonly id: number;

	/**
	 *
	 * @type {UpdateDiscountVoucherDto}
	 * @memberof VouchersApiDiscountVoucherUpdate
	 */
	readonly updateDiscountVoucherDto: UpdateDiscountVoucherDto;
}

/**
 * VouchersApi - object-oriented interface
 * @export
 * @class VouchersApi
 * @extends {BaseAPI}
 */
export class VouchersApi extends BaseAPI {
	/**
	 *
	 * @param {VouchersApiDiscountVoucherAddCategoriesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VouchersApi
	 */
	public discountVoucherAddCategories(requestParameters: VouchersApiDiscountVoucherAddCategoriesRequest, options?: AxiosRequestConfig) {
		return VouchersApiFp(this.configuration).discountVoucherAddCategories(requestParameters.id, requestParameters.discountAddCategoriesDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {VouchersApiDiscountVoucherAddCollectionsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VouchersApi
	 */
	public discountVoucherAddCollections(requestParameters: VouchersApiDiscountVoucherAddCollectionsRequest, options?: AxiosRequestConfig) {
		return VouchersApiFp(this.configuration).discountVoucherAddCollections(requestParameters.id, requestParameters.discountAddCollectionsDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {VouchersApiDiscountVoucherAddProductsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VouchersApi
	 */
	public discountVoucherAddProducts(requestParameters: VouchersApiDiscountVoucherAddProductsRequest, options?: AxiosRequestConfig) {
		return VouchersApiFp(this.configuration).discountVoucherAddProducts(requestParameters.id, requestParameters.discountAddProductsDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {VouchersApiDiscountVoucherAddVariantsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VouchersApi
	 */
	public discountVoucherAddVariants(requestParameters: VouchersApiDiscountVoucherAddVariantsRequest, options?: AxiosRequestConfig) {
		return VouchersApiFp(this.configuration).discountVoucherAddVariants(requestParameters.id, requestParameters.discountAddVariantsDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {VouchersApiDiscountVoucherCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VouchersApi
	 */
	public discountVoucherCreate(requestParameters: VouchersApiDiscountVoucherCreateRequest, options?: AxiosRequestConfig) {
		return VouchersApiFp(this.configuration).discountVoucherCreate(requestParameters.createDiscountVoucherDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VouchersApi
	 */
	public discountVoucherFindAll(options?: AxiosRequestConfig) {
		return VouchersApiFp(this.configuration).discountVoucherFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {VouchersApiDiscountVoucherFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VouchersApi
	 */
	public discountVoucherFindOne(requestParameters: VouchersApiDiscountVoucherFindOneRequest, options?: AxiosRequestConfig) {
		return VouchersApiFp(this.configuration).discountVoucherFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {VouchersApiDiscountVoucherRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VouchersApi
	 */
	public discountVoucherRemove(requestParameters: VouchersApiDiscountVoucherRemoveRequest, options?: AxiosRequestConfig) {
		return VouchersApiFp(this.configuration).discountVoucherRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {VouchersApiDiscountVoucherRemoveCategoryRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VouchersApi
	 */
	public discountVoucherRemoveCategory(requestParameters: VouchersApiDiscountVoucherRemoveCategoryRequest, options?: AxiosRequestConfig) {
		return VouchersApiFp(this.configuration).discountVoucherRemoveCategory(requestParameters.id, requestParameters.categoryId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {VouchersApiDiscountVoucherRemoveCollectionRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VouchersApi
	 */
	public discountVoucherRemoveCollection(requestParameters: VouchersApiDiscountVoucherRemoveCollectionRequest, options?: AxiosRequestConfig) {
		return VouchersApiFp(this.configuration).discountVoucherRemoveCollection(requestParameters.id, requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {VouchersApiDiscountVoucherRemoveProductRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VouchersApi
	 */
	public discountVoucherRemoveProduct(requestParameters: VouchersApiDiscountVoucherRemoveProductRequest, options?: AxiosRequestConfig) {
		return VouchersApiFp(this.configuration).discountVoucherRemoveProduct(requestParameters.id, requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {VouchersApiDiscountVoucherRemoveVariantRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VouchersApi
	 */
	public discountVoucherRemoveVariant(requestParameters: VouchersApiDiscountVoucherRemoveVariantRequest, options?: AxiosRequestConfig) {
		return VouchersApiFp(this.configuration).discountVoucherRemoveVariant(requestParameters.id, requestParameters.variantId, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {VouchersApiDiscountVoucherUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VouchersApi
	 */
	public discountVoucherUpdate(requestParameters: VouchersApiDiscountVoucherUpdateRequest, options?: AxiosRequestConfig) {
		return VouchersApiFp(this.configuration).discountVoucherUpdate(requestParameters.id, requestParameters.updateDiscountVoucherDto, options).then((request) => request(this.axios, this.basePath));
	}
}


