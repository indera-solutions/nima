/* tslint:disable */
/* eslint-disable */
/**
 * Nima CMS
 * The core api for the Nima CMS backend.
 *
 * The version of the OpenAPI document: 0.0.1-alpha
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios';
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError } from './base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	assertParamExists,
	createRequestFunction,
	DUMMY_BASE_URL,
	serializeDataIfNeeded,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	toPathString,
} from './common';
import { Configuration } from './configuration';

/**
 *
 * @export
 * @interface AddressDto
 */
export interface AddressDto {
	/**
	 *
	 * @type {number}
	 * @memberof AddressDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'firstName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'lastName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'companyName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'phone'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'country': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'state': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'city': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'zip': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'address': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressDto
	 */
	'address2'?: string;
}

/**
 *
 * @export
 * @interface AddressEntity
 */
export interface AddressEntity {
	/**
	 *
	 * @type {number}
	 * @memberof AddressEntity
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof AddressEntity
	 */
	'firstName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressEntity
	 */
	'lastName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressEntity
	 */
	'companyName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressEntity
	 */
	'phone'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressEntity
	 */
	'country': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressEntity
	 */
	'state': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressEntity
	 */
	'city': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressEntity
	 */
	'zip': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressEntity
	 */
	'address': string;
	/**
	 *
	 * @type {string}
	 * @memberof AddressEntity
	 */
	'address2'?: string;
}

/**
 *
 * @export
 * @interface AttributeDto
 */
export interface AttributeDto {
	/**
	 *
	 * @type {number}
	 * @memberof AttributeDto
	 */
	'id': number;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof AttributeDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof AttributeDto
	 */
	'slug': string;
	/**
	 *
	 * @type {object}
	 * @memberof AttributeDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof AttributeDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeDto
	 */
	'availableInGrid': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeDto
	 */
	'visibleInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeDto
	 */
	'filterableInDashboard': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeDto
	 */
	'filterableInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof AttributeDto
	 */
	'valueRequired': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof AttributeDto
	 */
	'storefrontSearchPosition': number;
	/**
	 *
	 * @type {InputType}
	 * @memberof AttributeDto
	 */
	'inputType': InputType;
	/**
	 *
	 * @type {Unit}
	 * @memberof AttributeDto
	 */
	'unit'?: Unit;
}

/**
 *
 * @export
 * @interface CategoryDto
 */
export interface CategoryDto {
	/**
	 *
	 * @type {number}
	 * @memberof CategoryDto
	 */
	'id': number;
	/**
	 *
	 * @type {object}
	 * @memberof CategoryDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CategoryDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CategoryDto
	 */
	'seoTitle': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CategoryDto
	 */
	'seoDescription': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CategoryDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CategoryDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof CategoryDto
	 */
	'slug': string;
	/**
	 *
	 * @type {object}
	 * @memberof CategoryDto
	 */
	'parent': object;
}

/**
 *
 * @export
 * @interface CreateAttributeDto
 */
export interface CreateAttributeDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateAttributeDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof CreateAttributeDto
	 */
	'slug': string;
	/**
	 *
	 * @type {object}
	 * @memberof CreateAttributeDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateAttributeDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeDto
	 */
	'availableInGrid': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeDto
	 */
	'visibleInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeDto
	 */
	'filterableInDashboard': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeDto
	 */
	'filterableInStorefront': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateAttributeDto
	 */
	'valueRequired': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof CreateAttributeDto
	 */
	'storefrontSearchPosition': number;
	/**
	 *
	 * @type {InputType}
	 * @memberof CreateAttributeDto
	 */
	'inputType': InputType;
	/**
	 *
	 * @type {Unit}
	 * @memberof CreateAttributeDto
	 */
	'unit'?: Unit;
}

/**
 *
 * @export
 * @interface CreateCategoryDto
 */
export interface CreateCategoryDto {
	/**
	 *
	 * @type {object}
	 * @memberof CreateCategoryDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateCategoryDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCategoryDto
	 */
	'seoTitle': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCategoryDto
	 */
	'seoDescription': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCategoryDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateCategoryDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCategoryDto
	 */
	'slug': string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateCategoryDto
	 */
	'parentId': number;
}

/**
 *
 * @export
 * @interface CreateCheckoutDto
 */
export interface CreateCheckoutDto {
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'email'?: string;
	/**
	 *
	 * @type {UserDto}
	 * @memberof CreateCheckoutDto
	 */
	'user': UserDto;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof CreateCheckoutDto
	 */
	'billingAddress': AddressDto;
	/**
	 *
	 * @type {number}
	 * @memberof CreateCheckoutDto
	 */
	'discountAmount': number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'discountName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'note': string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof CreateCheckoutDto
	 */
	'shippingAddress': AddressDto;
	/**
	 *
	 * @type {number}
	 * @memberof CreateCheckoutDto
	 */
	'shipping_method_id': number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'voucherCode'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'translatedDiscountName'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof CreateCheckoutDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateCheckoutDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'currency': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'country': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'redirectUrl'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateCheckoutDto
	 */
	'trackingCode'?: string;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof CreateCheckoutDto
	 */
	'languageCode': LanguageCode;
}

/**
 *
 * @export
 * @interface CreateDiscountSaleDto
 */
export interface CreateDiscountSaleDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateDiscountSaleDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {DiscountType}
	 * @memberof CreateDiscountSaleDto
	 */
	'discountType': DiscountType;
	/**
	 *
	 * @type {string}
	 * @memberof CreateDiscountSaleDto
	 */
	'endDate'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateDiscountSaleDto
	 */
	'startDate'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof CreateDiscountSaleDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateDiscountSaleDto
	 */
	'privateMetadata': object;
}

/**
 *
 * @export
 * @interface CreateOrderDto
 */
export interface CreateOrderDto {
	/**
	 * shipping tracking id
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'trackingClientId': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'userEmail': string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof CreateOrderDto
	 */
	'billingAddress'?: AddressDto;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof CreateOrderDto
	 */
	'shippingAddress'?: AddressDto;
	/**
	 *
	 * @type {UserDto}
	 * @memberof CreateOrderDto
	 */
	'user'?: UserDto;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'totalNetAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'voucher_id': number;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof CreateOrderDto
	 */
	'languageCode': LanguageCode;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'shippingPriceGrossAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'totalGrossAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'shippingPriceNetAmount': number;
	/**
	 *
	 * @type {OrderStatus}
	 * @memberof CreateOrderDto
	 */
	'status': OrderStatus;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'shippingMethodName'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'shippingMethodId'?: number;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateOrderDto
	 */
	'displayGrossPrices': boolean;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'customerNote': string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'weight': number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'checkoutToken': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'currency': string;
	/**
	 *
	 * @type {object}
	 * @memberof CreateOrderDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateOrderDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'redirectUrl'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'shippingTaxRate': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'undiscountedTotalGrossAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'undiscountedTotalNetAmount': number;
	/**
	 *
	 * @type {number}
	 * @memberof CreateOrderDto
	 */
	'totalPaidAmount': number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'origin': string;
	/**
	 *
	 * @type {object}
	 * @memberof CreateOrderDto
	 */
	'original'?: object;
	/**
	 *
	 * @type {string}
	 * @memberof CreateOrderDto
	 */
	'searchDocument': string;
}

/**
 *
 * @export
 * @interface CreateProductDto
 */
export interface CreateProductDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateProductDto
	 */
	'name': TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof CreateProductDto
	 */
	'description': TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'updatedAt': string;
	/**
	 *
	 * @type {ProductTypeDto}
	 * @memberof CreateProductDto
	 */
	'productType': ProductTypeDto;
	/**
	 *
	 * @type {CategoryDto}
	 * @memberof CreateProductDto
	 */
	'category': CategoryDto;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'seoDescription': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'seoTitle': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductDto
	 */
	'chargeTaxes': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductDto
	 */
	'weight': number;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'slug': string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductDto
	 */
	'defaultVariant': number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'descriptionPlaintext': string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductDto
	 */
	'rating': number;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'searchDocument': string;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'created': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductDto
	 */
	'isPublished': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductDto
	 */
	'isVisibleInListings': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductDto
	 */
	'isAvailableForPurchase': boolean;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductDto
	 */
	'currency': string;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductDto
	 */
	'minPrice': number;
}

/**
 *
 * @export
 * @interface CreateProductTypeDto
 */
export interface CreateProductTypeDto {
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductTypeDto
	 */
	'name': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductTypeDto
	 */
	'hasVariants': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductTypeDto
	 */
	'isShippingRequired': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof CreateProductTypeDto
	 */
	'weight': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof CreateProductTypeDto
	 */
	'isDigital': boolean;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductTypeDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof CreateProductTypeDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof CreateProductTypeDto
	 */
	'slug': string;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum DiscountType {
	PERCENTAGE = 'PERCENTAGE',
	FLAT = 'FLAT'
}


/**
 *
 * @export
 * @enum {string}
 */

export enum InputType {
	DROPDOWN = 'DROPDOWN',
	MULTISELECT = 'MULTISELECT',
	FILE = 'FILE',
	REFERENCE = 'REFERENCE',
	NUMERIC = 'NUMERIC',
	RICH_TEXT = 'RICH_TEXT',
	SWATCH = 'SWATCH',
	BOOLEAN = 'BOOLEAN',
	DATE = 'DATE',
	DATE_TIME = 'DATE_TIME'
}


/**
 *
 * @export
 * @enum {string}
 */

export enum LanguageCode {
	en = 'en',
	el = 'el',
	fr = 'fr',
	es = 'es',
	it = 'it',
	de = 'de',
	ru = 'ru'
}


/**
 *
 * @export
 * @interface LoginUserDto
 */
export interface LoginUserDto {
	/**
	 *
	 * @type {string}
	 * @memberof LoginUserDto
	 */
	'email': string;
	/**
	 *
	 * @type {string}
	 * @memberof LoginUserDto
	 */
	'password': string;
}

/**
 *
 * @export
 * @interface MediaDto
 */
export interface MediaDto {
	/**
	 *
	 * @type {number}
	 * @memberof MediaDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof MediaDto
	 */
	'mimeType': string;
	/**
	 *
	 * @type {string}
	 * @memberof MediaDto
	 */
	'name': string;
	/**
	 *
	 * @type {string}
	 * @memberof MediaDto
	 */
	'slug': string;
	/**
	 *
	 * @type {string}
	 * @memberof MediaDto
	 */
	'url': string;
}

/**
 *
 * @export
 * @interface MediaEntity
 */
export interface MediaEntity {
	/**
	 *
	 * @type {number}
	 * @memberof MediaEntity
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof MediaEntity
	 */
	'mimeType': string;
	/**
	 *
	 * @type {string}
	 * @memberof MediaEntity
	 */
	'name': string;
	/**
	 *
	 * @type {string}
	 * @memberof MediaEntity
	 */
	'slug': string;
	/**
	 *
	 * @type {string}
	 * @memberof MediaEntity
	 */
	'url': string;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum OrderStatus {
	DRAFT = 'DRAFT',
	UNCONFIRMED = 'UNCONFIRMED',
	UNFULFILLED = 'UNFULFILLED',
	PARTIALLY_FULFILLED = 'PARTIALLY_FULFILLED',
	PARTIALLY_RETURNED = 'PARTIALLY_RETURNED',
	RETURNED = 'RETURNED',
	FULFILLED = 'FULFILLED',
	CANCELED = 'CANCELED'
}


/**
 *
 * @export
 * @interface ProductTypeDto
 */
export interface ProductTypeDto {
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof ProductTypeDto
	 */
	'name': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductTypeDto
	 */
	'hasVariants': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductTypeDto
	 */
	'isShippingRequired': boolean;
	/**
	 *
	 * @type {number}
	 * @memberof ProductTypeDto
	 */
	'weight': number;
	/**
	 *
	 * @type {boolean}
	 * @memberof ProductTypeDto
	 */
	'isDigital': boolean;
	/**
	 *
	 * @type {object}
	 * @memberof ProductTypeDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof ProductTypeDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {string}
	 * @memberof ProductTypeDto
	 */
	'slug': string;
}

/**
 *
 * @export
 * @interface SettingsDto
 */
export interface SettingsDto {
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'siteName': string;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof SettingsDto
	 */
	'adminLanguage': LanguageCode;
	/**
	 *
	 * @type {Array<LanguageCode>}
	 * @memberof SettingsDto
	 */
	'availableLanguages': Array<LanguageCode>;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'baseUrl': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof SettingsDto
	 */
	'canRegister': boolean;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof SettingsDto
	 */
	'defaultLanguage': LanguageCode;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'senderEmail': string;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'senderName': string;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'seoTitle': string;
	/**
	 *
	 * @type {string}
	 * @memberof SettingsDto
	 */
	'seoDescription': string;
	/**
	 *
	 * @type {AddressEntity}
	 * @memberof SettingsDto
	 */
	'shopAddress'?: AddressEntity;
	/**
	 *
	 * @type {MediaEntity}
	 * @memberof SettingsDto
	 */
	'siteLogo'?: MediaEntity;
}

/**
 *
 * @export
 * @interface SuccessLoginResponse
 */
export interface SuccessLoginResponse {
	/**
	 *
	 * @type {string}
	 * @memberof SuccessLoginResponse
	 */
	'access_token': string;
}

/**
 *
 * @export
 * @interface TranslatableDto
 */
export interface TranslatableDto {
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'de'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'it'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'fr'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'es'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'el'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof TranslatableDto
	 */
	'en'?: string;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum Unit {
	CM = 'CM',
	M = 'M',
	KM = 'KM',
	FT = 'FT',
	YD = 'YD',
	INCH = 'INCH',
	SQ_CM = 'SQ_CM',
	SQ_M = 'SQ_M',
	SQ_KM = 'SQ_KM',
	SQ_FT = 'SQ_FT',
	SQ_YD = 'SQ_YD',
	SQ_INCH = 'SQ_INCH',
	CUBIC_MILLIMETER = 'CUBIC_MILLIMETER',
	CUBIC_CENTIMETER = 'CUBIC_CENTIMETER',
	CUBIC_DECIMETER = 'CUBIC_DECIMETER',
	CUBIC_METER = 'CUBIC_METER',
	LITER = 'LITER',
	CUBIC_FOOT = 'CUBIC_FOOT',
	CUBIC_INCH = 'CUBIC_INCH',
	CUBIC_YARD = 'CUBIC_YARD',
	QT = 'QT',
	PINT = 'PINT',
	FL_OZ = 'FL_OZ',
	ACRE_IN = 'ACRE_IN',
	ACRE_FT = 'ACRE_FT',
	G = 'G',
	LB = 'LB',
	OZ = 'OZ',
	KG = 'KG',
	TONNE = 'TONNE'
}


/**
 *
 * @export
 * @interface UpdateCategoryDto
 */
export interface UpdateCategoryDto {
	/**
	 *
	 * @type {object}
	 * @memberof UpdateCategoryDto
	 */
	'privateMetadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateCategoryDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCategoryDto
	 */
	'seoTitle'?: TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCategoryDto
	 */
	'seoDescription'?: TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCategoryDto
	 */
	'name'?: TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateCategoryDto
	 */
	'description'?: TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCategoryDto
	 */
	'slug'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateCategoryDto
	 */
	'parentId'?: number;
}

/**
 *
 * @export
 * @interface UpdateCheckoutDto
 */
export interface UpdateCheckoutDto {
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'email'?: string;
	/**
	 *
	 * @type {UserDto}
	 * @memberof UpdateCheckoutDto
	 */
	'user'?: UserDto;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UpdateCheckoutDto
	 */
	'billingAddress'?: AddressDto;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateCheckoutDto
	 */
	'discountAmount'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'discountName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'note'?: string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UpdateCheckoutDto
	 */
	'shippingAddress'?: AddressDto;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateCheckoutDto
	 */
	'shipping_method_id'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'voucherCode'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'translatedDiscountName'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateCheckoutDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateCheckoutDto
	 */
	'privateMetadata'?: object;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'currency'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'country'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'redirectUrl'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateCheckoutDto
	 */
	'trackingCode'?: string;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof UpdateCheckoutDto
	 */
	'languageCode'?: LanguageCode;
}

/**
 *
 * @export
 * @interface UpdateDiscountDto
 */
export interface UpdateDiscountDto {
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateDiscountDto
	 */
	'name'?: TranslatableDto;
	/**
	 *
	 * @type {DiscountType}
	 * @memberof UpdateDiscountDto
	 */
	'discountType'?: DiscountType;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateDiscountDto
	 */
	'endDate'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateDiscountDto
	 */
	'startDate'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateDiscountDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateDiscountDto
	 */
	'privateMetadata'?: object;
}

/**
 *
 * @export
 * @interface UpdateOrderDto
 */
export interface UpdateOrderDto {
	/**
	 * shipping tracking id
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'trackingClientId'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'userEmail'?: string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UpdateOrderDto
	 */
	'billingAddress'?: AddressDto;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UpdateOrderDto
	 */
	'shippingAddress'?: AddressDto;
	/**
	 *
	 * @type {UserDto}
	 * @memberof UpdateOrderDto
	 */
	'user'?: UserDto;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'totalNetAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'voucher_id'?: number;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof UpdateOrderDto
	 */
	'languageCode'?: LanguageCode;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'shippingPriceGrossAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'totalGrossAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'shippingPriceNetAmount'?: number;
	/**
	 *
	 * @type {OrderStatus}
	 * @memberof UpdateOrderDto
	 */
	'status'?: OrderStatus;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'shippingMethodName'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'shippingMethodId'?: number;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateOrderDto
	 */
	'displayGrossPrices'?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'customerNote'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'weight'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'checkoutToken'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'currency'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateOrderDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateOrderDto
	 */
	'privateMetadata'?: object;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'redirectUrl'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'shippingTaxRate'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'undiscountedTotalGrossAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'undiscountedTotalNetAmount'?: number;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateOrderDto
	 */
	'totalPaidAmount'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'origin'?: string;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateOrderDto
	 */
	'original'?: object;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateOrderDto
	 */
	'searchDocument'?: string;
}

/**
 *
 * @export
 * @interface UpdateProductDto
 */
export interface UpdateProductDto {
	/**
	 *
	 * @type {number}
	 * @memberof UpdateProductDto
	 */
	'id'?: number;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateProductDto
	 */
	'name'?: TranslatableDto;
	/**
	 *
	 * @type {TranslatableDto}
	 * @memberof UpdateProductDto
	 */
	'description'?: TranslatableDto;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateProductDto
	 */
	'updatedAt'?: string;
	/**
	 *
	 * @type {ProductTypeDto}
	 * @memberof UpdateProductDto
	 */
	'productType'?: ProductTypeDto;
	/**
	 *
	 * @type {CategoryDto}
	 * @memberof UpdateProductDto
	 */
	'category'?: CategoryDto;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateProductDto
	 */
	'seoDescription'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateProductDto
	 */
	'seoTitle'?: string;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateProductDto
	 */
	'chargeTaxes'?: boolean;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateProductDto
	 */
	'weight'?: number;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateProductDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateProductDto
	 */
	'privateMetadata'?: object;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateProductDto
	 */
	'slug'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateProductDto
	 */
	'defaultVariant'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateProductDto
	 */
	'descriptionPlaintext'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateProductDto
	 */
	'rating'?: number;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateProductDto
	 */
	'searchDocument'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateProductDto
	 */
	'created'?: string;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateProductDto
	 */
	'isPublished'?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateProductDto
	 */
	'isVisibleInListings'?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateProductDto
	 */
	'isAvailableForPurchase'?: boolean;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateProductDto
	 */
	'currency'?: string;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateProductDto
	 */
	'minPrice'?: number;
}

/**
 *
 * @export
 * @interface UpdateProductTypeDto
 */
export interface UpdateProductTypeDto {
	/**
	 *
	 * @type {string}
	 * @memberof UpdateProductTypeDto
	 */
	'name'?: string;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateProductTypeDto
	 */
	'hasVariants'?: boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateProductTypeDto
	 */
	'isShippingRequired'?: boolean;
	/**
	 *
	 * @type {number}
	 * @memberof UpdateProductTypeDto
	 */
	'weight'?: number;
	/**
	 *
	 * @type {boolean}
	 * @memberof UpdateProductTypeDto
	 */
	'isDigital'?: boolean;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateProductTypeDto
	 */
	'metadata'?: object;
	/**
	 *
	 * @type {object}
	 * @memberof UpdateProductTypeDto
	 */
	'privateMetadata'?: object;
	/**
	 *
	 * @type {string}
	 * @memberof UpdateProductTypeDto
	 */
	'slug'?: string;
}

/**
 *
 * @export
 * @interface UserDto
 */
export interface UserDto {
	/**
	 *
	 * @type {number}
	 * @memberof UserDto
	 */
	'id': number;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'email': string;
	/**
	 *
	 * @type {boolean}
	 * @memberof UserDto
	 */
	'isAdmin': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UserDto
	 */
	'isStaff': boolean;
	/**
	 *
	 * @type {boolean}
	 * @memberof UserDto
	 */
	'isActive': boolean;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'createdAt': string;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'updatedAt': string;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'lastLogin'?: string;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UserDto
	 */
	'defaultBillingAddress'?: AddressDto;
	/**
	 *
	 * @type {AddressDto}
	 * @memberof UserDto
	 */
	'defaultShippingAddress'?: AddressDto;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'notes'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'firstName'?: string;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'lastName'?: string;
	/**
	 *
	 * @type {MediaDto}
	 * @memberof UserDto
	 */
	'avatar'?: MediaDto;
	/**
	 *
	 * @type {object}
	 * @memberof UserDto
	 */
	'metadata': object;
	/**
	 *
	 * @type {object}
	 * @memberof UserDto
	 */
	'privateMetadata': object;
	/**
	 *
	 * @type {LanguageCode}
	 * @memberof UserDto
	 */
	'languageCode': LanguageCode;
	/**
	 *
	 * @type {Array<AddressDto>}
	 * @memberof UserDto
	 */
	'addresses': Array<AddressDto>;
	/**
	 *
	 * @type {string}
	 * @memberof UserDto
	 */
	'password': string;
}

/**
 * AttributesApi - axios parameter creator
 * @export
 */
export const AttributesApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/attributes`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {CreateAttributeDto} createAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesSave: async (createAttributeDto: CreateAttributeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createAttributeDto' is not null or undefined
			assertParamExists('attributesSave', 'createAttributeDto', createAttributeDto);
			const localVarPath = `/api/v1/attributes`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createAttributeDto, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * AttributesApi - functional programming interface
 * @export
 */
export const AttributesApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = AttributesApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributesFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AttributeDto>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributesFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {CreateAttributeDto} createAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async attributesSave(createAttributeDto: CreateAttributeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.attributesSave(createAttributeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * AttributesApi - factory interface
 * @export
 */
export const AttributesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = AttributesApiFp(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesFindAll(options?: any): AxiosPromise<Array<AttributeDto>> {
			return localVarFp.attributesFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {CreateAttributeDto} createAttributeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		attributesSave(createAttributeDto: CreateAttributeDto, options?: any): AxiosPromise<AttributeDto> {
			return localVarFp.attributesSave(createAttributeDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for attributesSave operation in AttributesApi.
 * @export
 * @interface AttributesApiAttributesSaveRequest
 */
export interface AttributesApiAttributesSaveRequest {
	/**
	 *
	 * @type {CreateAttributeDto}
	 * @memberof AttributesApiAttributesSave
	 */
	readonly createAttributeDto: CreateAttributeDto;
}

/**
 * AttributesApi - object-oriented interface
 * @export
 * @class AttributesApi
 * @extends {BaseAPI}
 */
export class AttributesApi extends BaseAPI {
	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributesApi
	 */
	public attributesFindAll(options?: AxiosRequestConfig) {
		return AttributesApiFp(this.configuration).attributesFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AttributesApiAttributesSaveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AttributesApi
	 */
	public attributesSave(requestParameters: AttributesApiAttributesSaveRequest, options?: AxiosRequestConfig) {
		return AttributesApiFp(this.configuration).attributesSave(requestParameters.createAttributeDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authGetHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/auth/profile`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {LoginUserDto} loginUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authLogin: async (loginUserDto: LoginUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'loginUserDto' is not null or undefined
			assertParamExists('authLogin', 'loginUserDto', loginUserDto);
			const localVarPath = `/api/v1/auth/login`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(loginUserDto, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authRegister: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/auth/register`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authGetHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.authGetHello(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {LoginUserDto} loginUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authLogin(loginUserDto: LoginUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessLoginResponse>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.authLogin(loginUserDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authRegister(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.authRegister(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = AuthenticationApiFp(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authGetHello(options?: any): AxiosPromise<void> {
			return localVarFp.authGetHello(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {LoginUserDto} loginUserDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authLogin(loginUserDto: LoginUserDto, options?: any): AxiosPromise<SuccessLoginResponse> {
			return localVarFp.authLogin(loginUserDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authRegister(options?: any): AxiosPromise<void> {
			return localVarFp.authRegister(options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for authLogin operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthLoginRequest
 */
export interface AuthenticationApiAuthLoginRequest {
	/**
	 *
	 * @type {LoginUserDto}
	 * @memberof AuthenticationApiAuthLogin
	 */
	readonly loginUserDto: LoginUserDto;
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public authGetHello(options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration).authGetHello(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AuthenticationApiAuthLoginRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public authLogin(requestParameters: AuthenticationApiAuthLoginRequest, options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration).authLogin(requestParameters.loginUserDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public authRegister(options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration).authRegister(options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateCategoryDto} createCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesCreate: async (createCategoryDto: CreateCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createCategoryDto' is not null or undefined
			assertParamExists('categoriesCreate', 'createCategoryDto', createCategoryDto);
			const localVarPath = `/api/v1/categories`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createCategoryDto, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/categories`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('categoriesFindOne', 'id', id);
			const localVarPath = `/api/v1/categories/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('categoriesRemove', 'id', id);
			const localVarPath = `/api/v1/categories/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateCategoryDto} updateCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesUpdate: async (id: string, updateCategoryDto: UpdateCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('categoriesUpdate', 'id', id);
			// verify required parameter 'updateCategoryDto' is not null or undefined
			assertParamExists('categoriesUpdate', 'updateCategoryDto', updateCategoryDto);
			const localVarPath = `/api/v1/categories/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateCategoryDto, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateCategoryDto} createCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesCreate(createCategoryDto: CreateCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesCreate(createCategoryDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesFindOne(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateCategoryDto} updateCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async categoriesUpdate(id: string, updateCategoryDto: UpdateCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesUpdate(id, updateCategoryDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = CategoriesApiFp(configuration);
	return {
		/**
		 *
		 * @param {CreateCategoryDto} createCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesCreate(createCategoryDto: CreateCategoryDto, options?: any): AxiosPromise<void> {
			return localVarFp.categoriesCreate(createCategoryDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindAll(options?: any): AxiosPromise<void> {
			return localVarFp.categoriesFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesFindOne(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.categoriesFindOne(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesRemove(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.categoriesRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateCategoryDto} updateCategoryDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		categoriesUpdate(id: string, updateCategoryDto: UpdateCategoryDto, options?: any): AxiosPromise<void> {
			return localVarFp.categoriesUpdate(id, updateCategoryDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for categoriesCreate operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesCreateRequest
 */
export interface CategoriesApiCategoriesCreateRequest {
	/**
	 *
	 * @type {CreateCategoryDto}
	 * @memberof CategoriesApiCategoriesCreate
	 */
	readonly createCategoryDto: CreateCategoryDto;
}

/**
 * Request parameters for categoriesFindOne operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesFindOneRequest
 */
export interface CategoriesApiCategoriesFindOneRequest {
	/**
	 *
	 * @type {string}
	 * @memberof CategoriesApiCategoriesFindOne
	 */
	readonly id: string;
}

/**
 * Request parameters for categoriesRemove operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesRemoveRequest
 */
export interface CategoriesApiCategoriesRemoveRequest {
	/**
	 *
	 * @type {string}
	 * @memberof CategoriesApiCategoriesRemove
	 */
	readonly id: string;
}

/**
 * Request parameters for categoriesUpdate operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesUpdateRequest
 */
export interface CategoriesApiCategoriesUpdateRequest {
	/**
	 *
	 * @type {string}
	 * @memberof CategoriesApiCategoriesUpdate
	 */
	readonly id: string;

	/**
	 *
	 * @type {UpdateCategoryDto}
	 * @memberof CategoriesApiCategoriesUpdate
	 */
	readonly updateCategoryDto: UpdateCategoryDto;
}

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
	/**
	 *
	 * @param {CategoriesApiCategoriesCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesCreate(requestParameters: CategoriesApiCategoriesCreateRequest, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesCreate(requestParameters.createCategoryDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesFindAll(options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CategoriesApiCategoriesFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesFindOne(requestParameters: CategoriesApiCategoriesFindOneRequest, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CategoriesApiCategoriesRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesRemove(requestParameters: CategoriesApiCategoriesRemoveRequest, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CategoriesApiCategoriesUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CategoriesApi
	 */
	public categoriesUpdate(requestParameters: CategoriesApiCategoriesUpdateRequest, options?: AxiosRequestConfig) {
		return CategoriesApiFp(this.configuration).categoriesUpdate(requestParameters.id, requestParameters.updateCategoryDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * CheckoutApi - axios parameter creator
 * @export
 */
export const CheckoutApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateCheckoutDto} createCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutCreate: async (createCheckoutDto: CreateCheckoutDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createCheckoutDto' is not null or undefined
			assertParamExists('checkoutCreate', 'createCheckoutDto', createCheckoutDto);
			const localVarPath = `/api/v1/checkout`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createCheckoutDto, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/checkout`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('checkoutFindOne', 'id', id);
			const localVarPath = `/api/v1/checkout/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('checkoutRemove', 'id', id);
			const localVarPath = `/api/v1/checkout/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateCheckoutDto} updateCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutUpdate: async (id: string, updateCheckoutDto: UpdateCheckoutDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('checkoutUpdate', 'id', id);
			// verify required parameter 'updateCheckoutDto' is not null or undefined
			assertParamExists('checkoutUpdate', 'updateCheckoutDto', updateCheckoutDto);
			const localVarPath = `/api/v1/checkout/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateCheckoutDto, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * CheckoutApi - functional programming interface
 * @export
 */
export const CheckoutApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = CheckoutApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateCheckoutDto} createCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutCreate(createCheckoutDto: CreateCheckoutDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutCreate(createCheckoutDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutFindOne(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateCheckoutDto} updateCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkoutUpdate(id: string, updateCheckoutDto: UpdateCheckoutDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutUpdate(id, updateCheckoutDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * CheckoutApi - factory interface
 * @export
 */
export const CheckoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = CheckoutApiFp(configuration);
	return {
		/**
		 *
		 * @param {CreateCheckoutDto} createCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutCreate(createCheckoutDto: CreateCheckoutDto, options?: any): AxiosPromise<void> {
			return localVarFp.checkoutCreate(createCheckoutDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutFindAll(options?: any): AxiosPromise<void> {
			return localVarFp.checkoutFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutFindOne(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.checkoutFindOne(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutRemove(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.checkoutRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateCheckoutDto} updateCheckoutDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkoutUpdate(id: string, updateCheckoutDto: UpdateCheckoutDto, options?: any): AxiosPromise<void> {
			return localVarFp.checkoutUpdate(id, updateCheckoutDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for checkoutCreate operation in CheckoutApi.
 * @export
 * @interface CheckoutApiCheckoutCreateRequest
 */
export interface CheckoutApiCheckoutCreateRequest {
	/**
	 *
	 * @type {CreateCheckoutDto}
	 * @memberof CheckoutApiCheckoutCreate
	 */
	readonly createCheckoutDto: CreateCheckoutDto;
}

/**
 * Request parameters for checkoutFindOne operation in CheckoutApi.
 * @export
 * @interface CheckoutApiCheckoutFindOneRequest
 */
export interface CheckoutApiCheckoutFindOneRequest {
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutApiCheckoutFindOne
	 */
	readonly id: string;
}

/**
 * Request parameters for checkoutRemove operation in CheckoutApi.
 * @export
 * @interface CheckoutApiCheckoutRemoveRequest
 */
export interface CheckoutApiCheckoutRemoveRequest {
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutApiCheckoutRemove
	 */
	readonly id: string;
}

/**
 * Request parameters for checkoutUpdate operation in CheckoutApi.
 * @export
 * @interface CheckoutApiCheckoutUpdateRequest
 */
export interface CheckoutApiCheckoutUpdateRequest {
	/**
	 *
	 * @type {string}
	 * @memberof CheckoutApiCheckoutUpdate
	 */
	readonly id: string;

	/**
	 *
	 * @type {UpdateCheckoutDto}
	 * @memberof CheckoutApiCheckoutUpdate
	 */
	readonly updateCheckoutDto: UpdateCheckoutDto;
}

/**
 * CheckoutApi - object-oriented interface
 * @export
 * @class CheckoutApi
 * @extends {BaseAPI}
 */
export class CheckoutApi extends BaseAPI {
	/**
	 *
	 * @param {CheckoutApiCheckoutCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutCreate(requestParameters: CheckoutApiCheckoutCreateRequest, options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutCreate(requestParameters.createCheckoutDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutFindAll(options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CheckoutApiCheckoutFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutFindOne(requestParameters: CheckoutApiCheckoutFindOneRequest, options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CheckoutApiCheckoutRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutRemove(requestParameters: CheckoutApiCheckoutRemoveRequest, options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CheckoutApiCheckoutUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CheckoutApi
	 */
	public checkoutUpdate(requestParameters: CheckoutApiCheckoutUpdateRequest, options?: AxiosRequestConfig) {
		return CheckoutApiFp(this.configuration).checkoutUpdate(requestParameters.id, requestParameters.updateCheckoutDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * CoreApi - axios parameter creator
 * @export
 */
export const CoreApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		settingsGetSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/core/settings`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {SettingsDto} settingsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		settingsUpdateSettings: async (settingsDto: SettingsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'settingsDto' is not null or undefined
			assertParamExists('settingsUpdateSettings', 'settingsDto', settingsDto);
			const localVarPath = `/api/v1/core/settings`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(settingsDto, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * CoreApi - functional programming interface
 * @export
 */
export const CoreApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = CoreApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async settingsGetSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.settingsGetSettings(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {SettingsDto} settingsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async settingsUpdateSettings(settingsDto: SettingsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.settingsUpdateSettings(settingsDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * CoreApi - factory interface
 * @export
 */
export const CoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = CoreApiFp(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		settingsGetSettings(options?: any): AxiosPromise<SettingsDto> {
			return localVarFp.settingsGetSettings(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {SettingsDto} settingsDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		settingsUpdateSettings(settingsDto: SettingsDto, options?: any): AxiosPromise<SettingsDto> {
			return localVarFp.settingsUpdateSettings(settingsDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for settingsUpdateSettings operation in CoreApi.
 * @export
 * @interface CoreApiSettingsUpdateSettingsRequest
 */
export interface CoreApiSettingsUpdateSettingsRequest {
	/**
	 *
	 * @type {SettingsDto}
	 * @memberof CoreApiSettingsUpdateSettings
	 */
	readonly settingsDto: SettingsDto;
}

/**
 * CoreApi - object-oriented interface
 * @export
 * @class CoreApi
 * @extends {BaseAPI}
 */
export class CoreApi extends BaseAPI {
	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CoreApi
	 */
	public settingsGetSettings(options?: AxiosRequestConfig) {
		return CoreApiFp(this.configuration).settingsGetSettings(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CoreApiSettingsUpdateSettingsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CoreApi
	 */
	public settingsUpdateSettings(requestParameters: CoreApiSettingsUpdateSettingsRequest, options?: AxiosRequestConfig) {
		return CoreApiFp(this.configuration).settingsUpdateSettings(requestParameters.settingsDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		appGetData: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/app`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async appGetData(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.appGetData(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = DefaultApiFp(configuration);
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		appGetData(options?: any): AxiosPromise<void> {
			return localVarFp.appGetData(options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DefaultApi
	 */
	public appGetData(options?: AxiosRequestConfig) {
		return DefaultApiFp(this.configuration).appGetData(options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * DiscountApi - axios parameter creator
 * @export
 */
export const DiscountApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateDiscountSaleDto} createDiscountSaleDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesCreate: async (createDiscountSaleDto: CreateDiscountSaleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createDiscountSaleDto' is not null or undefined
			assertParamExists('discountSalesCreate', 'createDiscountSaleDto', createDiscountSaleDto);
			const localVarPath = `/api/v1/discounts`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createDiscountSaleDto, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/discounts`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesFindOne', 'id', id);
			const localVarPath = `/api/v1/discounts/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesRemove', 'id', id);
			const localVarPath = `/api/v1/discounts/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateDiscountDto} updateDiscountDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesUpdate: async (id: string, updateDiscountDto: UpdateDiscountDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('discountSalesUpdate', 'id', id);
			// verify required parameter 'updateDiscountDto' is not null or undefined
			assertParamExists('discountSalesUpdate', 'updateDiscountDto', updateDiscountDto);
			const localVarPath = `/api/v1/discounts/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateDiscountDto, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * DiscountApi - functional programming interface
 * @export
 */
export const DiscountApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = DiscountApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateDiscountSaleDto} createDiscountSaleDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesCreate(createDiscountSaleDto: CreateDiscountSaleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesCreate(createDiscountSaleDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesFindOne(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateDiscountDto} updateDiscountDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async discountSalesUpdate(id: string, updateDiscountDto: UpdateDiscountDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.discountSalesUpdate(id, updateDiscountDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * DiscountApi - factory interface
 * @export
 */
export const DiscountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = DiscountApiFp(configuration);
	return {
		/**
		 *
		 * @param {CreateDiscountSaleDto} createDiscountSaleDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesCreate(createDiscountSaleDto: CreateDiscountSaleDto, options?: any): AxiosPromise<void> {
			return localVarFp.discountSalesCreate(createDiscountSaleDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesFindAll(options?: any): AxiosPromise<void> {
			return localVarFp.discountSalesFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesFindOne(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.discountSalesFindOne(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesRemove(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.discountSalesRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateDiscountDto} updateDiscountDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		discountSalesUpdate(id: string, updateDiscountDto: UpdateDiscountDto, options?: any): AxiosPromise<void> {
			return localVarFp.discountSalesUpdate(id, updateDiscountDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for discountSalesCreate operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesCreateRequest
 */
export interface DiscountApiDiscountSalesCreateRequest {
	/**
	 *
	 * @type {CreateDiscountSaleDto}
	 * @memberof DiscountApiDiscountSalesCreate
	 */
	readonly createDiscountSaleDto: CreateDiscountSaleDto;
}

/**
 * Request parameters for discountSalesFindOne operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesFindOneRequest
 */
export interface DiscountApiDiscountSalesFindOneRequest {
	/**
	 *
	 * @type {string}
	 * @memberof DiscountApiDiscountSalesFindOne
	 */
	readonly id: string;
}

/**
 * Request parameters for discountSalesRemove operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesRemoveRequest
 */
export interface DiscountApiDiscountSalesRemoveRequest {
	/**
	 *
	 * @type {string}
	 * @memberof DiscountApiDiscountSalesRemove
	 */
	readonly id: string;
}

/**
 * Request parameters for discountSalesUpdate operation in DiscountApi.
 * @export
 * @interface DiscountApiDiscountSalesUpdateRequest
 */
export interface DiscountApiDiscountSalesUpdateRequest {
	/**
	 *
	 * @type {string}
	 * @memberof DiscountApiDiscountSalesUpdate
	 */
	readonly id: string;

	/**
	 *
	 * @type {UpdateDiscountDto}
	 * @memberof DiscountApiDiscountSalesUpdate
	 */
	readonly updateDiscountDto: UpdateDiscountDto;
}

/**
 * DiscountApi - object-oriented interface
 * @export
 * @class DiscountApi
 * @extends {BaseAPI}
 */
export class DiscountApi extends BaseAPI {
	/**
	 *
	 * @param {DiscountApiDiscountSalesCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesCreate(requestParameters: DiscountApiDiscountSalesCreateRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesCreate(requestParameters.createDiscountSaleDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesFindAll(options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesFindOne(requestParameters: DiscountApiDiscountSalesFindOneRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesRemove(requestParameters: DiscountApiDiscountSalesRemoveRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DiscountApiDiscountSalesUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DiscountApi
	 */
	public discountSalesUpdate(requestParameters: DiscountApiDiscountSalesUpdateRequest, options?: AxiosRequestConfig) {
		return DiscountApiFp(this.configuration).discountSalesUpdate(requestParameters.id, requestParameters.updateDiscountDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateOrderDto} createOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderCreate: async (createOrderDto: CreateOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createOrderDto' is not null or undefined
			assertParamExists('orderCreate', 'createOrderDto', createOrderDto);
			const localVarPath = `/api/v1/order`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createOrderDto, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/order`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('orderFindOne', 'id', id);
			const localVarPath = `/api/v1/order/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('orderRemove', 'id', id);
			const localVarPath = `/api/v1/order/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateOrderDto} updateOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderUpdate: async (id: string, updateOrderDto: UpdateOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('orderUpdate', 'id', id);
			// verify required parameter 'updateOrderDto' is not null or undefined
			assertParamExists('orderUpdate', 'updateOrderDto', updateOrderDto);
			const localVarPath = `/api/v1/order/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateOrderDto, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateOrderDto} createOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderCreate(createOrderDto: CreateOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderCreate(createOrderDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderFindOne(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateOrderDto} updateOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async orderUpdate(id: string, updateOrderDto: UpdateOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.orderUpdate(id, updateOrderDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = OrdersApiFp(configuration);
	return {
		/**
		 *
		 * @param {CreateOrderDto} createOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderCreate(createOrderDto: CreateOrderDto, options?: any): AxiosPromise<void> {
			return localVarFp.orderCreate(createOrderDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderFindAll(options?: any): AxiosPromise<void> {
			return localVarFp.orderFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderFindOne(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.orderFindOne(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderRemove(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.orderRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateOrderDto} updateOrderDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		orderUpdate(id: string, updateOrderDto: UpdateOrderDto, options?: any): AxiosPromise<void> {
			return localVarFp.orderUpdate(id, updateOrderDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for orderCreate operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderCreateRequest
 */
export interface OrdersApiOrderCreateRequest {
	/**
	 *
	 * @type {CreateOrderDto}
	 * @memberof OrdersApiOrderCreate
	 */
	readonly createOrderDto: CreateOrderDto;
}

/**
 * Request parameters for orderFindOne operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderFindOneRequest
 */
export interface OrdersApiOrderFindOneRequest {
	/**
	 *
	 * @type {string}
	 * @memberof OrdersApiOrderFindOne
	 */
	readonly id: string;
}

/**
 * Request parameters for orderRemove operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderRemoveRequest
 */
export interface OrdersApiOrderRemoveRequest {
	/**
	 *
	 * @type {string}
	 * @memberof OrdersApiOrderRemove
	 */
	readonly id: string;
}

/**
 * Request parameters for orderUpdate operation in OrdersApi.
 * @export
 * @interface OrdersApiOrderUpdateRequest
 */
export interface OrdersApiOrderUpdateRequest {
	/**
	 *
	 * @type {string}
	 * @memberof OrdersApiOrderUpdate
	 */
	readonly id: string;

	/**
	 *
	 * @type {UpdateOrderDto}
	 * @memberof OrdersApiOrderUpdate
	 */
	readonly updateOrderDto: UpdateOrderDto;
}

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
	/**
	 *
	 * @param {OrdersApiOrderCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderCreate(requestParameters: OrdersApiOrderCreateRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderCreate(requestParameters.createOrderDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderFindAll(options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {OrdersApiOrderFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderFindOne(requestParameters: OrdersApiOrderFindOneRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {OrdersApiOrderRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderRemove(requestParameters: OrdersApiOrderRemoveRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {OrdersApiOrderUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OrdersApi
	 */
	public orderUpdate(requestParameters: OrdersApiOrderUpdateRequest, options?: AxiosRequestConfig) {
		return OrdersApiFp(this.configuration).orderUpdate(requestParameters.id, requestParameters.updateOrderDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * ProductTypesApi - axios parameter creator
 * @export
 */
export const ProductTypesApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateProductTypeDto} createProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesCreate: async (createProductTypeDto: CreateProductTypeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createProductTypeDto' is not null or undefined
			assertParamExists('productTypesCreate', 'createProductTypeDto', createProductTypeDto);
			const localVarPath = `/api/v1/product-types`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createProductTypeDto, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/product-types`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productTypesFindOne', 'id', id);
			const localVarPath = `/api/v1/product-types/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productTypesRemove', 'id', id);
			const localVarPath = `/api/v1/product-types/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateProductTypeDto} updateProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesUpdate: async (id: string, updateProductTypeDto: UpdateProductTypeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productTypesUpdate', 'id', id);
			// verify required parameter 'updateProductTypeDto' is not null or undefined
			assertParamExists('productTypesUpdate', 'updateProductTypeDto', updateProductTypeDto);
			const localVarPath = `/api/v1/product-types/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateProductTypeDto, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * ProductTypesApi - functional programming interface
 * @export
 */
export const ProductTypesApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = ProductTypesApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateProductTypeDto} createProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productTypesCreate(createProductTypeDto: CreateProductTypeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productTypesCreate(createProductTypeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productTypesFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productTypesFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productTypesFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productTypesFindOne(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productTypesRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productTypesRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateProductTypeDto} updateProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productTypesUpdate(id: string, updateProductTypeDto: UpdateProductTypeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productTypesUpdate(id, updateProductTypeDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * ProductTypesApi - factory interface
 * @export
 */
export const ProductTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = ProductTypesApiFp(configuration);
	return {
		/**
		 *
		 * @param {CreateProductTypeDto} createProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesCreate(createProductTypeDto: CreateProductTypeDto, options?: any): AxiosPromise<void> {
			return localVarFp.productTypesCreate(createProductTypeDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesFindAll(options?: any): AxiosPromise<void> {
			return localVarFp.productTypesFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesFindOne(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.productTypesFindOne(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesRemove(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.productTypesRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateProductTypeDto} updateProductTypeDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productTypesUpdate(id: string, updateProductTypeDto: UpdateProductTypeDto, options?: any): AxiosPromise<void> {
			return localVarFp.productTypesUpdate(id, updateProductTypeDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for productTypesCreate operation in ProductTypesApi.
 * @export
 * @interface ProductTypesApiProductTypesCreateRequest
 */
export interface ProductTypesApiProductTypesCreateRequest {
	/**
	 *
	 * @type {CreateProductTypeDto}
	 * @memberof ProductTypesApiProductTypesCreate
	 */
	readonly createProductTypeDto: CreateProductTypeDto;
}

/**
 * Request parameters for productTypesFindOne operation in ProductTypesApi.
 * @export
 * @interface ProductTypesApiProductTypesFindOneRequest
 */
export interface ProductTypesApiProductTypesFindOneRequest {
	/**
	 *
	 * @type {string}
	 * @memberof ProductTypesApiProductTypesFindOne
	 */
	readonly id: string;
}

/**
 * Request parameters for productTypesRemove operation in ProductTypesApi.
 * @export
 * @interface ProductTypesApiProductTypesRemoveRequest
 */
export interface ProductTypesApiProductTypesRemoveRequest {
	/**
	 *
	 * @type {string}
	 * @memberof ProductTypesApiProductTypesRemove
	 */
	readonly id: string;
}

/**
 * Request parameters for productTypesUpdate operation in ProductTypesApi.
 * @export
 * @interface ProductTypesApiProductTypesUpdateRequest
 */
export interface ProductTypesApiProductTypesUpdateRequest {
	/**
	 *
	 * @type {string}
	 * @memberof ProductTypesApiProductTypesUpdate
	 */
	readonly id: string;

	/**
	 *
	 * @type {UpdateProductTypeDto}
	 * @memberof ProductTypesApiProductTypesUpdate
	 */
	readonly updateProductTypeDto: UpdateProductTypeDto;
}

/**
 * ProductTypesApi - object-oriented interface
 * @export
 * @class ProductTypesApi
 * @extends {BaseAPI}
 */
export class ProductTypesApi extends BaseAPI {
	/**
	 *
	 * @param {ProductTypesApiProductTypesCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductTypesApi
	 */
	public productTypesCreate(requestParameters: ProductTypesApiProductTypesCreateRequest, options?: AxiosRequestConfig) {
		return ProductTypesApiFp(this.configuration).productTypesCreate(requestParameters.createProductTypeDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductTypesApi
	 */
	public productTypesFindAll(options?: AxiosRequestConfig) {
		return ProductTypesApiFp(this.configuration).productTypesFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductTypesApiProductTypesFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductTypesApi
	 */
	public productTypesFindOne(requestParameters: ProductTypesApiProductTypesFindOneRequest, options?: AxiosRequestConfig) {
		return ProductTypesApiFp(this.configuration).productTypesFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductTypesApiProductTypesRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductTypesApi
	 */
	public productTypesRemove(requestParameters: ProductTypesApiProductTypesRemoveRequest, options?: AxiosRequestConfig) {
		return ProductTypesApiFp(this.configuration).productTypesRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductTypesApiProductTypesUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductTypesApi
	 */
	public productTypesUpdate(requestParameters: ProductTypesApiProductTypesUpdateRequest, options?: AxiosRequestConfig) {
		return ProductTypesApiFp(this.configuration).productTypesUpdate(requestParameters.id, requestParameters.updateProductTypeDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {CreateProductDto} createProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsCreate: async (createProductDto: CreateProductDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'createProductDto' is not null or undefined
			assertParamExists('productsCreate', 'createProductDto', createProductDto);
			const localVarPath = `/api/v1/products`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(createProductDto, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/products`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productsFindOne', 'id', id);
			const localVarPath = `/api/v1/products/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productsRemove', 'id', id);
			const localVarPath = `/api/v1/products/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateProductDto} updateProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsUpdate: async (id: string, updateProductDto: UpdateProductDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('productsUpdate', 'id', id);
			// verify required parameter 'updateProductDto' is not null or undefined
			assertParamExists('productsUpdate', 'updateProductDto', updateProductDto);
			const localVarPath = `/api/v1/products/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(updateProductDto, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {CreateProductDto} createProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsCreate(createProductDto: CreateProductDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsCreate(createProductDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsFindOne(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateProductDto} updateProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async productsUpdate(id: string, updateProductDto: UpdateProductDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.productsUpdate(id, updateProductDto, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = ProductsApiFp(configuration);
	return {
		/**
		 *
		 * @param {CreateProductDto} createProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsCreate(createProductDto: CreateProductDto, options?: any): AxiosPromise<void> {
			return localVarFp.productsCreate(createProductDto, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsFindAll(options?: any): AxiosPromise<void> {
			return localVarFp.productsFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsFindOne(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.productsFindOne(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsRemove(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.productsRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {UpdateProductDto} updateProductDto
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		productsUpdate(id: string, updateProductDto: UpdateProductDto, options?: any): AxiosPromise<void> {
			return localVarFp.productsUpdate(id, updateProductDto, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for productsCreate operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsCreateRequest
 */
export interface ProductsApiProductsCreateRequest {
	/**
	 *
	 * @type {CreateProductDto}
	 * @memberof ProductsApiProductsCreate
	 */
	readonly createProductDto: CreateProductDto;
}

/**
 * Request parameters for productsFindOne operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsFindOneRequest
 */
export interface ProductsApiProductsFindOneRequest {
	/**
	 *
	 * @type {string}
	 * @memberof ProductsApiProductsFindOne
	 */
	readonly id: string;
}

/**
 * Request parameters for productsRemove operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsRemoveRequest
 */
export interface ProductsApiProductsRemoveRequest {
	/**
	 *
	 * @type {string}
	 * @memberof ProductsApiProductsRemove
	 */
	readonly id: string;
}

/**
 * Request parameters for productsUpdate operation in ProductsApi.
 * @export
 * @interface ProductsApiProductsUpdateRequest
 */
export interface ProductsApiProductsUpdateRequest {
	/**
	 *
	 * @type {string}
	 * @memberof ProductsApiProductsUpdate
	 */
	readonly id: string;

	/**
	 *
	 * @type {UpdateProductDto}
	 * @memberof ProductsApiProductsUpdate
	 */
	readonly updateProductDto: UpdateProductDto;
}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
	/**
	 *
	 * @param {ProductsApiProductsCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsCreate(requestParameters: ProductsApiProductsCreateRequest, options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsCreate(requestParameters.createProductDto, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsFindAll(options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductsApiProductsFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsFindOne(requestParameters: ProductsApiProductsFindOneRequest, options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductsApiProductsRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsRemove(requestParameters: ProductsApiProductsRemoveRequest, options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProductsApiProductsUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProductsApi
	 */
	public productsUpdate(requestParameters: ProductsApiProductsUpdateRequest, options?: AxiosRequestConfig) {
		return ProductsApiFp(this.configuration).productsUpdate(requestParameters.id, requestParameters.updateProductDto, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {object} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersCreate: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'body' is not null or undefined
			assertParamExists('usersCreate', 'body', body);
			const localVarPath = `/api/v1/users`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/v1/users`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('usersFindOne', 'id', id);
			const localVarPath = `/api/v1/users/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('usersRemove', 'id', id);
			const localVarPath = `/api/v1/users/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {object} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersUpdate: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('usersUpdate', 'id', id);
			// verify required parameter 'body' is not null or undefined
			assertParamExists('usersUpdate', 'body', body);
			const localVarPath = `/api/v1/users/{id}`
				.replace(`{${ 'id' }}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if ( configuration ) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {object} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async usersCreate(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.usersCreate(body, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async usersFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.usersFindAll(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async usersFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.usersFindOne(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async usersRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.usersRemove(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {object} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async usersUpdate(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.usersUpdate(id, body, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = UsersApiFp(configuration);
	return {
		/**
		 *
		 * @param {object} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersCreate(body: object, options?: any): AxiosPromise<void> {
			return localVarFp.usersCreate(body, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersFindAll(options?: any): AxiosPromise<void> {
			return localVarFp.usersFindAll(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersFindOne(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.usersFindOne(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersRemove(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.usersRemove(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {object} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		usersUpdate(id: string, body: object, options?: any): AxiosPromise<void> {
			return localVarFp.usersUpdate(id, body, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for usersCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersCreateRequest
 */
export interface UsersApiUsersCreateRequest {
	/**
	 *
	 * @type {object}
	 * @memberof UsersApiUsersCreate
	 */
	readonly body: object;
}

/**
 * Request parameters for usersFindOne operation in UsersApi.
 * @export
 * @interface UsersApiUsersFindOneRequest
 */
export interface UsersApiUsersFindOneRequest {
	/**
	 *
	 * @type {string}
	 * @memberof UsersApiUsersFindOne
	 */
	readonly id: string;
}

/**
 * Request parameters for usersRemove operation in UsersApi.
 * @export
 * @interface UsersApiUsersRemoveRequest
 */
export interface UsersApiUsersRemoveRequest {
	/**
	 *
	 * @type {string}
	 * @memberof UsersApiUsersRemove
	 */
	readonly id: string;
}

/**
 * Request parameters for usersUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersUpdateRequest
 */
export interface UsersApiUsersUpdateRequest {
	/**
	 *
	 * @type {string}
	 * @memberof UsersApiUsersUpdate
	 */
	readonly id: string;

	/**
	 *
	 * @type {object}
	 * @memberof UsersApiUsersUpdate
	 */
	readonly body: object;
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
	/**
	 *
	 * @param {UsersApiUsersCreateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public usersCreate(requestParameters: UsersApiUsersCreateRequest, options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration).usersCreate(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public usersFindAll(options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration).usersFindAll(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {UsersApiUsersFindOneRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public usersFindOne(requestParameters: UsersApiUsersFindOneRequest, options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration).usersFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {UsersApiUsersRemoveRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public usersRemove(requestParameters: UsersApiUsersRemoveRequest, options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration).usersRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {UsersApiUsersUpdateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public usersUpdate(requestParameters: UsersApiUsersUpdateRequest, options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration).usersUpdate(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
	}
}


